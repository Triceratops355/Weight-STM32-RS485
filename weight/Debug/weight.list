
weight.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004484  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003ec  08004590  08004590  00014590  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800497c  0800497c  000200ec  2**0
                  CONTENTS
  4 .ARM          00000000  0800497c  0800497c  000200ec  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800497c  0800497c  000200ec  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800497c  0800497c  0001497c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004980  08004980  00014980  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000ec  20000000  08004984  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000384  200000ec  08004a70  000200ec  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000470  08004a70  00020470  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000200ec  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020115  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000f137  00000000  00000000  00020158  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002d41  00000000  00000000  0002f28f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000f78  00000000  00000000  00031fd0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000bce  00000000  00000000  00032f48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001b3d4  00000000  00000000  00033b16  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00016c52  00000000  00000000  0004eeea  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0008ecc6  00000000  00000000  00065b3c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000045a8  00000000  00000000  000f4804  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006f  00000000  00000000  000f8dac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	200000ec 	.word	0x200000ec
 8000128:	00000000 	.word	0x00000000
 800012c:	08004578 	.word	0x08004578

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	200000f0 	.word	0x200000f0
 8000148:	08004578 	.word	0x08004578

0800014c <hx711_init>:
 */

#include "hx711.h"

void hx711_init(HX711 *data, GPIO_TypeDef *Data_GPIO, uint8_t dataPin, GPIO_TypeDef *SCK_GPIO, uint8_t sckPin)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	b084      	sub	sp, #16
 8000150:	af00      	add	r7, sp, #0
 8000152:	60f8      	str	r0, [r7, #12]
 8000154:	60b9      	str	r1, [r7, #8]
 8000156:	603b      	str	r3, [r7, #0]
 8000158:	4613      	mov	r3, r2
 800015a:	71fb      	strb	r3, [r7, #7]
	data->Data_GPIO = Data_GPIO;
 800015c:	68fb      	ldr	r3, [r7, #12]
 800015e:	68ba      	ldr	r2, [r7, #8]
 8000160:	601a      	str	r2, [r3, #0]
	data->dataPin = dataPin;
 8000162:	79fb      	ldrb	r3, [r7, #7]
 8000164:	b29a      	uxth	r2, r3
 8000166:	68fb      	ldr	r3, [r7, #12]
 8000168:	811a      	strh	r2, [r3, #8]
	data->SCK_GPIO = SCK_GPIO;
 800016a:	68fb      	ldr	r3, [r7, #12]
 800016c:	683a      	ldr	r2, [r7, #0]
 800016e:	605a      	str	r2, [r3, #4]
	data->sckPin = sckPin;
 8000170:	7e3b      	ldrb	r3, [r7, #24]
 8000172:	b29a      	uxth	r2, r3
 8000174:	68fb      	ldr	r3, [r7, #12]
 8000176:	815a      	strh	r2, [r3, #10]

	HAL_GPIO_WritePin(data->SCK_GPIO, data->sckPin, GPIO_PIN_RESET);
 8000178:	68fb      	ldr	r3, [r7, #12]
 800017a:	6858      	ldr	r0, [r3, #4]
 800017c:	68fb      	ldr	r3, [r7, #12]
 800017e:	895b      	ldrh	r3, [r3, #10]
 8000180:	2200      	movs	r2, #0
 8000182:	4619      	mov	r1, r3
 8000184:	f000 ffcf 	bl	8001126 <HAL_GPIO_WritePin>
	HAL_Delay(50);
 8000188:	2032      	movs	r0, #50	; 0x32
 800018a:	f000 fce3 	bl	8000b54 <HAL_Delay>
}
 800018e:	bf00      	nop
 8000190:	3710      	adds	r7, #16
 8000192:	46bd      	mov	sp, r7
 8000194:	bd80      	pop	{r7, pc}

08000196 <hx711_value>:

int32_t hx711_value(HX711 *data, uint8_t gain)
{
 8000196:	b580      	push	{r7, lr}
 8000198:	b086      	sub	sp, #24
 800019a:	af00      	add	r7, sp, #0
 800019c:	6078      	str	r0, [r7, #4]
 800019e:	460b      	mov	r3, r1
 80001a0:	70fb      	strb	r3, [r7, #3]
	data->gain = gain;
 80001a2:	687b      	ldr	r3, [r7, #4]
 80001a4:	78fa      	ldrb	r2, [r7, #3]
 80001a6:	731a      	strb	r2, [r3, #12]
	int32_t count = 0;
 80001a8:	2300      	movs	r3, #0
 80001aa:	617b      	str	r3, [r7, #20]
	uint8_t dout;
	int32_t fill;

	while(HAL_GPIO_ReadPin(data->Data_GPIO, data->dataPin));
 80001ac:	bf00      	nop
 80001ae:	687b      	ldr	r3, [r7, #4]
 80001b0:	681a      	ldr	r2, [r3, #0]
 80001b2:	687b      	ldr	r3, [r7, #4]
 80001b4:	891b      	ldrh	r3, [r3, #8]
 80001b6:	4619      	mov	r1, r3
 80001b8:	4610      	mov	r0, r2
 80001ba:	f000 ff9d 	bl	80010f8 <HAL_GPIO_ReadPin>
 80001be:	4603      	mov	r3, r0
 80001c0:	2b00      	cmp	r3, #0
 80001c2:	d1f4      	bne.n	80001ae <hx711_value+0x18>

	HAL_GPIO_WritePin(data->SCK_GPIO, data->sckPin, GPIO_PIN_RESET);
 80001c4:	687b      	ldr	r3, [r7, #4]
 80001c6:	6858      	ldr	r0, [r3, #4]
 80001c8:	687b      	ldr	r3, [r7, #4]
 80001ca:	895b      	ldrh	r3, [r3, #10]
 80001cc:	2200      	movs	r2, #0
 80001ce:	4619      	mov	r1, r3
 80001d0:	f000 ffa9 	bl	8001126 <HAL_GPIO_WritePin>

	for(uint8_t i = 0; i < 24 ; i++){
 80001d4:	2300      	movs	r3, #0
 80001d6:	73fb      	strb	r3, [r7, #15]
 80001d8:	e025      	b.n	8000226 <hx711_value+0x90>
		HAL_GPIO_WritePin(data->SCK_GPIO, data->sckPin, GPIO_PIN_SET);
 80001da:	687b      	ldr	r3, [r7, #4]
 80001dc:	6858      	ldr	r0, [r3, #4]
 80001de:	687b      	ldr	r3, [r7, #4]
 80001e0:	895b      	ldrh	r3, [r3, #10]
 80001e2:	2201      	movs	r2, #1
 80001e4:	4619      	mov	r1, r3
 80001e6:	f000 ff9e 	bl	8001126 <HAL_GPIO_WritePin>
		dout = HAL_GPIO_ReadPin(data->Data_GPIO, data->dataPin);
 80001ea:	687b      	ldr	r3, [r7, #4]
 80001ec:	681a      	ldr	r2, [r3, #0]
 80001ee:	687b      	ldr	r3, [r7, #4]
 80001f0:	891b      	ldrh	r3, [r3, #8]
 80001f2:	4619      	mov	r1, r3
 80001f4:	4610      	mov	r0, r2
 80001f6:	f000 ff7f 	bl	80010f8 <HAL_GPIO_ReadPin>
 80001fa:	4603      	mov	r3, r0
 80001fc:	737b      	strb	r3, [r7, #13]
		count = count << 1;
 80001fe:	697b      	ldr	r3, [r7, #20]
 8000200:	005b      	lsls	r3, r3, #1
 8000202:	617b      	str	r3, [r7, #20]
		if(dout){
 8000204:	7b7b      	ldrb	r3, [r7, #13]
 8000206:	2b00      	cmp	r3, #0
 8000208:	d002      	beq.n	8000210 <hx711_value+0x7a>
			count++;
 800020a:	697b      	ldr	r3, [r7, #20]
 800020c:	3301      	adds	r3, #1
 800020e:	617b      	str	r3, [r7, #20]
		}
		HAL_GPIO_WritePin(data->SCK_GPIO, data->sckPin, GPIO_PIN_RESET);
 8000210:	687b      	ldr	r3, [r7, #4]
 8000212:	6858      	ldr	r0, [r3, #4]
 8000214:	687b      	ldr	r3, [r7, #4]
 8000216:	895b      	ldrh	r3, [r3, #10]
 8000218:	2200      	movs	r2, #0
 800021a:	4619      	mov	r1, r3
 800021c:	f000 ff83 	bl	8001126 <HAL_GPIO_WritePin>
	for(uint8_t i = 0; i < 24 ; i++){
 8000220:	7bfb      	ldrb	r3, [r7, #15]
 8000222:	3301      	adds	r3, #1
 8000224:	73fb      	strb	r3, [r7, #15]
 8000226:	7bfb      	ldrb	r3, [r7, #15]
 8000228:	2b17      	cmp	r3, #23
 800022a:	d9d6      	bls.n	80001da <hx711_value+0x44>
	}

	for (uint8_t i = 0; i < data->gain; i++){
 800022c:	2300      	movs	r3, #0
 800022e:	73bb      	strb	r3, [r7, #14]
 8000230:	e012      	b.n	8000258 <hx711_value+0xc2>
		HAL_GPIO_WritePin(data->SCK_GPIO, data->sckPin, GPIO_PIN_SET);
 8000232:	687b      	ldr	r3, [r7, #4]
 8000234:	6858      	ldr	r0, [r3, #4]
 8000236:	687b      	ldr	r3, [r7, #4]
 8000238:	895b      	ldrh	r3, [r3, #10]
 800023a:	2201      	movs	r2, #1
 800023c:	4619      	mov	r1, r3
 800023e:	f000 ff72 	bl	8001126 <HAL_GPIO_WritePin>
	    HAL_GPIO_WritePin(data->SCK_GPIO, data->sckPin, GPIO_PIN_RESET);
 8000242:	687b      	ldr	r3, [r7, #4]
 8000244:	6858      	ldr	r0, [r3, #4]
 8000246:	687b      	ldr	r3, [r7, #4]
 8000248:	895b      	ldrh	r3, [r3, #10]
 800024a:	2200      	movs	r2, #0
 800024c:	4619      	mov	r1, r3
 800024e:	f000 ff6a 	bl	8001126 <HAL_GPIO_WritePin>
	for (uint8_t i = 0; i < data->gain; i++){
 8000252:	7bbb      	ldrb	r3, [r7, #14]
 8000254:	3301      	adds	r3, #1
 8000256:	73bb      	strb	r3, [r7, #14]
 8000258:	687b      	ldr	r3, [r7, #4]
 800025a:	7b1b      	ldrb	r3, [r3, #12]
 800025c:	7bba      	ldrb	r2, [r7, #14]
 800025e:	429a      	cmp	r2, r3
 8000260:	d3e7      	bcc.n	8000232 <hx711_value+0x9c>
	}

	if (count & 0x800000){
 8000262:	697b      	ldr	r3, [r7, #20]
 8000264:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8000268:	2b00      	cmp	r3, #0
 800026a:	d003      	beq.n	8000274 <hx711_value+0xde>
	    fill = 0xff000000;
 800026c:	f04f 437f 	mov.w	r3, #4278190080	; 0xff000000
 8000270:	613b      	str	r3, [r7, #16]
 8000272:	e001      	b.n	8000278 <hx711_value+0xe2>
	}else{
	    fill = 0x00000000;
 8000274:	2300      	movs	r3, #0
 8000276:	613b      	str	r3, [r7, #16]
	}

	return fill + count;
 8000278:	693a      	ldr	r2, [r7, #16]
 800027a:	697b      	ldr	r3, [r7, #20]
 800027c:	4413      	add	r3, r2
}
 800027e:	4618      	mov	r0, r3
 8000280:	3718      	adds	r7, #24
 8000282:	46bd      	mov	sp, r7
 8000284:	bd80      	pop	{r7, pc}
	...

08000288 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000288:	b580      	push	{r7, lr}
 800028a:	b08c      	sub	sp, #48	; 0x30
 800028c:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800028e:	f000 fbff 	bl	8000a90 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000292:	f000 f87b 	bl	800038c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000296:	f000 f92b 	bl	80004f0 <MX_GPIO_Init>
  MX_TIM3_Init();
 800029a:	f000 f8b3 	bl	8000404 <MX_TIM3_Init>
  MX_USART1_UART_Init();
 800029e:	f000 f8fd 	bl	800049c <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  eMBInit( MB_RTU, 0x20, 0, 115200, MB_PAR_NONE );
 80002a2:	2300      	movs	r3, #0
 80002a4:	9300      	str	r3, [sp, #0]
 80002a6:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 80002aa:	2200      	movs	r2, #0
 80002ac:	2120      	movs	r1, #32
 80002ae:	2000      	movs	r0, #0
 80002b0:	f002 f8cc 	bl	800244c <eMBInit>
  Modbus_HTIM_Init(&htim3);
 80002b4:	482f      	ldr	r0, [pc, #188]	; (8000374 <main+0xec>)
 80002b6:	f003 f96f 	bl	8003598 <Modbus_HTIM_Init>
  Modbus_UART_Init(&huart1, TX_ENABLE_GPIO_Port, TX_ENABLE_Pin);
 80002ba:	f44f 7280 	mov.w	r2, #256	; 0x100
 80002be:	492e      	ldr	r1, [pc, #184]	; (8000378 <main+0xf0>)
 80002c0:	482e      	ldr	r0, [pc, #184]	; (800037c <main+0xf4>)
 80002c2:	f003 f917 	bl	80034f4 <Modbus_UART_Init>
  eMBEnable(  );
 80002c6:	f002 f93d 	bl	8002544 <eMBEnable>
  int32_t first_weightB;
  int32_t zero_first_weightB;
  int32_t second_weightB;
  int32_t zero_second_weightB;
  int32_t weight;
  usRegHoldingBuf[1] = 1;
 80002ca:	4b2d      	ldr	r3, [pc, #180]	; (8000380 <main+0xf8>)
 80002cc:	2201      	movs	r2, #1
 80002ce:	805a      	strh	r2, [r3, #2]
  while (1)
  {
	  (void)eMBPoll();
 80002d0:	f002 f954 	bl	800257c <eMBPoll>
	  	if (usRegHoldingBuf[1]) {
 80002d4:	4b2a      	ldr	r3, [pc, #168]	; (8000380 <main+0xf8>)
 80002d6:	885b      	ldrh	r3, [r3, #2]
 80002d8:	2b00      	cmp	r3, #0
 80002da:	d016      	beq.n	800030a <main+0x82>
	  		hx711_init(&hx711, GPIOA, DOUT1_Pin, GPIOA, PD_SCK1_Pin);
 80002dc:	1d38      	adds	r0, r7, #4
 80002de:	2310      	movs	r3, #16
 80002e0:	9300      	str	r3, [sp, #0]
 80002e2:	4b25      	ldr	r3, [pc, #148]	; (8000378 <main+0xf0>)
 80002e4:	2208      	movs	r2, #8
 80002e6:	4924      	ldr	r1, [pc, #144]	; (8000378 <main+0xf0>)
 80002e8:	f7ff ff30 	bl	800014c <hx711_init>
	  		zero_first_weightA = hx711_value(&hx711, 1);
 80002ec:	1d3b      	adds	r3, r7, #4
 80002ee:	2101      	movs	r1, #1
 80002f0:	4618      	mov	r0, r3
 80002f2:	f7ff ff50 	bl	8000196 <hx711_value>
 80002f6:	6278      	str	r0, [r7, #36]	; 0x24
	  		zero_first_weightB = hx711_value(&hx711, 2);
 80002f8:	1d3b      	adds	r3, r7, #4
 80002fa:	2102      	movs	r1, #2
 80002fc:	4618      	mov	r0, r3
 80002fe:	f7ff ff4a 	bl	8000196 <hx711_value>
 8000302:	6238      	str	r0, [r7, #32]
//	  		hx711_init(&hx711, GPIOA, DOUT2_Pin, GPIOA, PD_SCK2_Pin);
//	  		zero_second_weightA = hx711_value(&hx711, 1);
//	  		zero_second_weightB = hx711_value(&hx711, 2);
	  		usRegHoldingBuf[1] = 0;
 8000304:	4b1e      	ldr	r3, [pc, #120]	; (8000380 <main+0xf8>)
 8000306:	2200      	movs	r2, #0
 8000308:	805a      	strh	r2, [r3, #2]
	  		}
	  	if (usRegHoldingBuf[0]) {
 800030a:	4b1d      	ldr	r3, [pc, #116]	; (8000380 <main+0xf8>)
 800030c:	881b      	ldrh	r3, [r3, #0]
 800030e:	2b00      	cmp	r3, #0
 8000310:	d0de      	beq.n	80002d0 <main+0x48>
	  		hx711_init(&hx711, GPIOA, DOUT1_Pin, GPIOA, PD_SCK1_Pin);
 8000312:	1d38      	adds	r0, r7, #4
 8000314:	2310      	movs	r3, #16
 8000316:	9300      	str	r3, [sp, #0]
 8000318:	4b17      	ldr	r3, [pc, #92]	; (8000378 <main+0xf0>)
 800031a:	2208      	movs	r2, #8
 800031c:	4916      	ldr	r1, [pc, #88]	; (8000378 <main+0xf0>)
 800031e:	f7ff ff15 	bl	800014c <hx711_init>
	  		first_weightA  = hx711_value(&hx711, 1) - zero_first_weightA;
 8000322:	1d3b      	adds	r3, r7, #4
 8000324:	2101      	movs	r1, #1
 8000326:	4618      	mov	r0, r3
 8000328:	f7ff ff35 	bl	8000196 <hx711_value>
 800032c:	4602      	mov	r2, r0
 800032e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000330:	1ad3      	subs	r3, r2, r3
 8000332:	61fb      	str	r3, [r7, #28]
	  		first_weightB  = hx711_value(&hx711, 2) - zero_first_weightB;
 8000334:	1d3b      	adds	r3, r7, #4
 8000336:	2102      	movs	r1, #2
 8000338:	4618      	mov	r0, r3
 800033a:	f7ff ff2c 	bl	8000196 <hx711_value>
 800033e:	4602      	mov	r2, r0
 8000340:	6a3b      	ldr	r3, [r7, #32]
 8000342:	1ad3      	subs	r3, r2, r3
 8000344:	61bb      	str	r3, [r7, #24]
//	  		hx711_init(&hx711, GPIOA, DOUT2_Pin, GPIOA, PD_SCK2_Pin);
//	  		second_weightA = hx711_value(&hx711, 1) - zero_second_weightA;
//	  		second_weightB = hx711_value(&hx711, 2) - zero_second_weightB;

	  		weight = (first_weightA + first_weightB) / 100;
 8000346:	69fa      	ldr	r2, [r7, #28]
 8000348:	69bb      	ldr	r3, [r7, #24]
 800034a:	4413      	add	r3, r2
 800034c:	4a0d      	ldr	r2, [pc, #52]	; (8000384 <main+0xfc>)
 800034e:	fb82 1203 	smull	r1, r2, r2, r3
 8000352:	1152      	asrs	r2, r2, #5
 8000354:	17db      	asrs	r3, r3, #31
 8000356:	1ad3      	subs	r3, r2, r3
 8000358:	617b      	str	r3, [r7, #20]

	  		usRegInputBuf[0] = weight >> 16;
 800035a:	697b      	ldr	r3, [r7, #20]
 800035c:	141b      	asrs	r3, r3, #16
 800035e:	b29a      	uxth	r2, r3
 8000360:	4b09      	ldr	r3, [pc, #36]	; (8000388 <main+0x100>)
 8000362:	801a      	strh	r2, [r3, #0]
	  		usRegInputBuf[1] = weight & 0xFFFF;
 8000364:	697b      	ldr	r3, [r7, #20]
 8000366:	b29a      	uxth	r2, r3
 8000368:	4b07      	ldr	r3, [pc, #28]	; (8000388 <main+0x100>)
 800036a:	805a      	strh	r2, [r3, #2]

	  		usRegHoldingBuf[0] = 0;
 800036c:	4b04      	ldr	r3, [pc, #16]	; (8000380 <main+0xf8>)
 800036e:	2200      	movs	r2, #0
 8000370:	801a      	strh	r2, [r3, #0]
	  (void)eMBPoll();
 8000372:	e7ad      	b.n	80002d0 <main+0x48>
 8000374:	20000108 	.word	0x20000108
 8000378:	40010800 	.word	0x40010800
 800037c:	20000150 	.word	0x20000150
 8000380:	2000019c 	.word	0x2000019c
 8000384:	51eb851f 	.word	0x51eb851f
 8000388:	20000198 	.word	0x20000198

0800038c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800038c:	b580      	push	{r7, lr}
 800038e:	b090      	sub	sp, #64	; 0x40
 8000390:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000392:	f107 0318 	add.w	r3, r7, #24
 8000396:	2228      	movs	r2, #40	; 0x28
 8000398:	2100      	movs	r1, #0
 800039a:	4618      	mov	r0, r3
 800039c:	f003 fa6b 	bl	8003876 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80003a0:	1d3b      	adds	r3, r7, #4
 80003a2:	2200      	movs	r2, #0
 80003a4:	601a      	str	r2, [r3, #0]
 80003a6:	605a      	str	r2, [r3, #4]
 80003a8:	609a      	str	r2, [r3, #8]
 80003aa:	60da      	str	r2, [r3, #12]
 80003ac:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80003ae:	2302      	movs	r3, #2
 80003b0:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80003b2:	2301      	movs	r3, #1
 80003b4:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80003b6:	2310      	movs	r3, #16
 80003b8:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80003ba:	2300      	movs	r3, #0
 80003bc:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80003be:	f107 0318 	add.w	r3, r7, #24
 80003c2:	4618      	mov	r0, r3
 80003c4:	f000 fec8 	bl	8001158 <HAL_RCC_OscConfig>
 80003c8:	4603      	mov	r3, r0
 80003ca:	2b00      	cmp	r3, #0
 80003cc:	d001      	beq.n	80003d2 <SystemClock_Config+0x46>
  {
    Error_Handler();
 80003ce:	f000 f9aa 	bl	8000726 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80003d2:	230f      	movs	r3, #15
 80003d4:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80003d6:	2300      	movs	r3, #0
 80003d8:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80003da:	2300      	movs	r3, #0
 80003dc:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80003de:	2300      	movs	r3, #0
 80003e0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80003e2:	2300      	movs	r3, #0
 80003e4:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80003e6:	1d3b      	adds	r3, r7, #4
 80003e8:	2100      	movs	r1, #0
 80003ea:	4618      	mov	r0, r3
 80003ec:	f001 f936 	bl	800165c <HAL_RCC_ClockConfig>
 80003f0:	4603      	mov	r3, r0
 80003f2:	2b00      	cmp	r3, #0
 80003f4:	d001      	beq.n	80003fa <SystemClock_Config+0x6e>
  {
    Error_Handler();
 80003f6:	f000 f996 	bl	8000726 <Error_Handler>
  }
}
 80003fa:	bf00      	nop
 80003fc:	3740      	adds	r7, #64	; 0x40
 80003fe:	46bd      	mov	sp, r7
 8000400:	bd80      	pop	{r7, pc}
	...

08000404 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000404:	b580      	push	{r7, lr}
 8000406:	b086      	sub	sp, #24
 8000408:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800040a:	f107 0308 	add.w	r3, r7, #8
 800040e:	2200      	movs	r2, #0
 8000410:	601a      	str	r2, [r3, #0]
 8000412:	605a      	str	r2, [r3, #4]
 8000414:	609a      	str	r2, [r3, #8]
 8000416:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000418:	463b      	mov	r3, r7
 800041a:	2200      	movs	r2, #0
 800041c:	601a      	str	r2, [r3, #0]
 800041e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000420:	4b1c      	ldr	r3, [pc, #112]	; (8000494 <MX_TIM3_Init+0x90>)
 8000422:	4a1d      	ldr	r2, [pc, #116]	; (8000498 <MX_TIM3_Init+0x94>)
 8000424:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 72-1;
 8000426:	4b1b      	ldr	r3, [pc, #108]	; (8000494 <MX_TIM3_Init+0x90>)
 8000428:	2247      	movs	r2, #71	; 0x47
 800042a:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800042c:	4b19      	ldr	r3, [pc, #100]	; (8000494 <MX_TIM3_Init+0x90>)
 800042e:	2200      	movs	r2, #0
 8000430:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 49;
 8000432:	4b18      	ldr	r3, [pc, #96]	; (8000494 <MX_TIM3_Init+0x90>)
 8000434:	2231      	movs	r2, #49	; 0x31
 8000436:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000438:	4b16      	ldr	r3, [pc, #88]	; (8000494 <MX_TIM3_Init+0x90>)
 800043a:	2200      	movs	r2, #0
 800043c:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800043e:	4b15      	ldr	r3, [pc, #84]	; (8000494 <MX_TIM3_Init+0x90>)
 8000440:	2200      	movs	r2, #0
 8000442:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000444:	4813      	ldr	r0, [pc, #76]	; (8000494 <MX_TIM3_Init+0x90>)
 8000446:	f001 fa97 	bl	8001978 <HAL_TIM_Base_Init>
 800044a:	4603      	mov	r3, r0
 800044c:	2b00      	cmp	r3, #0
 800044e:	d001      	beq.n	8000454 <MX_TIM3_Init+0x50>
  {
    Error_Handler();
 8000450:	f000 f969 	bl	8000726 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000454:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000458:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800045a:	f107 0308 	add.w	r3, r7, #8
 800045e:	4619      	mov	r1, r3
 8000460:	480c      	ldr	r0, [pc, #48]	; (8000494 <MX_TIM3_Init+0x90>)
 8000462:	f001 fb59 	bl	8001b18 <HAL_TIM_ConfigClockSource>
 8000466:	4603      	mov	r3, r0
 8000468:	2b00      	cmp	r3, #0
 800046a:	d001      	beq.n	8000470 <MX_TIM3_Init+0x6c>
  {
    Error_Handler();
 800046c:	f000 f95b 	bl	8000726 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000470:	2300      	movs	r3, #0
 8000472:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000474:	2300      	movs	r3, #0
 8000476:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000478:	463b      	mov	r3, r7
 800047a:	4619      	mov	r1, r3
 800047c:	4805      	ldr	r0, [pc, #20]	; (8000494 <MX_TIM3_Init+0x90>)
 800047e:	f001 fd0b 	bl	8001e98 <HAL_TIMEx_MasterConfigSynchronization>
 8000482:	4603      	mov	r3, r0
 8000484:	2b00      	cmp	r3, #0
 8000486:	d001      	beq.n	800048c <MX_TIM3_Init+0x88>
  {
    Error_Handler();
 8000488:	f000 f94d 	bl	8000726 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 800048c:	bf00      	nop
 800048e:	3718      	adds	r7, #24
 8000490:	46bd      	mov	sp, r7
 8000492:	bd80      	pop	{r7, pc}
 8000494:	20000108 	.word	0x20000108
 8000498:	40000400 	.word	0x40000400

0800049c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 800049c:	b580      	push	{r7, lr}
 800049e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80004a0:	4b11      	ldr	r3, [pc, #68]	; (80004e8 <MX_USART1_UART_Init+0x4c>)
 80004a2:	4a12      	ldr	r2, [pc, #72]	; (80004ec <MX_USART1_UART_Init+0x50>)
 80004a4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80004a6:	4b10      	ldr	r3, [pc, #64]	; (80004e8 <MX_USART1_UART_Init+0x4c>)
 80004a8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80004ac:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80004ae:	4b0e      	ldr	r3, [pc, #56]	; (80004e8 <MX_USART1_UART_Init+0x4c>)
 80004b0:	2200      	movs	r2, #0
 80004b2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80004b4:	4b0c      	ldr	r3, [pc, #48]	; (80004e8 <MX_USART1_UART_Init+0x4c>)
 80004b6:	2200      	movs	r2, #0
 80004b8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80004ba:	4b0b      	ldr	r3, [pc, #44]	; (80004e8 <MX_USART1_UART_Init+0x4c>)
 80004bc:	2200      	movs	r2, #0
 80004be:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80004c0:	4b09      	ldr	r3, [pc, #36]	; (80004e8 <MX_USART1_UART_Init+0x4c>)
 80004c2:	220c      	movs	r2, #12
 80004c4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80004c6:	4b08      	ldr	r3, [pc, #32]	; (80004e8 <MX_USART1_UART_Init+0x4c>)
 80004c8:	2200      	movs	r2, #0
 80004ca:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80004cc:	4b06      	ldr	r3, [pc, #24]	; (80004e8 <MX_USART1_UART_Init+0x4c>)
 80004ce:	2200      	movs	r2, #0
 80004d0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80004d2:	4805      	ldr	r0, [pc, #20]	; (80004e8 <MX_USART1_UART_Init+0x4c>)
 80004d4:	f001 fd3e 	bl	8001f54 <HAL_UART_Init>
 80004d8:	4603      	mov	r3, r0
 80004da:	2b00      	cmp	r3, #0
 80004dc:	d001      	beq.n	80004e2 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80004de:	f000 f922 	bl	8000726 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80004e2:	bf00      	nop
 80004e4:	bd80      	pop	{r7, pc}
 80004e6:	bf00      	nop
 80004e8:	20000150 	.word	0x20000150
 80004ec:	40013800 	.word	0x40013800

080004f0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80004f0:	b580      	push	{r7, lr}
 80004f2:	b086      	sub	sp, #24
 80004f4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80004f6:	f107 0308 	add.w	r3, r7, #8
 80004fa:	2200      	movs	r2, #0
 80004fc:	601a      	str	r2, [r3, #0]
 80004fe:	605a      	str	r2, [r3, #4]
 8000500:	609a      	str	r2, [r3, #8]
 8000502:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000504:	4b18      	ldr	r3, [pc, #96]	; (8000568 <MX_GPIO_Init+0x78>)
 8000506:	699b      	ldr	r3, [r3, #24]
 8000508:	4a17      	ldr	r2, [pc, #92]	; (8000568 <MX_GPIO_Init+0x78>)
 800050a:	f043 0304 	orr.w	r3, r3, #4
 800050e:	6193      	str	r3, [r2, #24]
 8000510:	4b15      	ldr	r3, [pc, #84]	; (8000568 <MX_GPIO_Init+0x78>)
 8000512:	699b      	ldr	r3, [r3, #24]
 8000514:	f003 0304 	and.w	r3, r3, #4
 8000518:	607b      	str	r3, [r7, #4]
 800051a:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, PD_SCK1_Pin|PD_SCK2_Pin|TX_ENABLE_Pin, GPIO_PIN_RESET);
 800051c:	2200      	movs	r2, #0
 800051e:	f44f 71a8 	mov.w	r1, #336	; 0x150
 8000522:	4812      	ldr	r0, [pc, #72]	; (800056c <MX_GPIO_Init+0x7c>)
 8000524:	f000 fdff 	bl	8001126 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : DOUT1_Pin DOUT2_Pin */
  GPIO_InitStruct.Pin = DOUT1_Pin|DOUT2_Pin;
 8000528:	2328      	movs	r3, #40	; 0x28
 800052a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800052c:	2300      	movs	r3, #0
 800052e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000530:	2300      	movs	r3, #0
 8000532:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000534:	f107 0308 	add.w	r3, r7, #8
 8000538:	4619      	mov	r1, r3
 800053a:	480c      	ldr	r0, [pc, #48]	; (800056c <MX_GPIO_Init+0x7c>)
 800053c:	f000 fc58 	bl	8000df0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD_SCK1_Pin PD_SCK2_Pin TX_ENABLE_Pin */
  GPIO_InitStruct.Pin = PD_SCK1_Pin|PD_SCK2_Pin|TX_ENABLE_Pin;
 8000540:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8000544:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000546:	2301      	movs	r3, #1
 8000548:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800054a:	2300      	movs	r3, #0
 800054c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800054e:	2302      	movs	r3, #2
 8000550:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000552:	f107 0308 	add.w	r3, r7, #8
 8000556:	4619      	mov	r1, r3
 8000558:	4804      	ldr	r0, [pc, #16]	; (800056c <MX_GPIO_Init+0x7c>)
 800055a:	f000 fc49 	bl	8000df0 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800055e:	bf00      	nop
 8000560:	3718      	adds	r7, #24
 8000562:	46bd      	mov	sp, r7
 8000564:	bd80      	pop	{r7, pc}
 8000566:	bf00      	nop
 8000568:	40021000 	.word	0x40021000
 800056c:	40010800 	.word	0x40010800

08000570 <eMBRegInputCB>:

/* USER CODE BEGIN 4 */
eMBErrorCode
eMBRegInputCB( UCHAR * pucRegBuffer, USHORT usAddress, USHORT usNRegs )
{
 8000570:	b480      	push	{r7}
 8000572:	b085      	sub	sp, #20
 8000574:	af00      	add	r7, sp, #0
 8000576:	6078      	str	r0, [r7, #4]
 8000578:	460b      	mov	r3, r1
 800057a:	807b      	strh	r3, [r7, #2]
 800057c:	4613      	mov	r3, r2
 800057e:	803b      	strh	r3, [r7, #0]
    eMBErrorCode    eStatus = MB_ENOERR;
 8000580:	2300      	movs	r3, #0
 8000582:	73fb      	strb	r3, [r7, #15]
    int             iRegIndex;

    if( ( usAddress >= REG_INPUT_START )
 8000584:	887b      	ldrh	r3, [r7, #2]
 8000586:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800058a:	d32a      	bcc.n	80005e2 <eMBRegInputCB+0x72>
        && ( usAddress + usNRegs <= REG_INPUT_START + REG_INPUT_NREGS ) )
 800058c:	887a      	ldrh	r2, [r7, #2]
 800058e:	883b      	ldrh	r3, [r7, #0]
 8000590:	4413      	add	r3, r2
 8000592:	f240 32ea 	movw	r2, #1002	; 0x3ea
 8000596:	4293      	cmp	r3, r2
 8000598:	dc23      	bgt.n	80005e2 <eMBRegInputCB+0x72>
    {
        iRegIndex = ( int )( usAddress - usRegInputStart );
 800059a:	887b      	ldrh	r3, [r7, #2]
 800059c:	4a15      	ldr	r2, [pc, #84]	; (80005f4 <eMBRegInputCB+0x84>)
 800059e:	8812      	ldrh	r2, [r2, #0]
 80005a0:	1a9b      	subs	r3, r3, r2
 80005a2:	60bb      	str	r3, [r7, #8]
        while( usNRegs > 0 )
 80005a4:	e019      	b.n	80005da <eMBRegInputCB+0x6a>
        {
            *pucRegBuffer++ = ( unsigned char )( usRegInputBuf[iRegIndex] >> 8 );
 80005a6:	4a14      	ldr	r2, [pc, #80]	; (80005f8 <eMBRegInputCB+0x88>)
 80005a8:	68bb      	ldr	r3, [r7, #8]
 80005aa:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80005ae:	0a1b      	lsrs	r3, r3, #8
 80005b0:	b299      	uxth	r1, r3
 80005b2:	687b      	ldr	r3, [r7, #4]
 80005b4:	1c5a      	adds	r2, r3, #1
 80005b6:	607a      	str	r2, [r7, #4]
 80005b8:	b2ca      	uxtb	r2, r1
 80005ba:	701a      	strb	r2, [r3, #0]
            *pucRegBuffer++ = ( unsigned char )( usRegInputBuf[iRegIndex] & 0xFF );
 80005bc:	4a0e      	ldr	r2, [pc, #56]	; (80005f8 <eMBRegInputCB+0x88>)
 80005be:	68bb      	ldr	r3, [r7, #8]
 80005c0:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 80005c4:	687b      	ldr	r3, [r7, #4]
 80005c6:	1c5a      	adds	r2, r3, #1
 80005c8:	607a      	str	r2, [r7, #4]
 80005ca:	b2ca      	uxtb	r2, r1
 80005cc:	701a      	strb	r2, [r3, #0]
            iRegIndex++;
 80005ce:	68bb      	ldr	r3, [r7, #8]
 80005d0:	3301      	adds	r3, #1
 80005d2:	60bb      	str	r3, [r7, #8]
            usNRegs--;
 80005d4:	883b      	ldrh	r3, [r7, #0]
 80005d6:	3b01      	subs	r3, #1
 80005d8:	803b      	strh	r3, [r7, #0]
        while( usNRegs > 0 )
 80005da:	883b      	ldrh	r3, [r7, #0]
 80005dc:	2b00      	cmp	r3, #0
 80005de:	d1e2      	bne.n	80005a6 <eMBRegInputCB+0x36>
    if( ( usAddress >= REG_INPUT_START )
 80005e0:	e001      	b.n	80005e6 <eMBRegInputCB+0x76>
        }
    }
    else
    {
        eStatus = MB_ENOREG;
 80005e2:	2301      	movs	r3, #1
 80005e4:	73fb      	strb	r3, [r7, #15]
    }

    return eStatus;
 80005e6:	7bfb      	ldrb	r3, [r7, #15]
}
 80005e8:	4618      	mov	r0, r3
 80005ea:	3714      	adds	r7, #20
 80005ec:	46bd      	mov	sp, r7
 80005ee:	bc80      	pop	{r7}
 80005f0:	4770      	bx	lr
 80005f2:	bf00      	nop
 80005f4:	20000000 	.word	0x20000000
 80005f8:	20000198 	.word	0x20000198

080005fc <eMBRegHoldingCB>:

eMBErrorCode
eMBRegHoldingCB( UCHAR * pucRegBuffer, USHORT usAddress, USHORT usNRegs, eMBRegisterMode eMode )
{
 80005fc:	b480      	push	{r7}
 80005fe:	b087      	sub	sp, #28
 8000600:	af00      	add	r7, sp, #0
 8000602:	60f8      	str	r0, [r7, #12]
 8000604:	4608      	mov	r0, r1
 8000606:	4611      	mov	r1, r2
 8000608:	461a      	mov	r2, r3
 800060a:	4603      	mov	r3, r0
 800060c:	817b      	strh	r3, [r7, #10]
 800060e:	460b      	mov	r3, r1
 8000610:	813b      	strh	r3, [r7, #8]
 8000612:	4613      	mov	r3, r2
 8000614:	71fb      	strb	r3, [r7, #7]
    eMBErrorCode    eStatus = MB_ENOERR;
 8000616:	2300      	movs	r3, #0
 8000618:	75fb      	strb	r3, [r7, #23]
    int             iRegIndex;

    if( ( usAddress >= REG_HOLDING_START ) &&
 800061a:	897b      	ldrh	r3, [r7, #10]
 800061c:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8000620:	d354      	bcc.n	80006cc <eMBRegHoldingCB+0xd0>
        ( usAddress + usNRegs <= REG_HOLDING_START + REG_HOLDING_NREGS ) )
 8000622:	897a      	ldrh	r2, [r7, #10]
 8000624:	893b      	ldrh	r3, [r7, #8]
 8000626:	4413      	add	r3, r2
    if( ( usAddress >= REG_HOLDING_START ) &&
 8000628:	f240 72d2 	movw	r2, #2002	; 0x7d2
 800062c:	4293      	cmp	r3, r2
 800062e:	dc4d      	bgt.n	80006cc <eMBRegHoldingCB+0xd0>
    {
        iRegIndex = ( int )( usAddress - usRegHoldingStart );
 8000630:	897b      	ldrh	r3, [r7, #10]
 8000632:	4a2a      	ldr	r2, [pc, #168]	; (80006dc <eMBRegHoldingCB+0xe0>)
 8000634:	8812      	ldrh	r2, [r2, #0]
 8000636:	1a9b      	subs	r3, r3, r2
 8000638:	613b      	str	r3, [r7, #16]
        switch ( eMode )
 800063a:	79fb      	ldrb	r3, [r7, #7]
 800063c:	2b00      	cmp	r3, #0
 800063e:	d01c      	beq.n	800067a <eMBRegHoldingCB+0x7e>
 8000640:	2b01      	cmp	r3, #1
 8000642:	d03e      	beq.n	80006c2 <eMBRegHoldingCB+0xc6>
 8000644:	e044      	b.n	80006d0 <eMBRegHoldingCB+0xd4>
        {
            /* Pass current register values to the protocol stack. */
        case MB_REG_READ:
            while( usNRegs > 0 )
            {
                *pucRegBuffer++ = ( UCHAR ) ( usRegHoldingBuf[iRegIndex] >> 8 );
 8000646:	4a26      	ldr	r2, [pc, #152]	; (80006e0 <eMBRegHoldingCB+0xe4>)
 8000648:	693b      	ldr	r3, [r7, #16]
 800064a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800064e:	0a1b      	lsrs	r3, r3, #8
 8000650:	b299      	uxth	r1, r3
 8000652:	68fb      	ldr	r3, [r7, #12]
 8000654:	1c5a      	adds	r2, r3, #1
 8000656:	60fa      	str	r2, [r7, #12]
 8000658:	b2ca      	uxtb	r2, r1
 800065a:	701a      	strb	r2, [r3, #0]
                *pucRegBuffer++ = ( UCHAR ) ( usRegHoldingBuf[iRegIndex] & 0xFF );
 800065c:	4a20      	ldr	r2, [pc, #128]	; (80006e0 <eMBRegHoldingCB+0xe4>)
 800065e:	693b      	ldr	r3, [r7, #16]
 8000660:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 8000664:	68fb      	ldr	r3, [r7, #12]
 8000666:	1c5a      	adds	r2, r3, #1
 8000668:	60fa      	str	r2, [r7, #12]
 800066a:	b2ca      	uxtb	r2, r1
 800066c:	701a      	strb	r2, [r3, #0]
                iRegIndex++;
 800066e:	693b      	ldr	r3, [r7, #16]
 8000670:	3301      	adds	r3, #1
 8000672:	613b      	str	r3, [r7, #16]
                usNRegs--;
 8000674:	893b      	ldrh	r3, [r7, #8]
 8000676:	3b01      	subs	r3, #1
 8000678:	813b      	strh	r3, [r7, #8]
            while( usNRegs > 0 )
 800067a:	893b      	ldrh	r3, [r7, #8]
 800067c:	2b00      	cmp	r3, #0
 800067e:	d1e2      	bne.n	8000646 <eMBRegHoldingCB+0x4a>
            }
            break;
 8000680:	e023      	b.n	80006ca <eMBRegHoldingCB+0xce>
            /* Update current register values with new values from the
             * protocol stack. */
        case MB_REG_WRITE:
            while( usNRegs > 0 )
            {
                usRegHoldingBuf[iRegIndex] = *pucRegBuffer++ << 8;
 8000682:	68fb      	ldr	r3, [r7, #12]
 8000684:	1c5a      	adds	r2, r3, #1
 8000686:	60fa      	str	r2, [r7, #12]
 8000688:	781b      	ldrb	r3, [r3, #0]
 800068a:	b29b      	uxth	r3, r3
 800068c:	021b      	lsls	r3, r3, #8
 800068e:	b299      	uxth	r1, r3
 8000690:	4a13      	ldr	r2, [pc, #76]	; (80006e0 <eMBRegHoldingCB+0xe4>)
 8000692:	693b      	ldr	r3, [r7, #16]
 8000694:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
                usRegHoldingBuf[iRegIndex] |= *pucRegBuffer++;
 8000698:	68fb      	ldr	r3, [r7, #12]
 800069a:	1c5a      	adds	r2, r3, #1
 800069c:	60fa      	str	r2, [r7, #12]
 800069e:	7819      	ldrb	r1, [r3, #0]
 80006a0:	4a0f      	ldr	r2, [pc, #60]	; (80006e0 <eMBRegHoldingCB+0xe4>)
 80006a2:	693b      	ldr	r3, [r7, #16]
 80006a4:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 80006a8:	b28b      	uxth	r3, r1
 80006aa:	4313      	orrs	r3, r2
 80006ac:	b299      	uxth	r1, r3
 80006ae:	4a0c      	ldr	r2, [pc, #48]	; (80006e0 <eMBRegHoldingCB+0xe4>)
 80006b0:	693b      	ldr	r3, [r7, #16]
 80006b2:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
                iRegIndex++;
 80006b6:	693b      	ldr	r3, [r7, #16]
 80006b8:	3301      	adds	r3, #1
 80006ba:	613b      	str	r3, [r7, #16]
                usNRegs--;
 80006bc:	893b      	ldrh	r3, [r7, #8]
 80006be:	3b01      	subs	r3, #1
 80006c0:	813b      	strh	r3, [r7, #8]
            while( usNRegs > 0 )
 80006c2:	893b      	ldrh	r3, [r7, #8]
 80006c4:	2b00      	cmp	r3, #0
 80006c6:	d1dc      	bne.n	8000682 <eMBRegHoldingCB+0x86>
        switch ( eMode )
 80006c8:	e002      	b.n	80006d0 <eMBRegHoldingCB+0xd4>
 80006ca:	e001      	b.n	80006d0 <eMBRegHoldingCB+0xd4>
            }
        }
    }
    else
    {
        eStatus = MB_ENOREG;
 80006cc:	2301      	movs	r3, #1
 80006ce:	75fb      	strb	r3, [r7, #23]
    }
    return eStatus;
 80006d0:	7dfb      	ldrb	r3, [r7, #23]
}
 80006d2:	4618      	mov	r0, r3
 80006d4:	371c      	adds	r7, #28
 80006d6:	46bd      	mov	sp, r7
 80006d8:	bc80      	pop	{r7}
 80006da:	4770      	bx	lr
 80006dc:	20000002 	.word	0x20000002
 80006e0:	2000019c 	.word	0x2000019c

080006e4 <eMBRegCoilsCB>:


eMBErrorCode
eMBRegCoilsCB( UCHAR * pucRegBuffer, USHORT usAddress, USHORT usNCoils, eMBRegisterMode eMode )
{
 80006e4:	b480      	push	{r7}
 80006e6:	b085      	sub	sp, #20
 80006e8:	af00      	add	r7, sp, #0
 80006ea:	60f8      	str	r0, [r7, #12]
 80006ec:	4608      	mov	r0, r1
 80006ee:	4611      	mov	r1, r2
 80006f0:	461a      	mov	r2, r3
 80006f2:	4603      	mov	r3, r0
 80006f4:	817b      	strh	r3, [r7, #10]
 80006f6:	460b      	mov	r3, r1
 80006f8:	813b      	strh	r3, [r7, #8]
 80006fa:	4613      	mov	r3, r2
 80006fc:	71fb      	strb	r3, [r7, #7]
    return MB_ENOREG;
 80006fe:	2301      	movs	r3, #1
}
 8000700:	4618      	mov	r0, r3
 8000702:	3714      	adds	r7, #20
 8000704:	46bd      	mov	sp, r7
 8000706:	bc80      	pop	{r7}
 8000708:	4770      	bx	lr

0800070a <eMBRegDiscreteCB>:

eMBErrorCode
eMBRegDiscreteCB( UCHAR * pucRegBuffer, USHORT usAddress, USHORT usNDiscrete )
{
 800070a:	b480      	push	{r7}
 800070c:	b083      	sub	sp, #12
 800070e:	af00      	add	r7, sp, #0
 8000710:	6078      	str	r0, [r7, #4]
 8000712:	460b      	mov	r3, r1
 8000714:	807b      	strh	r3, [r7, #2]
 8000716:	4613      	mov	r3, r2
 8000718:	803b      	strh	r3, [r7, #0]
    return MB_ENOREG;
 800071a:	2301      	movs	r3, #1
}
 800071c:	4618      	mov	r0, r3
 800071e:	370c      	adds	r7, #12
 8000720:	46bd      	mov	sp, r7
 8000722:	bc80      	pop	{r7}
 8000724:	4770      	bx	lr

08000726 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000726:	b480      	push	{r7}
 8000728:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800072a:	b672      	cpsid	i
}
 800072c:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800072e:	e7fe      	b.n	800072e <Error_Handler+0x8>

08000730 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000730:	b480      	push	{r7}
 8000732:	b085      	sub	sp, #20
 8000734:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000736:	4b15      	ldr	r3, [pc, #84]	; (800078c <HAL_MspInit+0x5c>)
 8000738:	699b      	ldr	r3, [r3, #24]
 800073a:	4a14      	ldr	r2, [pc, #80]	; (800078c <HAL_MspInit+0x5c>)
 800073c:	f043 0301 	orr.w	r3, r3, #1
 8000740:	6193      	str	r3, [r2, #24]
 8000742:	4b12      	ldr	r3, [pc, #72]	; (800078c <HAL_MspInit+0x5c>)
 8000744:	699b      	ldr	r3, [r3, #24]
 8000746:	f003 0301 	and.w	r3, r3, #1
 800074a:	60bb      	str	r3, [r7, #8]
 800074c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800074e:	4b0f      	ldr	r3, [pc, #60]	; (800078c <HAL_MspInit+0x5c>)
 8000750:	69db      	ldr	r3, [r3, #28]
 8000752:	4a0e      	ldr	r2, [pc, #56]	; (800078c <HAL_MspInit+0x5c>)
 8000754:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000758:	61d3      	str	r3, [r2, #28]
 800075a:	4b0c      	ldr	r3, [pc, #48]	; (800078c <HAL_MspInit+0x5c>)
 800075c:	69db      	ldr	r3, [r3, #28]
 800075e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000762:	607b      	str	r3, [r7, #4]
 8000764:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000766:	4b0a      	ldr	r3, [pc, #40]	; (8000790 <HAL_MspInit+0x60>)
 8000768:	685b      	ldr	r3, [r3, #4]
 800076a:	60fb      	str	r3, [r7, #12]
 800076c:	68fb      	ldr	r3, [r7, #12]
 800076e:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000772:	60fb      	str	r3, [r7, #12]
 8000774:	68fb      	ldr	r3, [r7, #12]
 8000776:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800077a:	60fb      	str	r3, [r7, #12]
 800077c:	4a04      	ldr	r2, [pc, #16]	; (8000790 <HAL_MspInit+0x60>)
 800077e:	68fb      	ldr	r3, [r7, #12]
 8000780:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000782:	bf00      	nop
 8000784:	3714      	adds	r7, #20
 8000786:	46bd      	mov	sp, r7
 8000788:	bc80      	pop	{r7}
 800078a:	4770      	bx	lr
 800078c:	40021000 	.word	0x40021000
 8000790:	40010000 	.word	0x40010000

08000794 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000794:	b480      	push	{r7}
 8000796:	b085      	sub	sp, #20
 8000798:	af00      	add	r7, sp, #0
 800079a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 800079c:	687b      	ldr	r3, [r7, #4]
 800079e:	681b      	ldr	r3, [r3, #0]
 80007a0:	4a09      	ldr	r2, [pc, #36]	; (80007c8 <HAL_TIM_Base_MspInit+0x34>)
 80007a2:	4293      	cmp	r3, r2
 80007a4:	d10b      	bne.n	80007be <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 80007a6:	4b09      	ldr	r3, [pc, #36]	; (80007cc <HAL_TIM_Base_MspInit+0x38>)
 80007a8:	69db      	ldr	r3, [r3, #28]
 80007aa:	4a08      	ldr	r2, [pc, #32]	; (80007cc <HAL_TIM_Base_MspInit+0x38>)
 80007ac:	f043 0302 	orr.w	r3, r3, #2
 80007b0:	61d3      	str	r3, [r2, #28]
 80007b2:	4b06      	ldr	r3, [pc, #24]	; (80007cc <HAL_TIM_Base_MspInit+0x38>)
 80007b4:	69db      	ldr	r3, [r3, #28]
 80007b6:	f003 0302 	and.w	r3, r3, #2
 80007ba:	60fb      	str	r3, [r7, #12]
 80007bc:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 80007be:	bf00      	nop
 80007c0:	3714      	adds	r7, #20
 80007c2:	46bd      	mov	sp, r7
 80007c4:	bc80      	pop	{r7}
 80007c6:	4770      	bx	lr
 80007c8:	40000400 	.word	0x40000400
 80007cc:	40021000 	.word	0x40021000

080007d0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80007d0:	b580      	push	{r7, lr}
 80007d2:	b088      	sub	sp, #32
 80007d4:	af00      	add	r7, sp, #0
 80007d6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007d8:	f107 0310 	add.w	r3, r7, #16
 80007dc:	2200      	movs	r2, #0
 80007de:	601a      	str	r2, [r3, #0]
 80007e0:	605a      	str	r2, [r3, #4]
 80007e2:	609a      	str	r2, [r3, #8]
 80007e4:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 80007e6:	687b      	ldr	r3, [r7, #4]
 80007e8:	681b      	ldr	r3, [r3, #0]
 80007ea:	4a1c      	ldr	r2, [pc, #112]	; (800085c <HAL_UART_MspInit+0x8c>)
 80007ec:	4293      	cmp	r3, r2
 80007ee:	d131      	bne.n	8000854 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80007f0:	4b1b      	ldr	r3, [pc, #108]	; (8000860 <HAL_UART_MspInit+0x90>)
 80007f2:	699b      	ldr	r3, [r3, #24]
 80007f4:	4a1a      	ldr	r2, [pc, #104]	; (8000860 <HAL_UART_MspInit+0x90>)
 80007f6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80007fa:	6193      	str	r3, [r2, #24]
 80007fc:	4b18      	ldr	r3, [pc, #96]	; (8000860 <HAL_UART_MspInit+0x90>)
 80007fe:	699b      	ldr	r3, [r3, #24]
 8000800:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000804:	60fb      	str	r3, [r7, #12]
 8000806:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000808:	4b15      	ldr	r3, [pc, #84]	; (8000860 <HAL_UART_MspInit+0x90>)
 800080a:	699b      	ldr	r3, [r3, #24]
 800080c:	4a14      	ldr	r2, [pc, #80]	; (8000860 <HAL_UART_MspInit+0x90>)
 800080e:	f043 0304 	orr.w	r3, r3, #4
 8000812:	6193      	str	r3, [r2, #24]
 8000814:	4b12      	ldr	r3, [pc, #72]	; (8000860 <HAL_UART_MspInit+0x90>)
 8000816:	699b      	ldr	r3, [r3, #24]
 8000818:	f003 0304 	and.w	r3, r3, #4
 800081c:	60bb      	str	r3, [r7, #8]
 800081e:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000820:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000824:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000826:	2302      	movs	r3, #2
 8000828:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800082a:	2303      	movs	r3, #3
 800082c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800082e:	f107 0310 	add.w	r3, r7, #16
 8000832:	4619      	mov	r1, r3
 8000834:	480b      	ldr	r0, [pc, #44]	; (8000864 <HAL_UART_MspInit+0x94>)
 8000836:	f000 fadb 	bl	8000df0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800083a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800083e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000840:	2300      	movs	r3, #0
 8000842:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000844:	2300      	movs	r3, #0
 8000846:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000848:	f107 0310 	add.w	r3, r7, #16
 800084c:	4619      	mov	r1, r3
 800084e:	4805      	ldr	r0, [pc, #20]	; (8000864 <HAL_UART_MspInit+0x94>)
 8000850:	f000 face 	bl	8000df0 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8000854:	bf00      	nop
 8000856:	3720      	adds	r7, #32
 8000858:	46bd      	mov	sp, r7
 800085a:	bd80      	pop	{r7, pc}
 800085c:	40013800 	.word	0x40013800
 8000860:	40021000 	.word	0x40021000
 8000864:	40010800 	.word	0x40010800

08000868 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000868:	b480      	push	{r7}
 800086a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800086c:	e7fe      	b.n	800086c <NMI_Handler+0x4>

0800086e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800086e:	b480      	push	{r7}
 8000870:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000872:	e7fe      	b.n	8000872 <HardFault_Handler+0x4>

08000874 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000874:	b480      	push	{r7}
 8000876:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000878:	e7fe      	b.n	8000878 <MemManage_Handler+0x4>

0800087a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800087a:	b480      	push	{r7}
 800087c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800087e:	e7fe      	b.n	800087e <BusFault_Handler+0x4>

08000880 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000880:	b480      	push	{r7}
 8000882:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000884:	e7fe      	b.n	8000884 <UsageFault_Handler+0x4>

08000886 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000886:	b480      	push	{r7}
 8000888:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800088a:	bf00      	nop
 800088c:	46bd      	mov	sp, r7
 800088e:	bc80      	pop	{r7}
 8000890:	4770      	bx	lr

08000892 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000892:	b480      	push	{r7}
 8000894:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000896:	bf00      	nop
 8000898:	46bd      	mov	sp, r7
 800089a:	bc80      	pop	{r7}
 800089c:	4770      	bx	lr

0800089e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800089e:	b480      	push	{r7}
 80008a0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80008a2:	bf00      	nop
 80008a4:	46bd      	mov	sp, r7
 80008a6:	bc80      	pop	{r7}
 80008a8:	4770      	bx	lr

080008aa <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80008aa:	b580      	push	{r7, lr}
 80008ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80008ae:	f000 f935 	bl	8000b1c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80008b2:	bf00      	nop
 80008b4:	bd80      	pop	{r7, pc}

080008b6 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80008b6:	b480      	push	{r7}
 80008b8:	af00      	add	r7, sp, #0
  return 1;
 80008ba:	2301      	movs	r3, #1
}
 80008bc:	4618      	mov	r0, r3
 80008be:	46bd      	mov	sp, r7
 80008c0:	bc80      	pop	{r7}
 80008c2:	4770      	bx	lr

080008c4 <_kill>:

int _kill(int pid, int sig)
{
 80008c4:	b580      	push	{r7, lr}
 80008c6:	b082      	sub	sp, #8
 80008c8:	af00      	add	r7, sp, #0
 80008ca:	6078      	str	r0, [r7, #4]
 80008cc:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80008ce:	f003 f821 	bl	8003914 <__errno>
 80008d2:	4603      	mov	r3, r0
 80008d4:	2216      	movs	r2, #22
 80008d6:	601a      	str	r2, [r3, #0]
  return -1;
 80008d8:	f04f 33ff 	mov.w	r3, #4294967295
}
 80008dc:	4618      	mov	r0, r3
 80008de:	3708      	adds	r7, #8
 80008e0:	46bd      	mov	sp, r7
 80008e2:	bd80      	pop	{r7, pc}

080008e4 <_exit>:

void _exit (int status)
{
 80008e4:	b580      	push	{r7, lr}
 80008e6:	b082      	sub	sp, #8
 80008e8:	af00      	add	r7, sp, #0
 80008ea:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80008ec:	f04f 31ff 	mov.w	r1, #4294967295
 80008f0:	6878      	ldr	r0, [r7, #4]
 80008f2:	f7ff ffe7 	bl	80008c4 <_kill>
  while (1) {}    /* Make sure we hang here */
 80008f6:	e7fe      	b.n	80008f6 <_exit+0x12>

080008f8 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80008f8:	b580      	push	{r7, lr}
 80008fa:	b086      	sub	sp, #24
 80008fc:	af00      	add	r7, sp, #0
 80008fe:	60f8      	str	r0, [r7, #12]
 8000900:	60b9      	str	r1, [r7, #8]
 8000902:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000904:	2300      	movs	r3, #0
 8000906:	617b      	str	r3, [r7, #20]
 8000908:	e00a      	b.n	8000920 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800090a:	f3af 8000 	nop.w
 800090e:	4601      	mov	r1, r0
 8000910:	68bb      	ldr	r3, [r7, #8]
 8000912:	1c5a      	adds	r2, r3, #1
 8000914:	60ba      	str	r2, [r7, #8]
 8000916:	b2ca      	uxtb	r2, r1
 8000918:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800091a:	697b      	ldr	r3, [r7, #20]
 800091c:	3301      	adds	r3, #1
 800091e:	617b      	str	r3, [r7, #20]
 8000920:	697a      	ldr	r2, [r7, #20]
 8000922:	687b      	ldr	r3, [r7, #4]
 8000924:	429a      	cmp	r2, r3
 8000926:	dbf0      	blt.n	800090a <_read+0x12>
  }

  return len;
 8000928:	687b      	ldr	r3, [r7, #4]
}
 800092a:	4618      	mov	r0, r3
 800092c:	3718      	adds	r7, #24
 800092e:	46bd      	mov	sp, r7
 8000930:	bd80      	pop	{r7, pc}

08000932 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000932:	b580      	push	{r7, lr}
 8000934:	b086      	sub	sp, #24
 8000936:	af00      	add	r7, sp, #0
 8000938:	60f8      	str	r0, [r7, #12]
 800093a:	60b9      	str	r1, [r7, #8]
 800093c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800093e:	2300      	movs	r3, #0
 8000940:	617b      	str	r3, [r7, #20]
 8000942:	e009      	b.n	8000958 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000944:	68bb      	ldr	r3, [r7, #8]
 8000946:	1c5a      	adds	r2, r3, #1
 8000948:	60ba      	str	r2, [r7, #8]
 800094a:	781b      	ldrb	r3, [r3, #0]
 800094c:	4618      	mov	r0, r3
 800094e:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000952:	697b      	ldr	r3, [r7, #20]
 8000954:	3301      	adds	r3, #1
 8000956:	617b      	str	r3, [r7, #20]
 8000958:	697a      	ldr	r2, [r7, #20]
 800095a:	687b      	ldr	r3, [r7, #4]
 800095c:	429a      	cmp	r2, r3
 800095e:	dbf1      	blt.n	8000944 <_write+0x12>
  }
  return len;
 8000960:	687b      	ldr	r3, [r7, #4]
}
 8000962:	4618      	mov	r0, r3
 8000964:	3718      	adds	r7, #24
 8000966:	46bd      	mov	sp, r7
 8000968:	bd80      	pop	{r7, pc}

0800096a <_close>:

int _close(int file)
{
 800096a:	b480      	push	{r7}
 800096c:	b083      	sub	sp, #12
 800096e:	af00      	add	r7, sp, #0
 8000970:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000972:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000976:	4618      	mov	r0, r3
 8000978:	370c      	adds	r7, #12
 800097a:	46bd      	mov	sp, r7
 800097c:	bc80      	pop	{r7}
 800097e:	4770      	bx	lr

08000980 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000980:	b480      	push	{r7}
 8000982:	b083      	sub	sp, #12
 8000984:	af00      	add	r7, sp, #0
 8000986:	6078      	str	r0, [r7, #4]
 8000988:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800098a:	683b      	ldr	r3, [r7, #0]
 800098c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000990:	605a      	str	r2, [r3, #4]
  return 0;
 8000992:	2300      	movs	r3, #0
}
 8000994:	4618      	mov	r0, r3
 8000996:	370c      	adds	r7, #12
 8000998:	46bd      	mov	sp, r7
 800099a:	bc80      	pop	{r7}
 800099c:	4770      	bx	lr

0800099e <_isatty>:

int _isatty(int file)
{
 800099e:	b480      	push	{r7}
 80009a0:	b083      	sub	sp, #12
 80009a2:	af00      	add	r7, sp, #0
 80009a4:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80009a6:	2301      	movs	r3, #1
}
 80009a8:	4618      	mov	r0, r3
 80009aa:	370c      	adds	r7, #12
 80009ac:	46bd      	mov	sp, r7
 80009ae:	bc80      	pop	{r7}
 80009b0:	4770      	bx	lr

080009b2 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80009b2:	b480      	push	{r7}
 80009b4:	b085      	sub	sp, #20
 80009b6:	af00      	add	r7, sp, #0
 80009b8:	60f8      	str	r0, [r7, #12]
 80009ba:	60b9      	str	r1, [r7, #8]
 80009bc:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80009be:	2300      	movs	r3, #0
}
 80009c0:	4618      	mov	r0, r3
 80009c2:	3714      	adds	r7, #20
 80009c4:	46bd      	mov	sp, r7
 80009c6:	bc80      	pop	{r7}
 80009c8:	4770      	bx	lr
	...

080009cc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80009cc:	b580      	push	{r7, lr}
 80009ce:	b086      	sub	sp, #24
 80009d0:	af00      	add	r7, sp, #0
 80009d2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80009d4:	4a14      	ldr	r2, [pc, #80]	; (8000a28 <_sbrk+0x5c>)
 80009d6:	4b15      	ldr	r3, [pc, #84]	; (8000a2c <_sbrk+0x60>)
 80009d8:	1ad3      	subs	r3, r2, r3
 80009da:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80009dc:	697b      	ldr	r3, [r7, #20]
 80009de:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80009e0:	4b13      	ldr	r3, [pc, #76]	; (8000a30 <_sbrk+0x64>)
 80009e2:	681b      	ldr	r3, [r3, #0]
 80009e4:	2b00      	cmp	r3, #0
 80009e6:	d102      	bne.n	80009ee <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80009e8:	4b11      	ldr	r3, [pc, #68]	; (8000a30 <_sbrk+0x64>)
 80009ea:	4a12      	ldr	r2, [pc, #72]	; (8000a34 <_sbrk+0x68>)
 80009ec:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80009ee:	4b10      	ldr	r3, [pc, #64]	; (8000a30 <_sbrk+0x64>)
 80009f0:	681a      	ldr	r2, [r3, #0]
 80009f2:	687b      	ldr	r3, [r7, #4]
 80009f4:	4413      	add	r3, r2
 80009f6:	693a      	ldr	r2, [r7, #16]
 80009f8:	429a      	cmp	r2, r3
 80009fa:	d207      	bcs.n	8000a0c <_sbrk+0x40>
  {
    errno = ENOMEM;
 80009fc:	f002 ff8a 	bl	8003914 <__errno>
 8000a00:	4603      	mov	r3, r0
 8000a02:	220c      	movs	r2, #12
 8000a04:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000a06:	f04f 33ff 	mov.w	r3, #4294967295
 8000a0a:	e009      	b.n	8000a20 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000a0c:	4b08      	ldr	r3, [pc, #32]	; (8000a30 <_sbrk+0x64>)
 8000a0e:	681b      	ldr	r3, [r3, #0]
 8000a10:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000a12:	4b07      	ldr	r3, [pc, #28]	; (8000a30 <_sbrk+0x64>)
 8000a14:	681a      	ldr	r2, [r3, #0]
 8000a16:	687b      	ldr	r3, [r7, #4]
 8000a18:	4413      	add	r3, r2
 8000a1a:	4a05      	ldr	r2, [pc, #20]	; (8000a30 <_sbrk+0x64>)
 8000a1c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000a1e:	68fb      	ldr	r3, [r7, #12]
}
 8000a20:	4618      	mov	r0, r3
 8000a22:	3718      	adds	r7, #24
 8000a24:	46bd      	mov	sp, r7
 8000a26:	bd80      	pop	{r7, pc}
 8000a28:	20005000 	.word	0x20005000
 8000a2c:	00000400 	.word	0x00000400
 8000a30:	200001a0 	.word	0x200001a0
 8000a34:	20000470 	.word	0x20000470

08000a38 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000a38:	b480      	push	{r7}
 8000a3a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000a3c:	bf00      	nop
 8000a3e:	46bd      	mov	sp, r7
 8000a40:	bc80      	pop	{r7}
 8000a42:	4770      	bx	lr

08000a44 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000a44:	f7ff fff8 	bl	8000a38 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000a48:	480b      	ldr	r0, [pc, #44]	; (8000a78 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8000a4a:	490c      	ldr	r1, [pc, #48]	; (8000a7c <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000a4c:	4a0c      	ldr	r2, [pc, #48]	; (8000a80 <LoopFillZerobss+0x16>)
  movs r3, #0
 8000a4e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000a50:	e002      	b.n	8000a58 <LoopCopyDataInit>

08000a52 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000a52:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000a54:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000a56:	3304      	adds	r3, #4

08000a58 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000a58:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000a5a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000a5c:	d3f9      	bcc.n	8000a52 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000a5e:	4a09      	ldr	r2, [pc, #36]	; (8000a84 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000a60:	4c09      	ldr	r4, [pc, #36]	; (8000a88 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000a62:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000a64:	e001      	b.n	8000a6a <LoopFillZerobss>

08000a66 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000a66:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000a68:	3204      	adds	r2, #4

08000a6a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000a6a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000a6c:	d3fb      	bcc.n	8000a66 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000a6e:	f002 ff57 	bl	8003920 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000a72:	f7ff fc09 	bl	8000288 <main>
  bx lr
 8000a76:	4770      	bx	lr
  ldr r0, =_sdata
 8000a78:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000a7c:	200000ec 	.word	0x200000ec
  ldr r2, =_sidata
 8000a80:	08004984 	.word	0x08004984
  ldr r2, =_sbss
 8000a84:	200000ec 	.word	0x200000ec
  ldr r4, =_ebss
 8000a88:	20000470 	.word	0x20000470

08000a8c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000a8c:	e7fe      	b.n	8000a8c <ADC1_2_IRQHandler>
	...

08000a90 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000a90:	b580      	push	{r7, lr}
 8000a92:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000a94:	4b08      	ldr	r3, [pc, #32]	; (8000ab8 <HAL_Init+0x28>)
 8000a96:	681b      	ldr	r3, [r3, #0]
 8000a98:	4a07      	ldr	r2, [pc, #28]	; (8000ab8 <HAL_Init+0x28>)
 8000a9a:	f043 0310 	orr.w	r3, r3, #16
 8000a9e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000aa0:	2003      	movs	r0, #3
 8000aa2:	f000 f92b 	bl	8000cfc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000aa6:	200f      	movs	r0, #15
 8000aa8:	f000 f808 	bl	8000abc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000aac:	f7ff fe40 	bl	8000730 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000ab0:	2300      	movs	r3, #0
}
 8000ab2:	4618      	mov	r0, r3
 8000ab4:	bd80      	pop	{r7, pc}
 8000ab6:	bf00      	nop
 8000ab8:	40022000 	.word	0x40022000

08000abc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000abc:	b580      	push	{r7, lr}
 8000abe:	b082      	sub	sp, #8
 8000ac0:	af00      	add	r7, sp, #0
 8000ac2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000ac4:	4b12      	ldr	r3, [pc, #72]	; (8000b10 <HAL_InitTick+0x54>)
 8000ac6:	681a      	ldr	r2, [r3, #0]
 8000ac8:	4b12      	ldr	r3, [pc, #72]	; (8000b14 <HAL_InitTick+0x58>)
 8000aca:	781b      	ldrb	r3, [r3, #0]
 8000acc:	4619      	mov	r1, r3
 8000ace:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000ad2:	fbb3 f3f1 	udiv	r3, r3, r1
 8000ad6:	fbb2 f3f3 	udiv	r3, r2, r3
 8000ada:	4618      	mov	r0, r3
 8000adc:	f000 f935 	bl	8000d4a <HAL_SYSTICK_Config>
 8000ae0:	4603      	mov	r3, r0
 8000ae2:	2b00      	cmp	r3, #0
 8000ae4:	d001      	beq.n	8000aea <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000ae6:	2301      	movs	r3, #1
 8000ae8:	e00e      	b.n	8000b08 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000aea:	687b      	ldr	r3, [r7, #4]
 8000aec:	2b0f      	cmp	r3, #15
 8000aee:	d80a      	bhi.n	8000b06 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000af0:	2200      	movs	r2, #0
 8000af2:	6879      	ldr	r1, [r7, #4]
 8000af4:	f04f 30ff 	mov.w	r0, #4294967295
 8000af8:	f000 f90b 	bl	8000d12 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000afc:	4a06      	ldr	r2, [pc, #24]	; (8000b18 <HAL_InitTick+0x5c>)
 8000afe:	687b      	ldr	r3, [r7, #4]
 8000b00:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000b02:	2300      	movs	r3, #0
 8000b04:	e000      	b.n	8000b08 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000b06:	2301      	movs	r3, #1
}
 8000b08:	4618      	mov	r0, r3
 8000b0a:	3708      	adds	r7, #8
 8000b0c:	46bd      	mov	sp, r7
 8000b0e:	bd80      	pop	{r7, pc}
 8000b10:	20000004 	.word	0x20000004
 8000b14:	2000000c 	.word	0x2000000c
 8000b18:	20000008 	.word	0x20000008

08000b1c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000b1c:	b480      	push	{r7}
 8000b1e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000b20:	4b05      	ldr	r3, [pc, #20]	; (8000b38 <HAL_IncTick+0x1c>)
 8000b22:	781b      	ldrb	r3, [r3, #0]
 8000b24:	461a      	mov	r2, r3
 8000b26:	4b05      	ldr	r3, [pc, #20]	; (8000b3c <HAL_IncTick+0x20>)
 8000b28:	681b      	ldr	r3, [r3, #0]
 8000b2a:	4413      	add	r3, r2
 8000b2c:	4a03      	ldr	r2, [pc, #12]	; (8000b3c <HAL_IncTick+0x20>)
 8000b2e:	6013      	str	r3, [r2, #0]
}
 8000b30:	bf00      	nop
 8000b32:	46bd      	mov	sp, r7
 8000b34:	bc80      	pop	{r7}
 8000b36:	4770      	bx	lr
 8000b38:	2000000c 	.word	0x2000000c
 8000b3c:	200001a4 	.word	0x200001a4

08000b40 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000b40:	b480      	push	{r7}
 8000b42:	af00      	add	r7, sp, #0
  return uwTick;
 8000b44:	4b02      	ldr	r3, [pc, #8]	; (8000b50 <HAL_GetTick+0x10>)
 8000b46:	681b      	ldr	r3, [r3, #0]
}
 8000b48:	4618      	mov	r0, r3
 8000b4a:	46bd      	mov	sp, r7
 8000b4c:	bc80      	pop	{r7}
 8000b4e:	4770      	bx	lr
 8000b50:	200001a4 	.word	0x200001a4

08000b54 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000b54:	b580      	push	{r7, lr}
 8000b56:	b084      	sub	sp, #16
 8000b58:	af00      	add	r7, sp, #0
 8000b5a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000b5c:	f7ff fff0 	bl	8000b40 <HAL_GetTick>
 8000b60:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000b62:	687b      	ldr	r3, [r7, #4]
 8000b64:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000b66:	68fb      	ldr	r3, [r7, #12]
 8000b68:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000b6c:	d005      	beq.n	8000b7a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000b6e:	4b0a      	ldr	r3, [pc, #40]	; (8000b98 <HAL_Delay+0x44>)
 8000b70:	781b      	ldrb	r3, [r3, #0]
 8000b72:	461a      	mov	r2, r3
 8000b74:	68fb      	ldr	r3, [r7, #12]
 8000b76:	4413      	add	r3, r2
 8000b78:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000b7a:	bf00      	nop
 8000b7c:	f7ff ffe0 	bl	8000b40 <HAL_GetTick>
 8000b80:	4602      	mov	r2, r0
 8000b82:	68bb      	ldr	r3, [r7, #8]
 8000b84:	1ad3      	subs	r3, r2, r3
 8000b86:	68fa      	ldr	r2, [r7, #12]
 8000b88:	429a      	cmp	r2, r3
 8000b8a:	d8f7      	bhi.n	8000b7c <HAL_Delay+0x28>
  {
  }
}
 8000b8c:	bf00      	nop
 8000b8e:	bf00      	nop
 8000b90:	3710      	adds	r7, #16
 8000b92:	46bd      	mov	sp, r7
 8000b94:	bd80      	pop	{r7, pc}
 8000b96:	bf00      	nop
 8000b98:	2000000c 	.word	0x2000000c

08000b9c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b9c:	b480      	push	{r7}
 8000b9e:	b085      	sub	sp, #20
 8000ba0:	af00      	add	r7, sp, #0
 8000ba2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000ba4:	687b      	ldr	r3, [r7, #4]
 8000ba6:	f003 0307 	and.w	r3, r3, #7
 8000baa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000bac:	4b0c      	ldr	r3, [pc, #48]	; (8000be0 <__NVIC_SetPriorityGrouping+0x44>)
 8000bae:	68db      	ldr	r3, [r3, #12]
 8000bb0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000bb2:	68ba      	ldr	r2, [r7, #8]
 8000bb4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000bb8:	4013      	ands	r3, r2
 8000bba:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000bbc:	68fb      	ldr	r3, [r7, #12]
 8000bbe:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000bc0:	68bb      	ldr	r3, [r7, #8]
 8000bc2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000bc4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000bc8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000bcc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000bce:	4a04      	ldr	r2, [pc, #16]	; (8000be0 <__NVIC_SetPriorityGrouping+0x44>)
 8000bd0:	68bb      	ldr	r3, [r7, #8]
 8000bd2:	60d3      	str	r3, [r2, #12]
}
 8000bd4:	bf00      	nop
 8000bd6:	3714      	adds	r7, #20
 8000bd8:	46bd      	mov	sp, r7
 8000bda:	bc80      	pop	{r7}
 8000bdc:	4770      	bx	lr
 8000bde:	bf00      	nop
 8000be0:	e000ed00 	.word	0xe000ed00

08000be4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000be4:	b480      	push	{r7}
 8000be6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000be8:	4b04      	ldr	r3, [pc, #16]	; (8000bfc <__NVIC_GetPriorityGrouping+0x18>)
 8000bea:	68db      	ldr	r3, [r3, #12]
 8000bec:	0a1b      	lsrs	r3, r3, #8
 8000bee:	f003 0307 	and.w	r3, r3, #7
}
 8000bf2:	4618      	mov	r0, r3
 8000bf4:	46bd      	mov	sp, r7
 8000bf6:	bc80      	pop	{r7}
 8000bf8:	4770      	bx	lr
 8000bfa:	bf00      	nop
 8000bfc:	e000ed00 	.word	0xe000ed00

08000c00 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000c00:	b480      	push	{r7}
 8000c02:	b083      	sub	sp, #12
 8000c04:	af00      	add	r7, sp, #0
 8000c06:	4603      	mov	r3, r0
 8000c08:	6039      	str	r1, [r7, #0]
 8000c0a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c0c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c10:	2b00      	cmp	r3, #0
 8000c12:	db0a      	blt.n	8000c2a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c14:	683b      	ldr	r3, [r7, #0]
 8000c16:	b2da      	uxtb	r2, r3
 8000c18:	490c      	ldr	r1, [pc, #48]	; (8000c4c <__NVIC_SetPriority+0x4c>)
 8000c1a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c1e:	0112      	lsls	r2, r2, #4
 8000c20:	b2d2      	uxtb	r2, r2
 8000c22:	440b      	add	r3, r1
 8000c24:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000c28:	e00a      	b.n	8000c40 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c2a:	683b      	ldr	r3, [r7, #0]
 8000c2c:	b2da      	uxtb	r2, r3
 8000c2e:	4908      	ldr	r1, [pc, #32]	; (8000c50 <__NVIC_SetPriority+0x50>)
 8000c30:	79fb      	ldrb	r3, [r7, #7]
 8000c32:	f003 030f 	and.w	r3, r3, #15
 8000c36:	3b04      	subs	r3, #4
 8000c38:	0112      	lsls	r2, r2, #4
 8000c3a:	b2d2      	uxtb	r2, r2
 8000c3c:	440b      	add	r3, r1
 8000c3e:	761a      	strb	r2, [r3, #24]
}
 8000c40:	bf00      	nop
 8000c42:	370c      	adds	r7, #12
 8000c44:	46bd      	mov	sp, r7
 8000c46:	bc80      	pop	{r7}
 8000c48:	4770      	bx	lr
 8000c4a:	bf00      	nop
 8000c4c:	e000e100 	.word	0xe000e100
 8000c50:	e000ed00 	.word	0xe000ed00

08000c54 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000c54:	b480      	push	{r7}
 8000c56:	b089      	sub	sp, #36	; 0x24
 8000c58:	af00      	add	r7, sp, #0
 8000c5a:	60f8      	str	r0, [r7, #12]
 8000c5c:	60b9      	str	r1, [r7, #8]
 8000c5e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000c60:	68fb      	ldr	r3, [r7, #12]
 8000c62:	f003 0307 	and.w	r3, r3, #7
 8000c66:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000c68:	69fb      	ldr	r3, [r7, #28]
 8000c6a:	f1c3 0307 	rsb	r3, r3, #7
 8000c6e:	2b04      	cmp	r3, #4
 8000c70:	bf28      	it	cs
 8000c72:	2304      	movcs	r3, #4
 8000c74:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000c76:	69fb      	ldr	r3, [r7, #28]
 8000c78:	3304      	adds	r3, #4
 8000c7a:	2b06      	cmp	r3, #6
 8000c7c:	d902      	bls.n	8000c84 <NVIC_EncodePriority+0x30>
 8000c7e:	69fb      	ldr	r3, [r7, #28]
 8000c80:	3b03      	subs	r3, #3
 8000c82:	e000      	b.n	8000c86 <NVIC_EncodePriority+0x32>
 8000c84:	2300      	movs	r3, #0
 8000c86:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c88:	f04f 32ff 	mov.w	r2, #4294967295
 8000c8c:	69bb      	ldr	r3, [r7, #24]
 8000c8e:	fa02 f303 	lsl.w	r3, r2, r3
 8000c92:	43da      	mvns	r2, r3
 8000c94:	68bb      	ldr	r3, [r7, #8]
 8000c96:	401a      	ands	r2, r3
 8000c98:	697b      	ldr	r3, [r7, #20]
 8000c9a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000c9c:	f04f 31ff 	mov.w	r1, #4294967295
 8000ca0:	697b      	ldr	r3, [r7, #20]
 8000ca2:	fa01 f303 	lsl.w	r3, r1, r3
 8000ca6:	43d9      	mvns	r1, r3
 8000ca8:	687b      	ldr	r3, [r7, #4]
 8000caa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000cac:	4313      	orrs	r3, r2
         );
}
 8000cae:	4618      	mov	r0, r3
 8000cb0:	3724      	adds	r7, #36	; 0x24
 8000cb2:	46bd      	mov	sp, r7
 8000cb4:	bc80      	pop	{r7}
 8000cb6:	4770      	bx	lr

08000cb8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000cb8:	b580      	push	{r7, lr}
 8000cba:	b082      	sub	sp, #8
 8000cbc:	af00      	add	r7, sp, #0
 8000cbe:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000cc0:	687b      	ldr	r3, [r7, #4]
 8000cc2:	3b01      	subs	r3, #1
 8000cc4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000cc8:	d301      	bcc.n	8000cce <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000cca:	2301      	movs	r3, #1
 8000ccc:	e00f      	b.n	8000cee <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000cce:	4a0a      	ldr	r2, [pc, #40]	; (8000cf8 <SysTick_Config+0x40>)
 8000cd0:	687b      	ldr	r3, [r7, #4]
 8000cd2:	3b01      	subs	r3, #1
 8000cd4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000cd6:	210f      	movs	r1, #15
 8000cd8:	f04f 30ff 	mov.w	r0, #4294967295
 8000cdc:	f7ff ff90 	bl	8000c00 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000ce0:	4b05      	ldr	r3, [pc, #20]	; (8000cf8 <SysTick_Config+0x40>)
 8000ce2:	2200      	movs	r2, #0
 8000ce4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000ce6:	4b04      	ldr	r3, [pc, #16]	; (8000cf8 <SysTick_Config+0x40>)
 8000ce8:	2207      	movs	r2, #7
 8000cea:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000cec:	2300      	movs	r3, #0
}
 8000cee:	4618      	mov	r0, r3
 8000cf0:	3708      	adds	r7, #8
 8000cf2:	46bd      	mov	sp, r7
 8000cf4:	bd80      	pop	{r7, pc}
 8000cf6:	bf00      	nop
 8000cf8:	e000e010 	.word	0xe000e010

08000cfc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000cfc:	b580      	push	{r7, lr}
 8000cfe:	b082      	sub	sp, #8
 8000d00:	af00      	add	r7, sp, #0
 8000d02:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000d04:	6878      	ldr	r0, [r7, #4]
 8000d06:	f7ff ff49 	bl	8000b9c <__NVIC_SetPriorityGrouping>
}
 8000d0a:	bf00      	nop
 8000d0c:	3708      	adds	r7, #8
 8000d0e:	46bd      	mov	sp, r7
 8000d10:	bd80      	pop	{r7, pc}

08000d12 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000d12:	b580      	push	{r7, lr}
 8000d14:	b086      	sub	sp, #24
 8000d16:	af00      	add	r7, sp, #0
 8000d18:	4603      	mov	r3, r0
 8000d1a:	60b9      	str	r1, [r7, #8]
 8000d1c:	607a      	str	r2, [r7, #4]
 8000d1e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000d20:	2300      	movs	r3, #0
 8000d22:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000d24:	f7ff ff5e 	bl	8000be4 <__NVIC_GetPriorityGrouping>
 8000d28:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000d2a:	687a      	ldr	r2, [r7, #4]
 8000d2c:	68b9      	ldr	r1, [r7, #8]
 8000d2e:	6978      	ldr	r0, [r7, #20]
 8000d30:	f7ff ff90 	bl	8000c54 <NVIC_EncodePriority>
 8000d34:	4602      	mov	r2, r0
 8000d36:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000d3a:	4611      	mov	r1, r2
 8000d3c:	4618      	mov	r0, r3
 8000d3e:	f7ff ff5f 	bl	8000c00 <__NVIC_SetPriority>
}
 8000d42:	bf00      	nop
 8000d44:	3718      	adds	r7, #24
 8000d46:	46bd      	mov	sp, r7
 8000d48:	bd80      	pop	{r7, pc}

08000d4a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000d4a:	b580      	push	{r7, lr}
 8000d4c:	b082      	sub	sp, #8
 8000d4e:	af00      	add	r7, sp, #0
 8000d50:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000d52:	6878      	ldr	r0, [r7, #4]
 8000d54:	f7ff ffb0 	bl	8000cb8 <SysTick_Config>
 8000d58:	4603      	mov	r3, r0
}
 8000d5a:	4618      	mov	r0, r3
 8000d5c:	3708      	adds	r7, #8
 8000d5e:	46bd      	mov	sp, r7
 8000d60:	bd80      	pop	{r7, pc}

08000d62 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8000d62:	b480      	push	{r7}
 8000d64:	b085      	sub	sp, #20
 8000d66:	af00      	add	r7, sp, #0
 8000d68:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000d6a:	2300      	movs	r3, #0
 8000d6c:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000d6e:	687b      	ldr	r3, [r7, #4]
 8000d70:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8000d74:	b2db      	uxtb	r3, r3
 8000d76:	2b02      	cmp	r3, #2
 8000d78:	d008      	beq.n	8000d8c <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000d7a:	687b      	ldr	r3, [r7, #4]
 8000d7c:	2204      	movs	r2, #4
 8000d7e:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000d80:	687b      	ldr	r3, [r7, #4]
 8000d82:	2200      	movs	r2, #0
 8000d84:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8000d88:	2301      	movs	r3, #1
 8000d8a:	e020      	b.n	8000dce <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000d8c:	687b      	ldr	r3, [r7, #4]
 8000d8e:	681b      	ldr	r3, [r3, #0]
 8000d90:	681a      	ldr	r2, [r3, #0]
 8000d92:	687b      	ldr	r3, [r7, #4]
 8000d94:	681b      	ldr	r3, [r3, #0]
 8000d96:	f022 020e 	bic.w	r2, r2, #14
 8000d9a:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000d9c:	687b      	ldr	r3, [r7, #4]
 8000d9e:	681b      	ldr	r3, [r3, #0]
 8000da0:	681a      	ldr	r2, [r3, #0]
 8000da2:	687b      	ldr	r3, [r7, #4]
 8000da4:	681b      	ldr	r3, [r3, #0]
 8000da6:	f022 0201 	bic.w	r2, r2, #1
 8000daa:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8000dac:	687b      	ldr	r3, [r7, #4]
 8000dae:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000db0:	687b      	ldr	r3, [r7, #4]
 8000db2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000db4:	2101      	movs	r1, #1
 8000db6:	fa01 f202 	lsl.w	r2, r1, r2
 8000dba:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8000dbc:	687b      	ldr	r3, [r7, #4]
 8000dbe:	2201      	movs	r2, #1
 8000dc0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8000dc4:	687b      	ldr	r3, [r7, #4]
 8000dc6:	2200      	movs	r2, #0
 8000dc8:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8000dcc:	7bfb      	ldrb	r3, [r7, #15]
}
 8000dce:	4618      	mov	r0, r3
 8000dd0:	3714      	adds	r7, #20
 8000dd2:	46bd      	mov	sp, r7
 8000dd4:	bc80      	pop	{r7}
 8000dd6:	4770      	bx	lr

08000dd8 <HAL_DMA_GetError>:
  * @param  hdma : pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8000dd8:	b480      	push	{r7}
 8000dda:	b083      	sub	sp, #12
 8000ddc:	af00      	add	r7, sp, #0
 8000dde:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8000de0:	687b      	ldr	r3, [r7, #4]
 8000de2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
}
 8000de4:	4618      	mov	r0, r3
 8000de6:	370c      	adds	r7, #12
 8000de8:	46bd      	mov	sp, r7
 8000dea:	bc80      	pop	{r7}
 8000dec:	4770      	bx	lr
	...

08000df0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000df0:	b480      	push	{r7}
 8000df2:	b08b      	sub	sp, #44	; 0x2c
 8000df4:	af00      	add	r7, sp, #0
 8000df6:	6078      	str	r0, [r7, #4]
 8000df8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000dfa:	2300      	movs	r3, #0
 8000dfc:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000dfe:	2300      	movs	r3, #0
 8000e00:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000e02:	e169      	b.n	80010d8 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000e04:	2201      	movs	r2, #1
 8000e06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e08:	fa02 f303 	lsl.w	r3, r2, r3
 8000e0c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000e0e:	683b      	ldr	r3, [r7, #0]
 8000e10:	681b      	ldr	r3, [r3, #0]
 8000e12:	69fa      	ldr	r2, [r7, #28]
 8000e14:	4013      	ands	r3, r2
 8000e16:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000e18:	69ba      	ldr	r2, [r7, #24]
 8000e1a:	69fb      	ldr	r3, [r7, #28]
 8000e1c:	429a      	cmp	r2, r3
 8000e1e:	f040 8158 	bne.w	80010d2 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000e22:	683b      	ldr	r3, [r7, #0]
 8000e24:	685b      	ldr	r3, [r3, #4]
 8000e26:	4a9a      	ldr	r2, [pc, #616]	; (8001090 <HAL_GPIO_Init+0x2a0>)
 8000e28:	4293      	cmp	r3, r2
 8000e2a:	d05e      	beq.n	8000eea <HAL_GPIO_Init+0xfa>
 8000e2c:	4a98      	ldr	r2, [pc, #608]	; (8001090 <HAL_GPIO_Init+0x2a0>)
 8000e2e:	4293      	cmp	r3, r2
 8000e30:	d875      	bhi.n	8000f1e <HAL_GPIO_Init+0x12e>
 8000e32:	4a98      	ldr	r2, [pc, #608]	; (8001094 <HAL_GPIO_Init+0x2a4>)
 8000e34:	4293      	cmp	r3, r2
 8000e36:	d058      	beq.n	8000eea <HAL_GPIO_Init+0xfa>
 8000e38:	4a96      	ldr	r2, [pc, #600]	; (8001094 <HAL_GPIO_Init+0x2a4>)
 8000e3a:	4293      	cmp	r3, r2
 8000e3c:	d86f      	bhi.n	8000f1e <HAL_GPIO_Init+0x12e>
 8000e3e:	4a96      	ldr	r2, [pc, #600]	; (8001098 <HAL_GPIO_Init+0x2a8>)
 8000e40:	4293      	cmp	r3, r2
 8000e42:	d052      	beq.n	8000eea <HAL_GPIO_Init+0xfa>
 8000e44:	4a94      	ldr	r2, [pc, #592]	; (8001098 <HAL_GPIO_Init+0x2a8>)
 8000e46:	4293      	cmp	r3, r2
 8000e48:	d869      	bhi.n	8000f1e <HAL_GPIO_Init+0x12e>
 8000e4a:	4a94      	ldr	r2, [pc, #592]	; (800109c <HAL_GPIO_Init+0x2ac>)
 8000e4c:	4293      	cmp	r3, r2
 8000e4e:	d04c      	beq.n	8000eea <HAL_GPIO_Init+0xfa>
 8000e50:	4a92      	ldr	r2, [pc, #584]	; (800109c <HAL_GPIO_Init+0x2ac>)
 8000e52:	4293      	cmp	r3, r2
 8000e54:	d863      	bhi.n	8000f1e <HAL_GPIO_Init+0x12e>
 8000e56:	4a92      	ldr	r2, [pc, #584]	; (80010a0 <HAL_GPIO_Init+0x2b0>)
 8000e58:	4293      	cmp	r3, r2
 8000e5a:	d046      	beq.n	8000eea <HAL_GPIO_Init+0xfa>
 8000e5c:	4a90      	ldr	r2, [pc, #576]	; (80010a0 <HAL_GPIO_Init+0x2b0>)
 8000e5e:	4293      	cmp	r3, r2
 8000e60:	d85d      	bhi.n	8000f1e <HAL_GPIO_Init+0x12e>
 8000e62:	2b12      	cmp	r3, #18
 8000e64:	d82a      	bhi.n	8000ebc <HAL_GPIO_Init+0xcc>
 8000e66:	2b12      	cmp	r3, #18
 8000e68:	d859      	bhi.n	8000f1e <HAL_GPIO_Init+0x12e>
 8000e6a:	a201      	add	r2, pc, #4	; (adr r2, 8000e70 <HAL_GPIO_Init+0x80>)
 8000e6c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000e70:	08000eeb 	.word	0x08000eeb
 8000e74:	08000ec5 	.word	0x08000ec5
 8000e78:	08000ed7 	.word	0x08000ed7
 8000e7c:	08000f19 	.word	0x08000f19
 8000e80:	08000f1f 	.word	0x08000f1f
 8000e84:	08000f1f 	.word	0x08000f1f
 8000e88:	08000f1f 	.word	0x08000f1f
 8000e8c:	08000f1f 	.word	0x08000f1f
 8000e90:	08000f1f 	.word	0x08000f1f
 8000e94:	08000f1f 	.word	0x08000f1f
 8000e98:	08000f1f 	.word	0x08000f1f
 8000e9c:	08000f1f 	.word	0x08000f1f
 8000ea0:	08000f1f 	.word	0x08000f1f
 8000ea4:	08000f1f 	.word	0x08000f1f
 8000ea8:	08000f1f 	.word	0x08000f1f
 8000eac:	08000f1f 	.word	0x08000f1f
 8000eb0:	08000f1f 	.word	0x08000f1f
 8000eb4:	08000ecd 	.word	0x08000ecd
 8000eb8:	08000ee1 	.word	0x08000ee1
 8000ebc:	4a79      	ldr	r2, [pc, #484]	; (80010a4 <HAL_GPIO_Init+0x2b4>)
 8000ebe:	4293      	cmp	r3, r2
 8000ec0:	d013      	beq.n	8000eea <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8000ec2:	e02c      	b.n	8000f1e <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000ec4:	683b      	ldr	r3, [r7, #0]
 8000ec6:	68db      	ldr	r3, [r3, #12]
 8000ec8:	623b      	str	r3, [r7, #32]
          break;
 8000eca:	e029      	b.n	8000f20 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000ecc:	683b      	ldr	r3, [r7, #0]
 8000ece:	68db      	ldr	r3, [r3, #12]
 8000ed0:	3304      	adds	r3, #4
 8000ed2:	623b      	str	r3, [r7, #32]
          break;
 8000ed4:	e024      	b.n	8000f20 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000ed6:	683b      	ldr	r3, [r7, #0]
 8000ed8:	68db      	ldr	r3, [r3, #12]
 8000eda:	3308      	adds	r3, #8
 8000edc:	623b      	str	r3, [r7, #32]
          break;
 8000ede:	e01f      	b.n	8000f20 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000ee0:	683b      	ldr	r3, [r7, #0]
 8000ee2:	68db      	ldr	r3, [r3, #12]
 8000ee4:	330c      	adds	r3, #12
 8000ee6:	623b      	str	r3, [r7, #32]
          break;
 8000ee8:	e01a      	b.n	8000f20 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000eea:	683b      	ldr	r3, [r7, #0]
 8000eec:	689b      	ldr	r3, [r3, #8]
 8000eee:	2b00      	cmp	r3, #0
 8000ef0:	d102      	bne.n	8000ef8 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000ef2:	2304      	movs	r3, #4
 8000ef4:	623b      	str	r3, [r7, #32]
          break;
 8000ef6:	e013      	b.n	8000f20 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000ef8:	683b      	ldr	r3, [r7, #0]
 8000efa:	689b      	ldr	r3, [r3, #8]
 8000efc:	2b01      	cmp	r3, #1
 8000efe:	d105      	bne.n	8000f0c <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000f00:	2308      	movs	r3, #8
 8000f02:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000f04:	687b      	ldr	r3, [r7, #4]
 8000f06:	69fa      	ldr	r2, [r7, #28]
 8000f08:	611a      	str	r2, [r3, #16]
          break;
 8000f0a:	e009      	b.n	8000f20 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000f0c:	2308      	movs	r3, #8
 8000f0e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000f10:	687b      	ldr	r3, [r7, #4]
 8000f12:	69fa      	ldr	r2, [r7, #28]
 8000f14:	615a      	str	r2, [r3, #20]
          break;
 8000f16:	e003      	b.n	8000f20 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000f18:	2300      	movs	r3, #0
 8000f1a:	623b      	str	r3, [r7, #32]
          break;
 8000f1c:	e000      	b.n	8000f20 <HAL_GPIO_Init+0x130>
          break;
 8000f1e:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000f20:	69bb      	ldr	r3, [r7, #24]
 8000f22:	2bff      	cmp	r3, #255	; 0xff
 8000f24:	d801      	bhi.n	8000f2a <HAL_GPIO_Init+0x13a>
 8000f26:	687b      	ldr	r3, [r7, #4]
 8000f28:	e001      	b.n	8000f2e <HAL_GPIO_Init+0x13e>
 8000f2a:	687b      	ldr	r3, [r7, #4]
 8000f2c:	3304      	adds	r3, #4
 8000f2e:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000f30:	69bb      	ldr	r3, [r7, #24]
 8000f32:	2bff      	cmp	r3, #255	; 0xff
 8000f34:	d802      	bhi.n	8000f3c <HAL_GPIO_Init+0x14c>
 8000f36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f38:	009b      	lsls	r3, r3, #2
 8000f3a:	e002      	b.n	8000f42 <HAL_GPIO_Init+0x152>
 8000f3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f3e:	3b08      	subs	r3, #8
 8000f40:	009b      	lsls	r3, r3, #2
 8000f42:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000f44:	697b      	ldr	r3, [r7, #20]
 8000f46:	681a      	ldr	r2, [r3, #0]
 8000f48:	210f      	movs	r1, #15
 8000f4a:	693b      	ldr	r3, [r7, #16]
 8000f4c:	fa01 f303 	lsl.w	r3, r1, r3
 8000f50:	43db      	mvns	r3, r3
 8000f52:	401a      	ands	r2, r3
 8000f54:	6a39      	ldr	r1, [r7, #32]
 8000f56:	693b      	ldr	r3, [r7, #16]
 8000f58:	fa01 f303 	lsl.w	r3, r1, r3
 8000f5c:	431a      	orrs	r2, r3
 8000f5e:	697b      	ldr	r3, [r7, #20]
 8000f60:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000f62:	683b      	ldr	r3, [r7, #0]
 8000f64:	685b      	ldr	r3, [r3, #4]
 8000f66:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f6a:	2b00      	cmp	r3, #0
 8000f6c:	f000 80b1 	beq.w	80010d2 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000f70:	4b4d      	ldr	r3, [pc, #308]	; (80010a8 <HAL_GPIO_Init+0x2b8>)
 8000f72:	699b      	ldr	r3, [r3, #24]
 8000f74:	4a4c      	ldr	r2, [pc, #304]	; (80010a8 <HAL_GPIO_Init+0x2b8>)
 8000f76:	f043 0301 	orr.w	r3, r3, #1
 8000f7a:	6193      	str	r3, [r2, #24]
 8000f7c:	4b4a      	ldr	r3, [pc, #296]	; (80010a8 <HAL_GPIO_Init+0x2b8>)
 8000f7e:	699b      	ldr	r3, [r3, #24]
 8000f80:	f003 0301 	and.w	r3, r3, #1
 8000f84:	60bb      	str	r3, [r7, #8]
 8000f86:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8000f88:	4a48      	ldr	r2, [pc, #288]	; (80010ac <HAL_GPIO_Init+0x2bc>)
 8000f8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f8c:	089b      	lsrs	r3, r3, #2
 8000f8e:	3302      	adds	r3, #2
 8000f90:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000f94:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000f96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f98:	f003 0303 	and.w	r3, r3, #3
 8000f9c:	009b      	lsls	r3, r3, #2
 8000f9e:	220f      	movs	r2, #15
 8000fa0:	fa02 f303 	lsl.w	r3, r2, r3
 8000fa4:	43db      	mvns	r3, r3
 8000fa6:	68fa      	ldr	r2, [r7, #12]
 8000fa8:	4013      	ands	r3, r2
 8000faa:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	4a40      	ldr	r2, [pc, #256]	; (80010b0 <HAL_GPIO_Init+0x2c0>)
 8000fb0:	4293      	cmp	r3, r2
 8000fb2:	d013      	beq.n	8000fdc <HAL_GPIO_Init+0x1ec>
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	4a3f      	ldr	r2, [pc, #252]	; (80010b4 <HAL_GPIO_Init+0x2c4>)
 8000fb8:	4293      	cmp	r3, r2
 8000fba:	d00d      	beq.n	8000fd8 <HAL_GPIO_Init+0x1e8>
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	4a3e      	ldr	r2, [pc, #248]	; (80010b8 <HAL_GPIO_Init+0x2c8>)
 8000fc0:	4293      	cmp	r3, r2
 8000fc2:	d007      	beq.n	8000fd4 <HAL_GPIO_Init+0x1e4>
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	4a3d      	ldr	r2, [pc, #244]	; (80010bc <HAL_GPIO_Init+0x2cc>)
 8000fc8:	4293      	cmp	r3, r2
 8000fca:	d101      	bne.n	8000fd0 <HAL_GPIO_Init+0x1e0>
 8000fcc:	2303      	movs	r3, #3
 8000fce:	e006      	b.n	8000fde <HAL_GPIO_Init+0x1ee>
 8000fd0:	2304      	movs	r3, #4
 8000fd2:	e004      	b.n	8000fde <HAL_GPIO_Init+0x1ee>
 8000fd4:	2302      	movs	r3, #2
 8000fd6:	e002      	b.n	8000fde <HAL_GPIO_Init+0x1ee>
 8000fd8:	2301      	movs	r3, #1
 8000fda:	e000      	b.n	8000fde <HAL_GPIO_Init+0x1ee>
 8000fdc:	2300      	movs	r3, #0
 8000fde:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000fe0:	f002 0203 	and.w	r2, r2, #3
 8000fe4:	0092      	lsls	r2, r2, #2
 8000fe6:	4093      	lsls	r3, r2
 8000fe8:	68fa      	ldr	r2, [r7, #12]
 8000fea:	4313      	orrs	r3, r2
 8000fec:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8000fee:	492f      	ldr	r1, [pc, #188]	; (80010ac <HAL_GPIO_Init+0x2bc>)
 8000ff0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ff2:	089b      	lsrs	r3, r3, #2
 8000ff4:	3302      	adds	r3, #2
 8000ff6:	68fa      	ldr	r2, [r7, #12]
 8000ff8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000ffc:	683b      	ldr	r3, [r7, #0]
 8000ffe:	685b      	ldr	r3, [r3, #4]
 8001000:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001004:	2b00      	cmp	r3, #0
 8001006:	d006      	beq.n	8001016 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001008:	4b2d      	ldr	r3, [pc, #180]	; (80010c0 <HAL_GPIO_Init+0x2d0>)
 800100a:	689a      	ldr	r2, [r3, #8]
 800100c:	492c      	ldr	r1, [pc, #176]	; (80010c0 <HAL_GPIO_Init+0x2d0>)
 800100e:	69bb      	ldr	r3, [r7, #24]
 8001010:	4313      	orrs	r3, r2
 8001012:	608b      	str	r3, [r1, #8]
 8001014:	e006      	b.n	8001024 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001016:	4b2a      	ldr	r3, [pc, #168]	; (80010c0 <HAL_GPIO_Init+0x2d0>)
 8001018:	689a      	ldr	r2, [r3, #8]
 800101a:	69bb      	ldr	r3, [r7, #24]
 800101c:	43db      	mvns	r3, r3
 800101e:	4928      	ldr	r1, [pc, #160]	; (80010c0 <HAL_GPIO_Init+0x2d0>)
 8001020:	4013      	ands	r3, r2
 8001022:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001024:	683b      	ldr	r3, [r7, #0]
 8001026:	685b      	ldr	r3, [r3, #4]
 8001028:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800102c:	2b00      	cmp	r3, #0
 800102e:	d006      	beq.n	800103e <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001030:	4b23      	ldr	r3, [pc, #140]	; (80010c0 <HAL_GPIO_Init+0x2d0>)
 8001032:	68da      	ldr	r2, [r3, #12]
 8001034:	4922      	ldr	r1, [pc, #136]	; (80010c0 <HAL_GPIO_Init+0x2d0>)
 8001036:	69bb      	ldr	r3, [r7, #24]
 8001038:	4313      	orrs	r3, r2
 800103a:	60cb      	str	r3, [r1, #12]
 800103c:	e006      	b.n	800104c <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800103e:	4b20      	ldr	r3, [pc, #128]	; (80010c0 <HAL_GPIO_Init+0x2d0>)
 8001040:	68da      	ldr	r2, [r3, #12]
 8001042:	69bb      	ldr	r3, [r7, #24]
 8001044:	43db      	mvns	r3, r3
 8001046:	491e      	ldr	r1, [pc, #120]	; (80010c0 <HAL_GPIO_Init+0x2d0>)
 8001048:	4013      	ands	r3, r2
 800104a:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800104c:	683b      	ldr	r3, [r7, #0]
 800104e:	685b      	ldr	r3, [r3, #4]
 8001050:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001054:	2b00      	cmp	r3, #0
 8001056:	d006      	beq.n	8001066 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001058:	4b19      	ldr	r3, [pc, #100]	; (80010c0 <HAL_GPIO_Init+0x2d0>)
 800105a:	685a      	ldr	r2, [r3, #4]
 800105c:	4918      	ldr	r1, [pc, #96]	; (80010c0 <HAL_GPIO_Init+0x2d0>)
 800105e:	69bb      	ldr	r3, [r7, #24]
 8001060:	4313      	orrs	r3, r2
 8001062:	604b      	str	r3, [r1, #4]
 8001064:	e006      	b.n	8001074 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001066:	4b16      	ldr	r3, [pc, #88]	; (80010c0 <HAL_GPIO_Init+0x2d0>)
 8001068:	685a      	ldr	r2, [r3, #4]
 800106a:	69bb      	ldr	r3, [r7, #24]
 800106c:	43db      	mvns	r3, r3
 800106e:	4914      	ldr	r1, [pc, #80]	; (80010c0 <HAL_GPIO_Init+0x2d0>)
 8001070:	4013      	ands	r3, r2
 8001072:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001074:	683b      	ldr	r3, [r7, #0]
 8001076:	685b      	ldr	r3, [r3, #4]
 8001078:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800107c:	2b00      	cmp	r3, #0
 800107e:	d021      	beq.n	80010c4 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001080:	4b0f      	ldr	r3, [pc, #60]	; (80010c0 <HAL_GPIO_Init+0x2d0>)
 8001082:	681a      	ldr	r2, [r3, #0]
 8001084:	490e      	ldr	r1, [pc, #56]	; (80010c0 <HAL_GPIO_Init+0x2d0>)
 8001086:	69bb      	ldr	r3, [r7, #24]
 8001088:	4313      	orrs	r3, r2
 800108a:	600b      	str	r3, [r1, #0]
 800108c:	e021      	b.n	80010d2 <HAL_GPIO_Init+0x2e2>
 800108e:	bf00      	nop
 8001090:	10320000 	.word	0x10320000
 8001094:	10310000 	.word	0x10310000
 8001098:	10220000 	.word	0x10220000
 800109c:	10210000 	.word	0x10210000
 80010a0:	10120000 	.word	0x10120000
 80010a4:	10110000 	.word	0x10110000
 80010a8:	40021000 	.word	0x40021000
 80010ac:	40010000 	.word	0x40010000
 80010b0:	40010800 	.word	0x40010800
 80010b4:	40010c00 	.word	0x40010c00
 80010b8:	40011000 	.word	0x40011000
 80010bc:	40011400 	.word	0x40011400
 80010c0:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80010c4:	4b0b      	ldr	r3, [pc, #44]	; (80010f4 <HAL_GPIO_Init+0x304>)
 80010c6:	681a      	ldr	r2, [r3, #0]
 80010c8:	69bb      	ldr	r3, [r7, #24]
 80010ca:	43db      	mvns	r3, r3
 80010cc:	4909      	ldr	r1, [pc, #36]	; (80010f4 <HAL_GPIO_Init+0x304>)
 80010ce:	4013      	ands	r3, r2
 80010d0:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 80010d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010d4:	3301      	adds	r3, #1
 80010d6:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80010d8:	683b      	ldr	r3, [r7, #0]
 80010da:	681a      	ldr	r2, [r3, #0]
 80010dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010de:	fa22 f303 	lsr.w	r3, r2, r3
 80010e2:	2b00      	cmp	r3, #0
 80010e4:	f47f ae8e 	bne.w	8000e04 <HAL_GPIO_Init+0x14>
  }
}
 80010e8:	bf00      	nop
 80010ea:	bf00      	nop
 80010ec:	372c      	adds	r7, #44	; 0x2c
 80010ee:	46bd      	mov	sp, r7
 80010f0:	bc80      	pop	{r7}
 80010f2:	4770      	bx	lr
 80010f4:	40010400 	.word	0x40010400

080010f8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80010f8:	b480      	push	{r7}
 80010fa:	b085      	sub	sp, #20
 80010fc:	af00      	add	r7, sp, #0
 80010fe:	6078      	str	r0, [r7, #4]
 8001100:	460b      	mov	r3, r1
 8001102:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	689a      	ldr	r2, [r3, #8]
 8001108:	887b      	ldrh	r3, [r7, #2]
 800110a:	4013      	ands	r3, r2
 800110c:	2b00      	cmp	r3, #0
 800110e:	d002      	beq.n	8001116 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001110:	2301      	movs	r3, #1
 8001112:	73fb      	strb	r3, [r7, #15]
 8001114:	e001      	b.n	800111a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001116:	2300      	movs	r3, #0
 8001118:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800111a:	7bfb      	ldrb	r3, [r7, #15]
}
 800111c:	4618      	mov	r0, r3
 800111e:	3714      	adds	r7, #20
 8001120:	46bd      	mov	sp, r7
 8001122:	bc80      	pop	{r7}
 8001124:	4770      	bx	lr

08001126 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001126:	b480      	push	{r7}
 8001128:	b083      	sub	sp, #12
 800112a:	af00      	add	r7, sp, #0
 800112c:	6078      	str	r0, [r7, #4]
 800112e:	460b      	mov	r3, r1
 8001130:	807b      	strh	r3, [r7, #2]
 8001132:	4613      	mov	r3, r2
 8001134:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001136:	787b      	ldrb	r3, [r7, #1]
 8001138:	2b00      	cmp	r3, #0
 800113a:	d003      	beq.n	8001144 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800113c:	887a      	ldrh	r2, [r7, #2]
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001142:	e003      	b.n	800114c <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001144:	887b      	ldrh	r3, [r7, #2]
 8001146:	041a      	lsls	r2, r3, #16
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	611a      	str	r2, [r3, #16]
}
 800114c:	bf00      	nop
 800114e:	370c      	adds	r7, #12
 8001150:	46bd      	mov	sp, r7
 8001152:	bc80      	pop	{r7}
 8001154:	4770      	bx	lr
	...

08001158 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001158:	b580      	push	{r7, lr}
 800115a:	b086      	sub	sp, #24
 800115c:	af00      	add	r7, sp, #0
 800115e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	2b00      	cmp	r3, #0
 8001164:	d101      	bne.n	800116a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001166:	2301      	movs	r3, #1
 8001168:	e272      	b.n	8001650 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	681b      	ldr	r3, [r3, #0]
 800116e:	f003 0301 	and.w	r3, r3, #1
 8001172:	2b00      	cmp	r3, #0
 8001174:	f000 8087 	beq.w	8001286 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001178:	4b92      	ldr	r3, [pc, #584]	; (80013c4 <HAL_RCC_OscConfig+0x26c>)
 800117a:	685b      	ldr	r3, [r3, #4]
 800117c:	f003 030c 	and.w	r3, r3, #12
 8001180:	2b04      	cmp	r3, #4
 8001182:	d00c      	beq.n	800119e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001184:	4b8f      	ldr	r3, [pc, #572]	; (80013c4 <HAL_RCC_OscConfig+0x26c>)
 8001186:	685b      	ldr	r3, [r3, #4]
 8001188:	f003 030c 	and.w	r3, r3, #12
 800118c:	2b08      	cmp	r3, #8
 800118e:	d112      	bne.n	80011b6 <HAL_RCC_OscConfig+0x5e>
 8001190:	4b8c      	ldr	r3, [pc, #560]	; (80013c4 <HAL_RCC_OscConfig+0x26c>)
 8001192:	685b      	ldr	r3, [r3, #4]
 8001194:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001198:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800119c:	d10b      	bne.n	80011b6 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800119e:	4b89      	ldr	r3, [pc, #548]	; (80013c4 <HAL_RCC_OscConfig+0x26c>)
 80011a0:	681b      	ldr	r3, [r3, #0]
 80011a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80011a6:	2b00      	cmp	r3, #0
 80011a8:	d06c      	beq.n	8001284 <HAL_RCC_OscConfig+0x12c>
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	685b      	ldr	r3, [r3, #4]
 80011ae:	2b00      	cmp	r3, #0
 80011b0:	d168      	bne.n	8001284 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80011b2:	2301      	movs	r3, #1
 80011b4:	e24c      	b.n	8001650 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	685b      	ldr	r3, [r3, #4]
 80011ba:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80011be:	d106      	bne.n	80011ce <HAL_RCC_OscConfig+0x76>
 80011c0:	4b80      	ldr	r3, [pc, #512]	; (80013c4 <HAL_RCC_OscConfig+0x26c>)
 80011c2:	681b      	ldr	r3, [r3, #0]
 80011c4:	4a7f      	ldr	r2, [pc, #508]	; (80013c4 <HAL_RCC_OscConfig+0x26c>)
 80011c6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80011ca:	6013      	str	r3, [r2, #0]
 80011cc:	e02e      	b.n	800122c <HAL_RCC_OscConfig+0xd4>
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	685b      	ldr	r3, [r3, #4]
 80011d2:	2b00      	cmp	r3, #0
 80011d4:	d10c      	bne.n	80011f0 <HAL_RCC_OscConfig+0x98>
 80011d6:	4b7b      	ldr	r3, [pc, #492]	; (80013c4 <HAL_RCC_OscConfig+0x26c>)
 80011d8:	681b      	ldr	r3, [r3, #0]
 80011da:	4a7a      	ldr	r2, [pc, #488]	; (80013c4 <HAL_RCC_OscConfig+0x26c>)
 80011dc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80011e0:	6013      	str	r3, [r2, #0]
 80011e2:	4b78      	ldr	r3, [pc, #480]	; (80013c4 <HAL_RCC_OscConfig+0x26c>)
 80011e4:	681b      	ldr	r3, [r3, #0]
 80011e6:	4a77      	ldr	r2, [pc, #476]	; (80013c4 <HAL_RCC_OscConfig+0x26c>)
 80011e8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80011ec:	6013      	str	r3, [r2, #0]
 80011ee:	e01d      	b.n	800122c <HAL_RCC_OscConfig+0xd4>
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	685b      	ldr	r3, [r3, #4]
 80011f4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80011f8:	d10c      	bne.n	8001214 <HAL_RCC_OscConfig+0xbc>
 80011fa:	4b72      	ldr	r3, [pc, #456]	; (80013c4 <HAL_RCC_OscConfig+0x26c>)
 80011fc:	681b      	ldr	r3, [r3, #0]
 80011fe:	4a71      	ldr	r2, [pc, #452]	; (80013c4 <HAL_RCC_OscConfig+0x26c>)
 8001200:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001204:	6013      	str	r3, [r2, #0]
 8001206:	4b6f      	ldr	r3, [pc, #444]	; (80013c4 <HAL_RCC_OscConfig+0x26c>)
 8001208:	681b      	ldr	r3, [r3, #0]
 800120a:	4a6e      	ldr	r2, [pc, #440]	; (80013c4 <HAL_RCC_OscConfig+0x26c>)
 800120c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001210:	6013      	str	r3, [r2, #0]
 8001212:	e00b      	b.n	800122c <HAL_RCC_OscConfig+0xd4>
 8001214:	4b6b      	ldr	r3, [pc, #428]	; (80013c4 <HAL_RCC_OscConfig+0x26c>)
 8001216:	681b      	ldr	r3, [r3, #0]
 8001218:	4a6a      	ldr	r2, [pc, #424]	; (80013c4 <HAL_RCC_OscConfig+0x26c>)
 800121a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800121e:	6013      	str	r3, [r2, #0]
 8001220:	4b68      	ldr	r3, [pc, #416]	; (80013c4 <HAL_RCC_OscConfig+0x26c>)
 8001222:	681b      	ldr	r3, [r3, #0]
 8001224:	4a67      	ldr	r2, [pc, #412]	; (80013c4 <HAL_RCC_OscConfig+0x26c>)
 8001226:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800122a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	685b      	ldr	r3, [r3, #4]
 8001230:	2b00      	cmp	r3, #0
 8001232:	d013      	beq.n	800125c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001234:	f7ff fc84 	bl	8000b40 <HAL_GetTick>
 8001238:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800123a:	e008      	b.n	800124e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800123c:	f7ff fc80 	bl	8000b40 <HAL_GetTick>
 8001240:	4602      	mov	r2, r0
 8001242:	693b      	ldr	r3, [r7, #16]
 8001244:	1ad3      	subs	r3, r2, r3
 8001246:	2b64      	cmp	r3, #100	; 0x64
 8001248:	d901      	bls.n	800124e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800124a:	2303      	movs	r3, #3
 800124c:	e200      	b.n	8001650 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800124e:	4b5d      	ldr	r3, [pc, #372]	; (80013c4 <HAL_RCC_OscConfig+0x26c>)
 8001250:	681b      	ldr	r3, [r3, #0]
 8001252:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001256:	2b00      	cmp	r3, #0
 8001258:	d0f0      	beq.n	800123c <HAL_RCC_OscConfig+0xe4>
 800125a:	e014      	b.n	8001286 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800125c:	f7ff fc70 	bl	8000b40 <HAL_GetTick>
 8001260:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001262:	e008      	b.n	8001276 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001264:	f7ff fc6c 	bl	8000b40 <HAL_GetTick>
 8001268:	4602      	mov	r2, r0
 800126a:	693b      	ldr	r3, [r7, #16]
 800126c:	1ad3      	subs	r3, r2, r3
 800126e:	2b64      	cmp	r3, #100	; 0x64
 8001270:	d901      	bls.n	8001276 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001272:	2303      	movs	r3, #3
 8001274:	e1ec      	b.n	8001650 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001276:	4b53      	ldr	r3, [pc, #332]	; (80013c4 <HAL_RCC_OscConfig+0x26c>)
 8001278:	681b      	ldr	r3, [r3, #0]
 800127a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800127e:	2b00      	cmp	r3, #0
 8001280:	d1f0      	bne.n	8001264 <HAL_RCC_OscConfig+0x10c>
 8001282:	e000      	b.n	8001286 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001284:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	681b      	ldr	r3, [r3, #0]
 800128a:	f003 0302 	and.w	r3, r3, #2
 800128e:	2b00      	cmp	r3, #0
 8001290:	d063      	beq.n	800135a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001292:	4b4c      	ldr	r3, [pc, #304]	; (80013c4 <HAL_RCC_OscConfig+0x26c>)
 8001294:	685b      	ldr	r3, [r3, #4]
 8001296:	f003 030c 	and.w	r3, r3, #12
 800129a:	2b00      	cmp	r3, #0
 800129c:	d00b      	beq.n	80012b6 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800129e:	4b49      	ldr	r3, [pc, #292]	; (80013c4 <HAL_RCC_OscConfig+0x26c>)
 80012a0:	685b      	ldr	r3, [r3, #4]
 80012a2:	f003 030c 	and.w	r3, r3, #12
 80012a6:	2b08      	cmp	r3, #8
 80012a8:	d11c      	bne.n	80012e4 <HAL_RCC_OscConfig+0x18c>
 80012aa:	4b46      	ldr	r3, [pc, #280]	; (80013c4 <HAL_RCC_OscConfig+0x26c>)
 80012ac:	685b      	ldr	r3, [r3, #4]
 80012ae:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80012b2:	2b00      	cmp	r3, #0
 80012b4:	d116      	bne.n	80012e4 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80012b6:	4b43      	ldr	r3, [pc, #268]	; (80013c4 <HAL_RCC_OscConfig+0x26c>)
 80012b8:	681b      	ldr	r3, [r3, #0]
 80012ba:	f003 0302 	and.w	r3, r3, #2
 80012be:	2b00      	cmp	r3, #0
 80012c0:	d005      	beq.n	80012ce <HAL_RCC_OscConfig+0x176>
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	691b      	ldr	r3, [r3, #16]
 80012c6:	2b01      	cmp	r3, #1
 80012c8:	d001      	beq.n	80012ce <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80012ca:	2301      	movs	r3, #1
 80012cc:	e1c0      	b.n	8001650 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80012ce:	4b3d      	ldr	r3, [pc, #244]	; (80013c4 <HAL_RCC_OscConfig+0x26c>)
 80012d0:	681b      	ldr	r3, [r3, #0]
 80012d2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	695b      	ldr	r3, [r3, #20]
 80012da:	00db      	lsls	r3, r3, #3
 80012dc:	4939      	ldr	r1, [pc, #228]	; (80013c4 <HAL_RCC_OscConfig+0x26c>)
 80012de:	4313      	orrs	r3, r2
 80012e0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80012e2:	e03a      	b.n	800135a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	691b      	ldr	r3, [r3, #16]
 80012e8:	2b00      	cmp	r3, #0
 80012ea:	d020      	beq.n	800132e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80012ec:	4b36      	ldr	r3, [pc, #216]	; (80013c8 <HAL_RCC_OscConfig+0x270>)
 80012ee:	2201      	movs	r2, #1
 80012f0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80012f2:	f7ff fc25 	bl	8000b40 <HAL_GetTick>
 80012f6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80012f8:	e008      	b.n	800130c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80012fa:	f7ff fc21 	bl	8000b40 <HAL_GetTick>
 80012fe:	4602      	mov	r2, r0
 8001300:	693b      	ldr	r3, [r7, #16]
 8001302:	1ad3      	subs	r3, r2, r3
 8001304:	2b02      	cmp	r3, #2
 8001306:	d901      	bls.n	800130c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001308:	2303      	movs	r3, #3
 800130a:	e1a1      	b.n	8001650 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800130c:	4b2d      	ldr	r3, [pc, #180]	; (80013c4 <HAL_RCC_OscConfig+0x26c>)
 800130e:	681b      	ldr	r3, [r3, #0]
 8001310:	f003 0302 	and.w	r3, r3, #2
 8001314:	2b00      	cmp	r3, #0
 8001316:	d0f0      	beq.n	80012fa <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001318:	4b2a      	ldr	r3, [pc, #168]	; (80013c4 <HAL_RCC_OscConfig+0x26c>)
 800131a:	681b      	ldr	r3, [r3, #0]
 800131c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	695b      	ldr	r3, [r3, #20]
 8001324:	00db      	lsls	r3, r3, #3
 8001326:	4927      	ldr	r1, [pc, #156]	; (80013c4 <HAL_RCC_OscConfig+0x26c>)
 8001328:	4313      	orrs	r3, r2
 800132a:	600b      	str	r3, [r1, #0]
 800132c:	e015      	b.n	800135a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800132e:	4b26      	ldr	r3, [pc, #152]	; (80013c8 <HAL_RCC_OscConfig+0x270>)
 8001330:	2200      	movs	r2, #0
 8001332:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001334:	f7ff fc04 	bl	8000b40 <HAL_GetTick>
 8001338:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800133a:	e008      	b.n	800134e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800133c:	f7ff fc00 	bl	8000b40 <HAL_GetTick>
 8001340:	4602      	mov	r2, r0
 8001342:	693b      	ldr	r3, [r7, #16]
 8001344:	1ad3      	subs	r3, r2, r3
 8001346:	2b02      	cmp	r3, #2
 8001348:	d901      	bls.n	800134e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800134a:	2303      	movs	r3, #3
 800134c:	e180      	b.n	8001650 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800134e:	4b1d      	ldr	r3, [pc, #116]	; (80013c4 <HAL_RCC_OscConfig+0x26c>)
 8001350:	681b      	ldr	r3, [r3, #0]
 8001352:	f003 0302 	and.w	r3, r3, #2
 8001356:	2b00      	cmp	r3, #0
 8001358:	d1f0      	bne.n	800133c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	681b      	ldr	r3, [r3, #0]
 800135e:	f003 0308 	and.w	r3, r3, #8
 8001362:	2b00      	cmp	r3, #0
 8001364:	d03a      	beq.n	80013dc <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	699b      	ldr	r3, [r3, #24]
 800136a:	2b00      	cmp	r3, #0
 800136c:	d019      	beq.n	80013a2 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800136e:	4b17      	ldr	r3, [pc, #92]	; (80013cc <HAL_RCC_OscConfig+0x274>)
 8001370:	2201      	movs	r2, #1
 8001372:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001374:	f7ff fbe4 	bl	8000b40 <HAL_GetTick>
 8001378:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800137a:	e008      	b.n	800138e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800137c:	f7ff fbe0 	bl	8000b40 <HAL_GetTick>
 8001380:	4602      	mov	r2, r0
 8001382:	693b      	ldr	r3, [r7, #16]
 8001384:	1ad3      	subs	r3, r2, r3
 8001386:	2b02      	cmp	r3, #2
 8001388:	d901      	bls.n	800138e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800138a:	2303      	movs	r3, #3
 800138c:	e160      	b.n	8001650 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800138e:	4b0d      	ldr	r3, [pc, #52]	; (80013c4 <HAL_RCC_OscConfig+0x26c>)
 8001390:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001392:	f003 0302 	and.w	r3, r3, #2
 8001396:	2b00      	cmp	r3, #0
 8001398:	d0f0      	beq.n	800137c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800139a:	2001      	movs	r0, #1
 800139c:	f000 face 	bl	800193c <RCC_Delay>
 80013a0:	e01c      	b.n	80013dc <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80013a2:	4b0a      	ldr	r3, [pc, #40]	; (80013cc <HAL_RCC_OscConfig+0x274>)
 80013a4:	2200      	movs	r2, #0
 80013a6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80013a8:	f7ff fbca 	bl	8000b40 <HAL_GetTick>
 80013ac:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80013ae:	e00f      	b.n	80013d0 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80013b0:	f7ff fbc6 	bl	8000b40 <HAL_GetTick>
 80013b4:	4602      	mov	r2, r0
 80013b6:	693b      	ldr	r3, [r7, #16]
 80013b8:	1ad3      	subs	r3, r2, r3
 80013ba:	2b02      	cmp	r3, #2
 80013bc:	d908      	bls.n	80013d0 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80013be:	2303      	movs	r3, #3
 80013c0:	e146      	b.n	8001650 <HAL_RCC_OscConfig+0x4f8>
 80013c2:	bf00      	nop
 80013c4:	40021000 	.word	0x40021000
 80013c8:	42420000 	.word	0x42420000
 80013cc:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80013d0:	4b92      	ldr	r3, [pc, #584]	; (800161c <HAL_RCC_OscConfig+0x4c4>)
 80013d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80013d4:	f003 0302 	and.w	r3, r3, #2
 80013d8:	2b00      	cmp	r3, #0
 80013da:	d1e9      	bne.n	80013b0 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	681b      	ldr	r3, [r3, #0]
 80013e0:	f003 0304 	and.w	r3, r3, #4
 80013e4:	2b00      	cmp	r3, #0
 80013e6:	f000 80a6 	beq.w	8001536 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80013ea:	2300      	movs	r3, #0
 80013ec:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80013ee:	4b8b      	ldr	r3, [pc, #556]	; (800161c <HAL_RCC_OscConfig+0x4c4>)
 80013f0:	69db      	ldr	r3, [r3, #28]
 80013f2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80013f6:	2b00      	cmp	r3, #0
 80013f8:	d10d      	bne.n	8001416 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80013fa:	4b88      	ldr	r3, [pc, #544]	; (800161c <HAL_RCC_OscConfig+0x4c4>)
 80013fc:	69db      	ldr	r3, [r3, #28]
 80013fe:	4a87      	ldr	r2, [pc, #540]	; (800161c <HAL_RCC_OscConfig+0x4c4>)
 8001400:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001404:	61d3      	str	r3, [r2, #28]
 8001406:	4b85      	ldr	r3, [pc, #532]	; (800161c <HAL_RCC_OscConfig+0x4c4>)
 8001408:	69db      	ldr	r3, [r3, #28]
 800140a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800140e:	60bb      	str	r3, [r7, #8]
 8001410:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001412:	2301      	movs	r3, #1
 8001414:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001416:	4b82      	ldr	r3, [pc, #520]	; (8001620 <HAL_RCC_OscConfig+0x4c8>)
 8001418:	681b      	ldr	r3, [r3, #0]
 800141a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800141e:	2b00      	cmp	r3, #0
 8001420:	d118      	bne.n	8001454 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001422:	4b7f      	ldr	r3, [pc, #508]	; (8001620 <HAL_RCC_OscConfig+0x4c8>)
 8001424:	681b      	ldr	r3, [r3, #0]
 8001426:	4a7e      	ldr	r2, [pc, #504]	; (8001620 <HAL_RCC_OscConfig+0x4c8>)
 8001428:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800142c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800142e:	f7ff fb87 	bl	8000b40 <HAL_GetTick>
 8001432:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001434:	e008      	b.n	8001448 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001436:	f7ff fb83 	bl	8000b40 <HAL_GetTick>
 800143a:	4602      	mov	r2, r0
 800143c:	693b      	ldr	r3, [r7, #16]
 800143e:	1ad3      	subs	r3, r2, r3
 8001440:	2b64      	cmp	r3, #100	; 0x64
 8001442:	d901      	bls.n	8001448 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001444:	2303      	movs	r3, #3
 8001446:	e103      	b.n	8001650 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001448:	4b75      	ldr	r3, [pc, #468]	; (8001620 <HAL_RCC_OscConfig+0x4c8>)
 800144a:	681b      	ldr	r3, [r3, #0]
 800144c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001450:	2b00      	cmp	r3, #0
 8001452:	d0f0      	beq.n	8001436 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	68db      	ldr	r3, [r3, #12]
 8001458:	2b01      	cmp	r3, #1
 800145a:	d106      	bne.n	800146a <HAL_RCC_OscConfig+0x312>
 800145c:	4b6f      	ldr	r3, [pc, #444]	; (800161c <HAL_RCC_OscConfig+0x4c4>)
 800145e:	6a1b      	ldr	r3, [r3, #32]
 8001460:	4a6e      	ldr	r2, [pc, #440]	; (800161c <HAL_RCC_OscConfig+0x4c4>)
 8001462:	f043 0301 	orr.w	r3, r3, #1
 8001466:	6213      	str	r3, [r2, #32]
 8001468:	e02d      	b.n	80014c6 <HAL_RCC_OscConfig+0x36e>
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	68db      	ldr	r3, [r3, #12]
 800146e:	2b00      	cmp	r3, #0
 8001470:	d10c      	bne.n	800148c <HAL_RCC_OscConfig+0x334>
 8001472:	4b6a      	ldr	r3, [pc, #424]	; (800161c <HAL_RCC_OscConfig+0x4c4>)
 8001474:	6a1b      	ldr	r3, [r3, #32]
 8001476:	4a69      	ldr	r2, [pc, #420]	; (800161c <HAL_RCC_OscConfig+0x4c4>)
 8001478:	f023 0301 	bic.w	r3, r3, #1
 800147c:	6213      	str	r3, [r2, #32]
 800147e:	4b67      	ldr	r3, [pc, #412]	; (800161c <HAL_RCC_OscConfig+0x4c4>)
 8001480:	6a1b      	ldr	r3, [r3, #32]
 8001482:	4a66      	ldr	r2, [pc, #408]	; (800161c <HAL_RCC_OscConfig+0x4c4>)
 8001484:	f023 0304 	bic.w	r3, r3, #4
 8001488:	6213      	str	r3, [r2, #32]
 800148a:	e01c      	b.n	80014c6 <HAL_RCC_OscConfig+0x36e>
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	68db      	ldr	r3, [r3, #12]
 8001490:	2b05      	cmp	r3, #5
 8001492:	d10c      	bne.n	80014ae <HAL_RCC_OscConfig+0x356>
 8001494:	4b61      	ldr	r3, [pc, #388]	; (800161c <HAL_RCC_OscConfig+0x4c4>)
 8001496:	6a1b      	ldr	r3, [r3, #32]
 8001498:	4a60      	ldr	r2, [pc, #384]	; (800161c <HAL_RCC_OscConfig+0x4c4>)
 800149a:	f043 0304 	orr.w	r3, r3, #4
 800149e:	6213      	str	r3, [r2, #32]
 80014a0:	4b5e      	ldr	r3, [pc, #376]	; (800161c <HAL_RCC_OscConfig+0x4c4>)
 80014a2:	6a1b      	ldr	r3, [r3, #32]
 80014a4:	4a5d      	ldr	r2, [pc, #372]	; (800161c <HAL_RCC_OscConfig+0x4c4>)
 80014a6:	f043 0301 	orr.w	r3, r3, #1
 80014aa:	6213      	str	r3, [r2, #32]
 80014ac:	e00b      	b.n	80014c6 <HAL_RCC_OscConfig+0x36e>
 80014ae:	4b5b      	ldr	r3, [pc, #364]	; (800161c <HAL_RCC_OscConfig+0x4c4>)
 80014b0:	6a1b      	ldr	r3, [r3, #32]
 80014b2:	4a5a      	ldr	r2, [pc, #360]	; (800161c <HAL_RCC_OscConfig+0x4c4>)
 80014b4:	f023 0301 	bic.w	r3, r3, #1
 80014b8:	6213      	str	r3, [r2, #32]
 80014ba:	4b58      	ldr	r3, [pc, #352]	; (800161c <HAL_RCC_OscConfig+0x4c4>)
 80014bc:	6a1b      	ldr	r3, [r3, #32]
 80014be:	4a57      	ldr	r2, [pc, #348]	; (800161c <HAL_RCC_OscConfig+0x4c4>)
 80014c0:	f023 0304 	bic.w	r3, r3, #4
 80014c4:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	68db      	ldr	r3, [r3, #12]
 80014ca:	2b00      	cmp	r3, #0
 80014cc:	d015      	beq.n	80014fa <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80014ce:	f7ff fb37 	bl	8000b40 <HAL_GetTick>
 80014d2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80014d4:	e00a      	b.n	80014ec <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80014d6:	f7ff fb33 	bl	8000b40 <HAL_GetTick>
 80014da:	4602      	mov	r2, r0
 80014dc:	693b      	ldr	r3, [r7, #16]
 80014de:	1ad3      	subs	r3, r2, r3
 80014e0:	f241 3288 	movw	r2, #5000	; 0x1388
 80014e4:	4293      	cmp	r3, r2
 80014e6:	d901      	bls.n	80014ec <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80014e8:	2303      	movs	r3, #3
 80014ea:	e0b1      	b.n	8001650 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80014ec:	4b4b      	ldr	r3, [pc, #300]	; (800161c <HAL_RCC_OscConfig+0x4c4>)
 80014ee:	6a1b      	ldr	r3, [r3, #32]
 80014f0:	f003 0302 	and.w	r3, r3, #2
 80014f4:	2b00      	cmp	r3, #0
 80014f6:	d0ee      	beq.n	80014d6 <HAL_RCC_OscConfig+0x37e>
 80014f8:	e014      	b.n	8001524 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80014fa:	f7ff fb21 	bl	8000b40 <HAL_GetTick>
 80014fe:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001500:	e00a      	b.n	8001518 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001502:	f7ff fb1d 	bl	8000b40 <HAL_GetTick>
 8001506:	4602      	mov	r2, r0
 8001508:	693b      	ldr	r3, [r7, #16]
 800150a:	1ad3      	subs	r3, r2, r3
 800150c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001510:	4293      	cmp	r3, r2
 8001512:	d901      	bls.n	8001518 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001514:	2303      	movs	r3, #3
 8001516:	e09b      	b.n	8001650 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001518:	4b40      	ldr	r3, [pc, #256]	; (800161c <HAL_RCC_OscConfig+0x4c4>)
 800151a:	6a1b      	ldr	r3, [r3, #32]
 800151c:	f003 0302 	and.w	r3, r3, #2
 8001520:	2b00      	cmp	r3, #0
 8001522:	d1ee      	bne.n	8001502 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001524:	7dfb      	ldrb	r3, [r7, #23]
 8001526:	2b01      	cmp	r3, #1
 8001528:	d105      	bne.n	8001536 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800152a:	4b3c      	ldr	r3, [pc, #240]	; (800161c <HAL_RCC_OscConfig+0x4c4>)
 800152c:	69db      	ldr	r3, [r3, #28]
 800152e:	4a3b      	ldr	r2, [pc, #236]	; (800161c <HAL_RCC_OscConfig+0x4c4>)
 8001530:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001534:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	69db      	ldr	r3, [r3, #28]
 800153a:	2b00      	cmp	r3, #0
 800153c:	f000 8087 	beq.w	800164e <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001540:	4b36      	ldr	r3, [pc, #216]	; (800161c <HAL_RCC_OscConfig+0x4c4>)
 8001542:	685b      	ldr	r3, [r3, #4]
 8001544:	f003 030c 	and.w	r3, r3, #12
 8001548:	2b08      	cmp	r3, #8
 800154a:	d061      	beq.n	8001610 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	69db      	ldr	r3, [r3, #28]
 8001550:	2b02      	cmp	r3, #2
 8001552:	d146      	bne.n	80015e2 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001554:	4b33      	ldr	r3, [pc, #204]	; (8001624 <HAL_RCC_OscConfig+0x4cc>)
 8001556:	2200      	movs	r2, #0
 8001558:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800155a:	f7ff faf1 	bl	8000b40 <HAL_GetTick>
 800155e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001560:	e008      	b.n	8001574 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001562:	f7ff faed 	bl	8000b40 <HAL_GetTick>
 8001566:	4602      	mov	r2, r0
 8001568:	693b      	ldr	r3, [r7, #16]
 800156a:	1ad3      	subs	r3, r2, r3
 800156c:	2b02      	cmp	r3, #2
 800156e:	d901      	bls.n	8001574 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001570:	2303      	movs	r3, #3
 8001572:	e06d      	b.n	8001650 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001574:	4b29      	ldr	r3, [pc, #164]	; (800161c <HAL_RCC_OscConfig+0x4c4>)
 8001576:	681b      	ldr	r3, [r3, #0]
 8001578:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800157c:	2b00      	cmp	r3, #0
 800157e:	d1f0      	bne.n	8001562 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	6a1b      	ldr	r3, [r3, #32]
 8001584:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001588:	d108      	bne.n	800159c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800158a:	4b24      	ldr	r3, [pc, #144]	; (800161c <HAL_RCC_OscConfig+0x4c4>)
 800158c:	685b      	ldr	r3, [r3, #4]
 800158e:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	689b      	ldr	r3, [r3, #8]
 8001596:	4921      	ldr	r1, [pc, #132]	; (800161c <HAL_RCC_OscConfig+0x4c4>)
 8001598:	4313      	orrs	r3, r2
 800159a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800159c:	4b1f      	ldr	r3, [pc, #124]	; (800161c <HAL_RCC_OscConfig+0x4c4>)
 800159e:	685b      	ldr	r3, [r3, #4]
 80015a0:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	6a19      	ldr	r1, [r3, #32]
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015ac:	430b      	orrs	r3, r1
 80015ae:	491b      	ldr	r1, [pc, #108]	; (800161c <HAL_RCC_OscConfig+0x4c4>)
 80015b0:	4313      	orrs	r3, r2
 80015b2:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80015b4:	4b1b      	ldr	r3, [pc, #108]	; (8001624 <HAL_RCC_OscConfig+0x4cc>)
 80015b6:	2201      	movs	r2, #1
 80015b8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80015ba:	f7ff fac1 	bl	8000b40 <HAL_GetTick>
 80015be:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80015c0:	e008      	b.n	80015d4 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80015c2:	f7ff fabd 	bl	8000b40 <HAL_GetTick>
 80015c6:	4602      	mov	r2, r0
 80015c8:	693b      	ldr	r3, [r7, #16]
 80015ca:	1ad3      	subs	r3, r2, r3
 80015cc:	2b02      	cmp	r3, #2
 80015ce:	d901      	bls.n	80015d4 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80015d0:	2303      	movs	r3, #3
 80015d2:	e03d      	b.n	8001650 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80015d4:	4b11      	ldr	r3, [pc, #68]	; (800161c <HAL_RCC_OscConfig+0x4c4>)
 80015d6:	681b      	ldr	r3, [r3, #0]
 80015d8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80015dc:	2b00      	cmp	r3, #0
 80015de:	d0f0      	beq.n	80015c2 <HAL_RCC_OscConfig+0x46a>
 80015e0:	e035      	b.n	800164e <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80015e2:	4b10      	ldr	r3, [pc, #64]	; (8001624 <HAL_RCC_OscConfig+0x4cc>)
 80015e4:	2200      	movs	r2, #0
 80015e6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80015e8:	f7ff faaa 	bl	8000b40 <HAL_GetTick>
 80015ec:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80015ee:	e008      	b.n	8001602 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80015f0:	f7ff faa6 	bl	8000b40 <HAL_GetTick>
 80015f4:	4602      	mov	r2, r0
 80015f6:	693b      	ldr	r3, [r7, #16]
 80015f8:	1ad3      	subs	r3, r2, r3
 80015fa:	2b02      	cmp	r3, #2
 80015fc:	d901      	bls.n	8001602 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80015fe:	2303      	movs	r3, #3
 8001600:	e026      	b.n	8001650 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001602:	4b06      	ldr	r3, [pc, #24]	; (800161c <HAL_RCC_OscConfig+0x4c4>)
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800160a:	2b00      	cmp	r3, #0
 800160c:	d1f0      	bne.n	80015f0 <HAL_RCC_OscConfig+0x498>
 800160e:	e01e      	b.n	800164e <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	69db      	ldr	r3, [r3, #28]
 8001614:	2b01      	cmp	r3, #1
 8001616:	d107      	bne.n	8001628 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8001618:	2301      	movs	r3, #1
 800161a:	e019      	b.n	8001650 <HAL_RCC_OscConfig+0x4f8>
 800161c:	40021000 	.word	0x40021000
 8001620:	40007000 	.word	0x40007000
 8001624:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001628:	4b0b      	ldr	r3, [pc, #44]	; (8001658 <HAL_RCC_OscConfig+0x500>)
 800162a:	685b      	ldr	r3, [r3, #4]
 800162c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800162e:	68fb      	ldr	r3, [r7, #12]
 8001630:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	6a1b      	ldr	r3, [r3, #32]
 8001638:	429a      	cmp	r2, r3
 800163a:	d106      	bne.n	800164a <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 800163c:	68fb      	ldr	r3, [r7, #12]
 800163e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001646:	429a      	cmp	r2, r3
 8001648:	d001      	beq.n	800164e <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800164a:	2301      	movs	r3, #1
 800164c:	e000      	b.n	8001650 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 800164e:	2300      	movs	r3, #0
}
 8001650:	4618      	mov	r0, r3
 8001652:	3718      	adds	r7, #24
 8001654:	46bd      	mov	sp, r7
 8001656:	bd80      	pop	{r7, pc}
 8001658:	40021000 	.word	0x40021000

0800165c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800165c:	b580      	push	{r7, lr}
 800165e:	b084      	sub	sp, #16
 8001660:	af00      	add	r7, sp, #0
 8001662:	6078      	str	r0, [r7, #4]
 8001664:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	2b00      	cmp	r3, #0
 800166a:	d101      	bne.n	8001670 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800166c:	2301      	movs	r3, #1
 800166e:	e0d0      	b.n	8001812 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001670:	4b6a      	ldr	r3, [pc, #424]	; (800181c <HAL_RCC_ClockConfig+0x1c0>)
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	f003 0307 	and.w	r3, r3, #7
 8001678:	683a      	ldr	r2, [r7, #0]
 800167a:	429a      	cmp	r2, r3
 800167c:	d910      	bls.n	80016a0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800167e:	4b67      	ldr	r3, [pc, #412]	; (800181c <HAL_RCC_ClockConfig+0x1c0>)
 8001680:	681b      	ldr	r3, [r3, #0]
 8001682:	f023 0207 	bic.w	r2, r3, #7
 8001686:	4965      	ldr	r1, [pc, #404]	; (800181c <HAL_RCC_ClockConfig+0x1c0>)
 8001688:	683b      	ldr	r3, [r7, #0]
 800168a:	4313      	orrs	r3, r2
 800168c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800168e:	4b63      	ldr	r3, [pc, #396]	; (800181c <HAL_RCC_ClockConfig+0x1c0>)
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	f003 0307 	and.w	r3, r3, #7
 8001696:	683a      	ldr	r2, [r7, #0]
 8001698:	429a      	cmp	r2, r3
 800169a:	d001      	beq.n	80016a0 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 800169c:	2301      	movs	r3, #1
 800169e:	e0b8      	b.n	8001812 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	681b      	ldr	r3, [r3, #0]
 80016a4:	f003 0302 	and.w	r3, r3, #2
 80016a8:	2b00      	cmp	r3, #0
 80016aa:	d020      	beq.n	80016ee <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	f003 0304 	and.w	r3, r3, #4
 80016b4:	2b00      	cmp	r3, #0
 80016b6:	d005      	beq.n	80016c4 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80016b8:	4b59      	ldr	r3, [pc, #356]	; (8001820 <HAL_RCC_ClockConfig+0x1c4>)
 80016ba:	685b      	ldr	r3, [r3, #4]
 80016bc:	4a58      	ldr	r2, [pc, #352]	; (8001820 <HAL_RCC_ClockConfig+0x1c4>)
 80016be:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80016c2:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	f003 0308 	and.w	r3, r3, #8
 80016cc:	2b00      	cmp	r3, #0
 80016ce:	d005      	beq.n	80016dc <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80016d0:	4b53      	ldr	r3, [pc, #332]	; (8001820 <HAL_RCC_ClockConfig+0x1c4>)
 80016d2:	685b      	ldr	r3, [r3, #4]
 80016d4:	4a52      	ldr	r2, [pc, #328]	; (8001820 <HAL_RCC_ClockConfig+0x1c4>)
 80016d6:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80016da:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80016dc:	4b50      	ldr	r3, [pc, #320]	; (8001820 <HAL_RCC_ClockConfig+0x1c4>)
 80016de:	685b      	ldr	r3, [r3, #4]
 80016e0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	689b      	ldr	r3, [r3, #8]
 80016e8:	494d      	ldr	r1, [pc, #308]	; (8001820 <HAL_RCC_ClockConfig+0x1c4>)
 80016ea:	4313      	orrs	r3, r2
 80016ec:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	f003 0301 	and.w	r3, r3, #1
 80016f6:	2b00      	cmp	r3, #0
 80016f8:	d040      	beq.n	800177c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	685b      	ldr	r3, [r3, #4]
 80016fe:	2b01      	cmp	r3, #1
 8001700:	d107      	bne.n	8001712 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001702:	4b47      	ldr	r3, [pc, #284]	; (8001820 <HAL_RCC_ClockConfig+0x1c4>)
 8001704:	681b      	ldr	r3, [r3, #0]
 8001706:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800170a:	2b00      	cmp	r3, #0
 800170c:	d115      	bne.n	800173a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800170e:	2301      	movs	r3, #1
 8001710:	e07f      	b.n	8001812 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	685b      	ldr	r3, [r3, #4]
 8001716:	2b02      	cmp	r3, #2
 8001718:	d107      	bne.n	800172a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800171a:	4b41      	ldr	r3, [pc, #260]	; (8001820 <HAL_RCC_ClockConfig+0x1c4>)
 800171c:	681b      	ldr	r3, [r3, #0]
 800171e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001722:	2b00      	cmp	r3, #0
 8001724:	d109      	bne.n	800173a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001726:	2301      	movs	r3, #1
 8001728:	e073      	b.n	8001812 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800172a:	4b3d      	ldr	r3, [pc, #244]	; (8001820 <HAL_RCC_ClockConfig+0x1c4>)
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	f003 0302 	and.w	r3, r3, #2
 8001732:	2b00      	cmp	r3, #0
 8001734:	d101      	bne.n	800173a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001736:	2301      	movs	r3, #1
 8001738:	e06b      	b.n	8001812 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800173a:	4b39      	ldr	r3, [pc, #228]	; (8001820 <HAL_RCC_ClockConfig+0x1c4>)
 800173c:	685b      	ldr	r3, [r3, #4]
 800173e:	f023 0203 	bic.w	r2, r3, #3
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	685b      	ldr	r3, [r3, #4]
 8001746:	4936      	ldr	r1, [pc, #216]	; (8001820 <HAL_RCC_ClockConfig+0x1c4>)
 8001748:	4313      	orrs	r3, r2
 800174a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800174c:	f7ff f9f8 	bl	8000b40 <HAL_GetTick>
 8001750:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001752:	e00a      	b.n	800176a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001754:	f7ff f9f4 	bl	8000b40 <HAL_GetTick>
 8001758:	4602      	mov	r2, r0
 800175a:	68fb      	ldr	r3, [r7, #12]
 800175c:	1ad3      	subs	r3, r2, r3
 800175e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001762:	4293      	cmp	r3, r2
 8001764:	d901      	bls.n	800176a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001766:	2303      	movs	r3, #3
 8001768:	e053      	b.n	8001812 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800176a:	4b2d      	ldr	r3, [pc, #180]	; (8001820 <HAL_RCC_ClockConfig+0x1c4>)
 800176c:	685b      	ldr	r3, [r3, #4]
 800176e:	f003 020c 	and.w	r2, r3, #12
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	685b      	ldr	r3, [r3, #4]
 8001776:	009b      	lsls	r3, r3, #2
 8001778:	429a      	cmp	r2, r3
 800177a:	d1eb      	bne.n	8001754 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800177c:	4b27      	ldr	r3, [pc, #156]	; (800181c <HAL_RCC_ClockConfig+0x1c0>)
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	f003 0307 	and.w	r3, r3, #7
 8001784:	683a      	ldr	r2, [r7, #0]
 8001786:	429a      	cmp	r2, r3
 8001788:	d210      	bcs.n	80017ac <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800178a:	4b24      	ldr	r3, [pc, #144]	; (800181c <HAL_RCC_ClockConfig+0x1c0>)
 800178c:	681b      	ldr	r3, [r3, #0]
 800178e:	f023 0207 	bic.w	r2, r3, #7
 8001792:	4922      	ldr	r1, [pc, #136]	; (800181c <HAL_RCC_ClockConfig+0x1c0>)
 8001794:	683b      	ldr	r3, [r7, #0]
 8001796:	4313      	orrs	r3, r2
 8001798:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800179a:	4b20      	ldr	r3, [pc, #128]	; (800181c <HAL_RCC_ClockConfig+0x1c0>)
 800179c:	681b      	ldr	r3, [r3, #0]
 800179e:	f003 0307 	and.w	r3, r3, #7
 80017a2:	683a      	ldr	r2, [r7, #0]
 80017a4:	429a      	cmp	r2, r3
 80017a6:	d001      	beq.n	80017ac <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80017a8:	2301      	movs	r3, #1
 80017aa:	e032      	b.n	8001812 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	f003 0304 	and.w	r3, r3, #4
 80017b4:	2b00      	cmp	r3, #0
 80017b6:	d008      	beq.n	80017ca <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80017b8:	4b19      	ldr	r3, [pc, #100]	; (8001820 <HAL_RCC_ClockConfig+0x1c4>)
 80017ba:	685b      	ldr	r3, [r3, #4]
 80017bc:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	68db      	ldr	r3, [r3, #12]
 80017c4:	4916      	ldr	r1, [pc, #88]	; (8001820 <HAL_RCC_ClockConfig+0x1c4>)
 80017c6:	4313      	orrs	r3, r2
 80017c8:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	681b      	ldr	r3, [r3, #0]
 80017ce:	f003 0308 	and.w	r3, r3, #8
 80017d2:	2b00      	cmp	r3, #0
 80017d4:	d009      	beq.n	80017ea <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80017d6:	4b12      	ldr	r3, [pc, #72]	; (8001820 <HAL_RCC_ClockConfig+0x1c4>)
 80017d8:	685b      	ldr	r3, [r3, #4]
 80017da:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	691b      	ldr	r3, [r3, #16]
 80017e2:	00db      	lsls	r3, r3, #3
 80017e4:	490e      	ldr	r1, [pc, #56]	; (8001820 <HAL_RCC_ClockConfig+0x1c4>)
 80017e6:	4313      	orrs	r3, r2
 80017e8:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80017ea:	f000 f821 	bl	8001830 <HAL_RCC_GetSysClockFreq>
 80017ee:	4602      	mov	r2, r0
 80017f0:	4b0b      	ldr	r3, [pc, #44]	; (8001820 <HAL_RCC_ClockConfig+0x1c4>)
 80017f2:	685b      	ldr	r3, [r3, #4]
 80017f4:	091b      	lsrs	r3, r3, #4
 80017f6:	f003 030f 	and.w	r3, r3, #15
 80017fa:	490a      	ldr	r1, [pc, #40]	; (8001824 <HAL_RCC_ClockConfig+0x1c8>)
 80017fc:	5ccb      	ldrb	r3, [r1, r3]
 80017fe:	fa22 f303 	lsr.w	r3, r2, r3
 8001802:	4a09      	ldr	r2, [pc, #36]	; (8001828 <HAL_RCC_ClockConfig+0x1cc>)
 8001804:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001806:	4b09      	ldr	r3, [pc, #36]	; (800182c <HAL_RCC_ClockConfig+0x1d0>)
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	4618      	mov	r0, r3
 800180c:	f7ff f956 	bl	8000abc <HAL_InitTick>

  return HAL_OK;
 8001810:	2300      	movs	r3, #0
}
 8001812:	4618      	mov	r0, r3
 8001814:	3710      	adds	r7, #16
 8001816:	46bd      	mov	sp, r7
 8001818:	bd80      	pop	{r7, pc}
 800181a:	bf00      	nop
 800181c:	40022000 	.word	0x40022000
 8001820:	40021000 	.word	0x40021000
 8001824:	08004690 	.word	0x08004690
 8001828:	20000004 	.word	0x20000004
 800182c:	20000008 	.word	0x20000008

08001830 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001830:	b480      	push	{r7}
 8001832:	b087      	sub	sp, #28
 8001834:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001836:	2300      	movs	r3, #0
 8001838:	60fb      	str	r3, [r7, #12]
 800183a:	2300      	movs	r3, #0
 800183c:	60bb      	str	r3, [r7, #8]
 800183e:	2300      	movs	r3, #0
 8001840:	617b      	str	r3, [r7, #20]
 8001842:	2300      	movs	r3, #0
 8001844:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8001846:	2300      	movs	r3, #0
 8001848:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800184a:	4b1e      	ldr	r3, [pc, #120]	; (80018c4 <HAL_RCC_GetSysClockFreq+0x94>)
 800184c:	685b      	ldr	r3, [r3, #4]
 800184e:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001850:	68fb      	ldr	r3, [r7, #12]
 8001852:	f003 030c 	and.w	r3, r3, #12
 8001856:	2b04      	cmp	r3, #4
 8001858:	d002      	beq.n	8001860 <HAL_RCC_GetSysClockFreq+0x30>
 800185a:	2b08      	cmp	r3, #8
 800185c:	d003      	beq.n	8001866 <HAL_RCC_GetSysClockFreq+0x36>
 800185e:	e027      	b.n	80018b0 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001860:	4b19      	ldr	r3, [pc, #100]	; (80018c8 <HAL_RCC_GetSysClockFreq+0x98>)
 8001862:	613b      	str	r3, [r7, #16]
      break;
 8001864:	e027      	b.n	80018b6 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001866:	68fb      	ldr	r3, [r7, #12]
 8001868:	0c9b      	lsrs	r3, r3, #18
 800186a:	f003 030f 	and.w	r3, r3, #15
 800186e:	4a17      	ldr	r2, [pc, #92]	; (80018cc <HAL_RCC_GetSysClockFreq+0x9c>)
 8001870:	5cd3      	ldrb	r3, [r2, r3]
 8001872:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001874:	68fb      	ldr	r3, [r7, #12]
 8001876:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800187a:	2b00      	cmp	r3, #0
 800187c:	d010      	beq.n	80018a0 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800187e:	4b11      	ldr	r3, [pc, #68]	; (80018c4 <HAL_RCC_GetSysClockFreq+0x94>)
 8001880:	685b      	ldr	r3, [r3, #4]
 8001882:	0c5b      	lsrs	r3, r3, #17
 8001884:	f003 0301 	and.w	r3, r3, #1
 8001888:	4a11      	ldr	r2, [pc, #68]	; (80018d0 <HAL_RCC_GetSysClockFreq+0xa0>)
 800188a:	5cd3      	ldrb	r3, [r2, r3]
 800188c:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	4a0d      	ldr	r2, [pc, #52]	; (80018c8 <HAL_RCC_GetSysClockFreq+0x98>)
 8001892:	fb03 f202 	mul.w	r2, r3, r2
 8001896:	68bb      	ldr	r3, [r7, #8]
 8001898:	fbb2 f3f3 	udiv	r3, r2, r3
 800189c:	617b      	str	r3, [r7, #20]
 800189e:	e004      	b.n	80018aa <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	4a0c      	ldr	r2, [pc, #48]	; (80018d4 <HAL_RCC_GetSysClockFreq+0xa4>)
 80018a4:	fb02 f303 	mul.w	r3, r2, r3
 80018a8:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 80018aa:	697b      	ldr	r3, [r7, #20]
 80018ac:	613b      	str	r3, [r7, #16]
      break;
 80018ae:	e002      	b.n	80018b6 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80018b0:	4b05      	ldr	r3, [pc, #20]	; (80018c8 <HAL_RCC_GetSysClockFreq+0x98>)
 80018b2:	613b      	str	r3, [r7, #16]
      break;
 80018b4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80018b6:	693b      	ldr	r3, [r7, #16]
}
 80018b8:	4618      	mov	r0, r3
 80018ba:	371c      	adds	r7, #28
 80018bc:	46bd      	mov	sp, r7
 80018be:	bc80      	pop	{r7}
 80018c0:	4770      	bx	lr
 80018c2:	bf00      	nop
 80018c4:	40021000 	.word	0x40021000
 80018c8:	007a1200 	.word	0x007a1200
 80018cc:	080046a8 	.word	0x080046a8
 80018d0:	080046b8 	.word	0x080046b8
 80018d4:	003d0900 	.word	0x003d0900

080018d8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80018d8:	b480      	push	{r7}
 80018da:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80018dc:	4b02      	ldr	r3, [pc, #8]	; (80018e8 <HAL_RCC_GetHCLKFreq+0x10>)
 80018de:	681b      	ldr	r3, [r3, #0]
}
 80018e0:	4618      	mov	r0, r3
 80018e2:	46bd      	mov	sp, r7
 80018e4:	bc80      	pop	{r7}
 80018e6:	4770      	bx	lr
 80018e8:	20000004 	.word	0x20000004

080018ec <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80018ec:	b580      	push	{r7, lr}
 80018ee:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80018f0:	f7ff fff2 	bl	80018d8 <HAL_RCC_GetHCLKFreq>
 80018f4:	4602      	mov	r2, r0
 80018f6:	4b05      	ldr	r3, [pc, #20]	; (800190c <HAL_RCC_GetPCLK1Freq+0x20>)
 80018f8:	685b      	ldr	r3, [r3, #4]
 80018fa:	0a1b      	lsrs	r3, r3, #8
 80018fc:	f003 0307 	and.w	r3, r3, #7
 8001900:	4903      	ldr	r1, [pc, #12]	; (8001910 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001902:	5ccb      	ldrb	r3, [r1, r3]
 8001904:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001908:	4618      	mov	r0, r3
 800190a:	bd80      	pop	{r7, pc}
 800190c:	40021000 	.word	0x40021000
 8001910:	080046a0 	.word	0x080046a0

08001914 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001914:	b580      	push	{r7, lr}
 8001916:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001918:	f7ff ffde 	bl	80018d8 <HAL_RCC_GetHCLKFreq>
 800191c:	4602      	mov	r2, r0
 800191e:	4b05      	ldr	r3, [pc, #20]	; (8001934 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001920:	685b      	ldr	r3, [r3, #4]
 8001922:	0adb      	lsrs	r3, r3, #11
 8001924:	f003 0307 	and.w	r3, r3, #7
 8001928:	4903      	ldr	r1, [pc, #12]	; (8001938 <HAL_RCC_GetPCLK2Freq+0x24>)
 800192a:	5ccb      	ldrb	r3, [r1, r3]
 800192c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001930:	4618      	mov	r0, r3
 8001932:	bd80      	pop	{r7, pc}
 8001934:	40021000 	.word	0x40021000
 8001938:	080046a0 	.word	0x080046a0

0800193c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 800193c:	b480      	push	{r7}
 800193e:	b085      	sub	sp, #20
 8001940:	af00      	add	r7, sp, #0
 8001942:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001944:	4b0a      	ldr	r3, [pc, #40]	; (8001970 <RCC_Delay+0x34>)
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	4a0a      	ldr	r2, [pc, #40]	; (8001974 <RCC_Delay+0x38>)
 800194a:	fba2 2303 	umull	r2, r3, r2, r3
 800194e:	0a5b      	lsrs	r3, r3, #9
 8001950:	687a      	ldr	r2, [r7, #4]
 8001952:	fb02 f303 	mul.w	r3, r2, r3
 8001956:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001958:	bf00      	nop
  }
  while (Delay --);
 800195a:	68fb      	ldr	r3, [r7, #12]
 800195c:	1e5a      	subs	r2, r3, #1
 800195e:	60fa      	str	r2, [r7, #12]
 8001960:	2b00      	cmp	r3, #0
 8001962:	d1f9      	bne.n	8001958 <RCC_Delay+0x1c>
}
 8001964:	bf00      	nop
 8001966:	bf00      	nop
 8001968:	3714      	adds	r7, #20
 800196a:	46bd      	mov	sp, r7
 800196c:	bc80      	pop	{r7}
 800196e:	4770      	bx	lr
 8001970:	20000004 	.word	0x20000004
 8001974:	10624dd3 	.word	0x10624dd3

08001978 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001978:	b580      	push	{r7, lr}
 800197a:	b082      	sub	sp, #8
 800197c:	af00      	add	r7, sp, #0
 800197e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	2b00      	cmp	r3, #0
 8001984:	d101      	bne.n	800198a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001986:	2301      	movs	r3, #1
 8001988:	e041      	b.n	8001a0e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001990:	b2db      	uxtb	r3, r3
 8001992:	2b00      	cmp	r3, #0
 8001994:	d106      	bne.n	80019a4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	2200      	movs	r2, #0
 800199a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800199e:	6878      	ldr	r0, [r7, #4]
 80019a0:	f7fe fef8 	bl	8000794 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	2202      	movs	r2, #2
 80019a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	681a      	ldr	r2, [r3, #0]
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	3304      	adds	r3, #4
 80019b4:	4619      	mov	r1, r3
 80019b6:	4610      	mov	r0, r2
 80019b8:	f000 f976 	bl	8001ca8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	2201      	movs	r2, #1
 80019c0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	2201      	movs	r2, #1
 80019c8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	2201      	movs	r2, #1
 80019d0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	2201      	movs	r2, #1
 80019d8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	2201      	movs	r2, #1
 80019e0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	2201      	movs	r2, #1
 80019e8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	2201      	movs	r2, #1
 80019f0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	2201      	movs	r2, #1
 80019f8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	2201      	movs	r2, #1
 8001a00:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	2201      	movs	r2, #1
 8001a08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001a0c:	2300      	movs	r3, #0
}
 8001a0e:	4618      	mov	r0, r3
 8001a10:	3708      	adds	r7, #8
 8001a12:	46bd      	mov	sp, r7
 8001a14:	bd80      	pop	{r7, pc}
	...

08001a18 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001a18:	b480      	push	{r7}
 8001a1a:	b085      	sub	sp, #20
 8001a1c:	af00      	add	r7, sp, #0
 8001a1e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001a26:	b2db      	uxtb	r3, r3
 8001a28:	2b01      	cmp	r3, #1
 8001a2a:	d001      	beq.n	8001a30 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001a2c:	2301      	movs	r3, #1
 8001a2e:	e03a      	b.n	8001aa6 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	2202      	movs	r2, #2
 8001a34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	68da      	ldr	r2, [r3, #12]
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	f042 0201 	orr.w	r2, r2, #1
 8001a46:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	4a18      	ldr	r2, [pc, #96]	; (8001ab0 <HAL_TIM_Base_Start_IT+0x98>)
 8001a4e:	4293      	cmp	r3, r2
 8001a50:	d00e      	beq.n	8001a70 <HAL_TIM_Base_Start_IT+0x58>
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001a5a:	d009      	beq.n	8001a70 <HAL_TIM_Base_Start_IT+0x58>
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	4a14      	ldr	r2, [pc, #80]	; (8001ab4 <HAL_TIM_Base_Start_IT+0x9c>)
 8001a62:	4293      	cmp	r3, r2
 8001a64:	d004      	beq.n	8001a70 <HAL_TIM_Base_Start_IT+0x58>
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	4a13      	ldr	r2, [pc, #76]	; (8001ab8 <HAL_TIM_Base_Start_IT+0xa0>)
 8001a6c:	4293      	cmp	r3, r2
 8001a6e:	d111      	bne.n	8001a94 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	689b      	ldr	r3, [r3, #8]
 8001a76:	f003 0307 	and.w	r3, r3, #7
 8001a7a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001a7c:	68fb      	ldr	r3, [r7, #12]
 8001a7e:	2b06      	cmp	r3, #6
 8001a80:	d010      	beq.n	8001aa4 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	681a      	ldr	r2, [r3, #0]
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	f042 0201 	orr.w	r2, r2, #1
 8001a90:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001a92:	e007      	b.n	8001aa4 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	681a      	ldr	r2, [r3, #0]
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	f042 0201 	orr.w	r2, r2, #1
 8001aa2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001aa4:	2300      	movs	r3, #0
}
 8001aa6:	4618      	mov	r0, r3
 8001aa8:	3714      	adds	r7, #20
 8001aaa:	46bd      	mov	sp, r7
 8001aac:	bc80      	pop	{r7}
 8001aae:	4770      	bx	lr
 8001ab0:	40012c00 	.word	0x40012c00
 8001ab4:	40000400 	.word	0x40000400
 8001ab8:	40000800 	.word	0x40000800

08001abc <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8001abc:	b480      	push	{r7}
 8001abe:	b083      	sub	sp, #12
 8001ac0:	af00      	add	r7, sp, #0
 8001ac2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	68da      	ldr	r2, [r3, #12]
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	f022 0201 	bic.w	r2, r2, #1
 8001ad2:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	6a1a      	ldr	r2, [r3, #32]
 8001ada:	f241 1311 	movw	r3, #4369	; 0x1111
 8001ade:	4013      	ands	r3, r2
 8001ae0:	2b00      	cmp	r3, #0
 8001ae2:	d10f      	bne.n	8001b04 <HAL_TIM_Base_Stop_IT+0x48>
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	6a1a      	ldr	r2, [r3, #32]
 8001aea:	f240 4344 	movw	r3, #1092	; 0x444
 8001aee:	4013      	ands	r3, r2
 8001af0:	2b00      	cmp	r3, #0
 8001af2:	d107      	bne.n	8001b04 <HAL_TIM_Base_Stop_IT+0x48>
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	681a      	ldr	r2, [r3, #0]
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	f022 0201 	bic.w	r2, r2, #1
 8001b02:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	2201      	movs	r2, #1
 8001b08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8001b0c:	2300      	movs	r3, #0
}
 8001b0e:	4618      	mov	r0, r3
 8001b10:	370c      	adds	r7, #12
 8001b12:	46bd      	mov	sp, r7
 8001b14:	bc80      	pop	{r7}
 8001b16:	4770      	bx	lr

08001b18 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8001b18:	b580      	push	{r7, lr}
 8001b1a:	b084      	sub	sp, #16
 8001b1c:	af00      	add	r7, sp, #0
 8001b1e:	6078      	str	r0, [r7, #4]
 8001b20:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001b22:	2300      	movs	r3, #0
 8001b24:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001b2c:	2b01      	cmp	r3, #1
 8001b2e:	d101      	bne.n	8001b34 <HAL_TIM_ConfigClockSource+0x1c>
 8001b30:	2302      	movs	r3, #2
 8001b32:	e0b4      	b.n	8001c9e <HAL_TIM_ConfigClockSource+0x186>
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	2201      	movs	r2, #1
 8001b38:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	2202      	movs	r2, #2
 8001b40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	689b      	ldr	r3, [r3, #8]
 8001b4a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8001b4c:	68bb      	ldr	r3, [r7, #8]
 8001b4e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8001b52:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8001b54:	68bb      	ldr	r3, [r7, #8]
 8001b56:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8001b5a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	68ba      	ldr	r2, [r7, #8]
 8001b62:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8001b64:	683b      	ldr	r3, [r7, #0]
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001b6c:	d03e      	beq.n	8001bec <HAL_TIM_ConfigClockSource+0xd4>
 8001b6e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001b72:	f200 8087 	bhi.w	8001c84 <HAL_TIM_ConfigClockSource+0x16c>
 8001b76:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001b7a:	f000 8086 	beq.w	8001c8a <HAL_TIM_ConfigClockSource+0x172>
 8001b7e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001b82:	d87f      	bhi.n	8001c84 <HAL_TIM_ConfigClockSource+0x16c>
 8001b84:	2b70      	cmp	r3, #112	; 0x70
 8001b86:	d01a      	beq.n	8001bbe <HAL_TIM_ConfigClockSource+0xa6>
 8001b88:	2b70      	cmp	r3, #112	; 0x70
 8001b8a:	d87b      	bhi.n	8001c84 <HAL_TIM_ConfigClockSource+0x16c>
 8001b8c:	2b60      	cmp	r3, #96	; 0x60
 8001b8e:	d050      	beq.n	8001c32 <HAL_TIM_ConfigClockSource+0x11a>
 8001b90:	2b60      	cmp	r3, #96	; 0x60
 8001b92:	d877      	bhi.n	8001c84 <HAL_TIM_ConfigClockSource+0x16c>
 8001b94:	2b50      	cmp	r3, #80	; 0x50
 8001b96:	d03c      	beq.n	8001c12 <HAL_TIM_ConfigClockSource+0xfa>
 8001b98:	2b50      	cmp	r3, #80	; 0x50
 8001b9a:	d873      	bhi.n	8001c84 <HAL_TIM_ConfigClockSource+0x16c>
 8001b9c:	2b40      	cmp	r3, #64	; 0x40
 8001b9e:	d058      	beq.n	8001c52 <HAL_TIM_ConfigClockSource+0x13a>
 8001ba0:	2b40      	cmp	r3, #64	; 0x40
 8001ba2:	d86f      	bhi.n	8001c84 <HAL_TIM_ConfigClockSource+0x16c>
 8001ba4:	2b30      	cmp	r3, #48	; 0x30
 8001ba6:	d064      	beq.n	8001c72 <HAL_TIM_ConfigClockSource+0x15a>
 8001ba8:	2b30      	cmp	r3, #48	; 0x30
 8001baa:	d86b      	bhi.n	8001c84 <HAL_TIM_ConfigClockSource+0x16c>
 8001bac:	2b20      	cmp	r3, #32
 8001bae:	d060      	beq.n	8001c72 <HAL_TIM_ConfigClockSource+0x15a>
 8001bb0:	2b20      	cmp	r3, #32
 8001bb2:	d867      	bhi.n	8001c84 <HAL_TIM_ConfigClockSource+0x16c>
 8001bb4:	2b00      	cmp	r3, #0
 8001bb6:	d05c      	beq.n	8001c72 <HAL_TIM_ConfigClockSource+0x15a>
 8001bb8:	2b10      	cmp	r3, #16
 8001bba:	d05a      	beq.n	8001c72 <HAL_TIM_ConfigClockSource+0x15a>
 8001bbc:	e062      	b.n	8001c84 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8001bc2:	683b      	ldr	r3, [r7, #0]
 8001bc4:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8001bc6:	683b      	ldr	r3, [r7, #0]
 8001bc8:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8001bca:	683b      	ldr	r3, [r7, #0]
 8001bcc:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8001bce:	f000 f944 	bl	8001e5a <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	689b      	ldr	r3, [r3, #8]
 8001bd8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8001bda:	68bb      	ldr	r3, [r7, #8]
 8001bdc:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8001be0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	68ba      	ldr	r2, [r7, #8]
 8001be8:	609a      	str	r2, [r3, #8]
      break;
 8001bea:	e04f      	b.n	8001c8c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8001bf0:	683b      	ldr	r3, [r7, #0]
 8001bf2:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8001bf4:	683b      	ldr	r3, [r7, #0]
 8001bf6:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8001bf8:	683b      	ldr	r3, [r7, #0]
 8001bfa:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8001bfc:	f000 f92d 	bl	8001e5a <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	689a      	ldr	r2, [r3, #8]
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001c0e:	609a      	str	r2, [r3, #8]
      break;
 8001c10:	e03c      	b.n	8001c8c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8001c16:	683b      	ldr	r3, [r7, #0]
 8001c18:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8001c1a:	683b      	ldr	r3, [r7, #0]
 8001c1c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8001c1e:	461a      	mov	r2, r3
 8001c20:	f000 f8a4 	bl	8001d6c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	2150      	movs	r1, #80	; 0x50
 8001c2a:	4618      	mov	r0, r3
 8001c2c:	f000 f8fb 	bl	8001e26 <TIM_ITRx_SetConfig>
      break;
 8001c30:	e02c      	b.n	8001c8c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8001c36:	683b      	ldr	r3, [r7, #0]
 8001c38:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8001c3a:	683b      	ldr	r3, [r7, #0]
 8001c3c:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8001c3e:	461a      	mov	r2, r3
 8001c40:	f000 f8c2 	bl	8001dc8 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	2160      	movs	r1, #96	; 0x60
 8001c4a:	4618      	mov	r0, r3
 8001c4c:	f000 f8eb 	bl	8001e26 <TIM_ITRx_SetConfig>
      break;
 8001c50:	e01c      	b.n	8001c8c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8001c56:	683b      	ldr	r3, [r7, #0]
 8001c58:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8001c5a:	683b      	ldr	r3, [r7, #0]
 8001c5c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8001c5e:	461a      	mov	r2, r3
 8001c60:	f000 f884 	bl	8001d6c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	2140      	movs	r1, #64	; 0x40
 8001c6a:	4618      	mov	r0, r3
 8001c6c:	f000 f8db 	bl	8001e26 <TIM_ITRx_SetConfig>
      break;
 8001c70:	e00c      	b.n	8001c8c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	681a      	ldr	r2, [r3, #0]
 8001c76:	683b      	ldr	r3, [r7, #0]
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	4619      	mov	r1, r3
 8001c7c:	4610      	mov	r0, r2
 8001c7e:	f000 f8d2 	bl	8001e26 <TIM_ITRx_SetConfig>
      break;
 8001c82:	e003      	b.n	8001c8c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8001c84:	2301      	movs	r3, #1
 8001c86:	73fb      	strb	r3, [r7, #15]
      break;
 8001c88:	e000      	b.n	8001c8c <HAL_TIM_ConfigClockSource+0x174>
      break;
 8001c8a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	2201      	movs	r2, #1
 8001c90:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	2200      	movs	r2, #0
 8001c98:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8001c9c:	7bfb      	ldrb	r3, [r7, #15]
}
 8001c9e:	4618      	mov	r0, r3
 8001ca0:	3710      	adds	r7, #16
 8001ca2:	46bd      	mov	sp, r7
 8001ca4:	bd80      	pop	{r7, pc}
	...

08001ca8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8001ca8:	b480      	push	{r7}
 8001caa:	b085      	sub	sp, #20
 8001cac:	af00      	add	r7, sp, #0
 8001cae:	6078      	str	r0, [r7, #4]
 8001cb0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	4a29      	ldr	r2, [pc, #164]	; (8001d60 <TIM_Base_SetConfig+0xb8>)
 8001cbc:	4293      	cmp	r3, r2
 8001cbe:	d00b      	beq.n	8001cd8 <TIM_Base_SetConfig+0x30>
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001cc6:	d007      	beq.n	8001cd8 <TIM_Base_SetConfig+0x30>
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	4a26      	ldr	r2, [pc, #152]	; (8001d64 <TIM_Base_SetConfig+0xbc>)
 8001ccc:	4293      	cmp	r3, r2
 8001cce:	d003      	beq.n	8001cd8 <TIM_Base_SetConfig+0x30>
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	4a25      	ldr	r2, [pc, #148]	; (8001d68 <TIM_Base_SetConfig+0xc0>)
 8001cd4:	4293      	cmp	r3, r2
 8001cd6:	d108      	bne.n	8001cea <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001cd8:	68fb      	ldr	r3, [r7, #12]
 8001cda:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001cde:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001ce0:	683b      	ldr	r3, [r7, #0]
 8001ce2:	685b      	ldr	r3, [r3, #4]
 8001ce4:	68fa      	ldr	r2, [r7, #12]
 8001ce6:	4313      	orrs	r3, r2
 8001ce8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	4a1c      	ldr	r2, [pc, #112]	; (8001d60 <TIM_Base_SetConfig+0xb8>)
 8001cee:	4293      	cmp	r3, r2
 8001cf0:	d00b      	beq.n	8001d0a <TIM_Base_SetConfig+0x62>
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001cf8:	d007      	beq.n	8001d0a <TIM_Base_SetConfig+0x62>
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	4a19      	ldr	r2, [pc, #100]	; (8001d64 <TIM_Base_SetConfig+0xbc>)
 8001cfe:	4293      	cmp	r3, r2
 8001d00:	d003      	beq.n	8001d0a <TIM_Base_SetConfig+0x62>
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	4a18      	ldr	r2, [pc, #96]	; (8001d68 <TIM_Base_SetConfig+0xc0>)
 8001d06:	4293      	cmp	r3, r2
 8001d08:	d108      	bne.n	8001d1c <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8001d0a:	68fb      	ldr	r3, [r7, #12]
 8001d0c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001d10:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001d12:	683b      	ldr	r3, [r7, #0]
 8001d14:	68db      	ldr	r3, [r3, #12]
 8001d16:	68fa      	ldr	r2, [r7, #12]
 8001d18:	4313      	orrs	r3, r2
 8001d1a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001d1c:	68fb      	ldr	r3, [r7, #12]
 8001d1e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8001d22:	683b      	ldr	r3, [r7, #0]
 8001d24:	695b      	ldr	r3, [r3, #20]
 8001d26:	4313      	orrs	r3, r2
 8001d28:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	68fa      	ldr	r2, [r7, #12]
 8001d2e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001d30:	683b      	ldr	r3, [r7, #0]
 8001d32:	689a      	ldr	r2, [r3, #8]
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8001d38:	683b      	ldr	r3, [r7, #0]
 8001d3a:	681a      	ldr	r2, [r3, #0]
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	4a07      	ldr	r2, [pc, #28]	; (8001d60 <TIM_Base_SetConfig+0xb8>)
 8001d44:	4293      	cmp	r3, r2
 8001d46:	d103      	bne.n	8001d50 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8001d48:	683b      	ldr	r3, [r7, #0]
 8001d4a:	691a      	ldr	r2, [r3, #16]
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	2201      	movs	r2, #1
 8001d54:	615a      	str	r2, [r3, #20]
}
 8001d56:	bf00      	nop
 8001d58:	3714      	adds	r7, #20
 8001d5a:	46bd      	mov	sp, r7
 8001d5c:	bc80      	pop	{r7}
 8001d5e:	4770      	bx	lr
 8001d60:	40012c00 	.word	0x40012c00
 8001d64:	40000400 	.word	0x40000400
 8001d68:	40000800 	.word	0x40000800

08001d6c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8001d6c:	b480      	push	{r7}
 8001d6e:	b087      	sub	sp, #28
 8001d70:	af00      	add	r7, sp, #0
 8001d72:	60f8      	str	r0, [r7, #12]
 8001d74:	60b9      	str	r1, [r7, #8]
 8001d76:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8001d78:	68fb      	ldr	r3, [r7, #12]
 8001d7a:	6a1b      	ldr	r3, [r3, #32]
 8001d7c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8001d7e:	68fb      	ldr	r3, [r7, #12]
 8001d80:	6a1b      	ldr	r3, [r3, #32]
 8001d82:	f023 0201 	bic.w	r2, r3, #1
 8001d86:	68fb      	ldr	r3, [r7, #12]
 8001d88:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8001d8a:	68fb      	ldr	r3, [r7, #12]
 8001d8c:	699b      	ldr	r3, [r3, #24]
 8001d8e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8001d90:	693b      	ldr	r3, [r7, #16]
 8001d92:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001d96:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	011b      	lsls	r3, r3, #4
 8001d9c:	693a      	ldr	r2, [r7, #16]
 8001d9e:	4313      	orrs	r3, r2
 8001da0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8001da2:	697b      	ldr	r3, [r7, #20]
 8001da4:	f023 030a 	bic.w	r3, r3, #10
 8001da8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8001daa:	697a      	ldr	r2, [r7, #20]
 8001dac:	68bb      	ldr	r3, [r7, #8]
 8001dae:	4313      	orrs	r3, r2
 8001db0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8001db2:	68fb      	ldr	r3, [r7, #12]
 8001db4:	693a      	ldr	r2, [r7, #16]
 8001db6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8001db8:	68fb      	ldr	r3, [r7, #12]
 8001dba:	697a      	ldr	r2, [r7, #20]
 8001dbc:	621a      	str	r2, [r3, #32]
}
 8001dbe:	bf00      	nop
 8001dc0:	371c      	adds	r7, #28
 8001dc2:	46bd      	mov	sp, r7
 8001dc4:	bc80      	pop	{r7}
 8001dc6:	4770      	bx	lr

08001dc8 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8001dc8:	b480      	push	{r7}
 8001dca:	b087      	sub	sp, #28
 8001dcc:	af00      	add	r7, sp, #0
 8001dce:	60f8      	str	r0, [r7, #12]
 8001dd0:	60b9      	str	r1, [r7, #8]
 8001dd2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8001dd4:	68fb      	ldr	r3, [r7, #12]
 8001dd6:	6a1b      	ldr	r3, [r3, #32]
 8001dd8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8001dda:	68fb      	ldr	r3, [r7, #12]
 8001ddc:	6a1b      	ldr	r3, [r3, #32]
 8001dde:	f023 0210 	bic.w	r2, r3, #16
 8001de2:	68fb      	ldr	r3, [r7, #12]
 8001de4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8001de6:	68fb      	ldr	r3, [r7, #12]
 8001de8:	699b      	ldr	r3, [r3, #24]
 8001dea:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8001dec:	693b      	ldr	r3, [r7, #16]
 8001dee:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8001df2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	031b      	lsls	r3, r3, #12
 8001df8:	693a      	ldr	r2, [r7, #16]
 8001dfa:	4313      	orrs	r3, r2
 8001dfc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8001dfe:	697b      	ldr	r3, [r7, #20]
 8001e00:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8001e04:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8001e06:	68bb      	ldr	r3, [r7, #8]
 8001e08:	011b      	lsls	r3, r3, #4
 8001e0a:	697a      	ldr	r2, [r7, #20]
 8001e0c:	4313      	orrs	r3, r2
 8001e0e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8001e10:	68fb      	ldr	r3, [r7, #12]
 8001e12:	693a      	ldr	r2, [r7, #16]
 8001e14:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8001e16:	68fb      	ldr	r3, [r7, #12]
 8001e18:	697a      	ldr	r2, [r7, #20]
 8001e1a:	621a      	str	r2, [r3, #32]
}
 8001e1c:	bf00      	nop
 8001e1e:	371c      	adds	r7, #28
 8001e20:	46bd      	mov	sp, r7
 8001e22:	bc80      	pop	{r7}
 8001e24:	4770      	bx	lr

08001e26 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8001e26:	b480      	push	{r7}
 8001e28:	b085      	sub	sp, #20
 8001e2a:	af00      	add	r7, sp, #0
 8001e2c:	6078      	str	r0, [r7, #4]
 8001e2e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	689b      	ldr	r3, [r3, #8]
 8001e34:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8001e36:	68fb      	ldr	r3, [r7, #12]
 8001e38:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001e3c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8001e3e:	683a      	ldr	r2, [r7, #0]
 8001e40:	68fb      	ldr	r3, [r7, #12]
 8001e42:	4313      	orrs	r3, r2
 8001e44:	f043 0307 	orr.w	r3, r3, #7
 8001e48:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	68fa      	ldr	r2, [r7, #12]
 8001e4e:	609a      	str	r2, [r3, #8]
}
 8001e50:	bf00      	nop
 8001e52:	3714      	adds	r7, #20
 8001e54:	46bd      	mov	sp, r7
 8001e56:	bc80      	pop	{r7}
 8001e58:	4770      	bx	lr

08001e5a <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8001e5a:	b480      	push	{r7}
 8001e5c:	b087      	sub	sp, #28
 8001e5e:	af00      	add	r7, sp, #0
 8001e60:	60f8      	str	r0, [r7, #12]
 8001e62:	60b9      	str	r1, [r7, #8]
 8001e64:	607a      	str	r2, [r7, #4]
 8001e66:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8001e68:	68fb      	ldr	r3, [r7, #12]
 8001e6a:	689b      	ldr	r3, [r3, #8]
 8001e6c:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8001e6e:	697b      	ldr	r3, [r7, #20]
 8001e70:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8001e74:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8001e76:	683b      	ldr	r3, [r7, #0]
 8001e78:	021a      	lsls	r2, r3, #8
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	431a      	orrs	r2, r3
 8001e7e:	68bb      	ldr	r3, [r7, #8]
 8001e80:	4313      	orrs	r3, r2
 8001e82:	697a      	ldr	r2, [r7, #20]
 8001e84:	4313      	orrs	r3, r2
 8001e86:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8001e88:	68fb      	ldr	r3, [r7, #12]
 8001e8a:	697a      	ldr	r2, [r7, #20]
 8001e8c:	609a      	str	r2, [r3, #8]
}
 8001e8e:	bf00      	nop
 8001e90:	371c      	adds	r7, #28
 8001e92:	46bd      	mov	sp, r7
 8001e94:	bc80      	pop	{r7}
 8001e96:	4770      	bx	lr

08001e98 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8001e98:	b480      	push	{r7}
 8001e9a:	b085      	sub	sp, #20
 8001e9c:	af00      	add	r7, sp, #0
 8001e9e:	6078      	str	r0, [r7, #4]
 8001ea0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001ea8:	2b01      	cmp	r3, #1
 8001eaa:	d101      	bne.n	8001eb0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8001eac:	2302      	movs	r3, #2
 8001eae:	e046      	b.n	8001f3e <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	2201      	movs	r2, #1
 8001eb4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	2202      	movs	r2, #2
 8001ebc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	685b      	ldr	r3, [r3, #4]
 8001ec6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	689b      	ldr	r3, [r3, #8]
 8001ece:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8001ed0:	68fb      	ldr	r3, [r7, #12]
 8001ed2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001ed6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8001ed8:	683b      	ldr	r3, [r7, #0]
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	68fa      	ldr	r2, [r7, #12]
 8001ede:	4313      	orrs	r3, r2
 8001ee0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	68fa      	ldr	r2, [r7, #12]
 8001ee8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	4a16      	ldr	r2, [pc, #88]	; (8001f48 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8001ef0:	4293      	cmp	r3, r2
 8001ef2:	d00e      	beq.n	8001f12 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001efc:	d009      	beq.n	8001f12 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	4a12      	ldr	r2, [pc, #72]	; (8001f4c <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8001f04:	4293      	cmp	r3, r2
 8001f06:	d004      	beq.n	8001f12 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	4a10      	ldr	r2, [pc, #64]	; (8001f50 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8001f0e:	4293      	cmp	r3, r2
 8001f10:	d10c      	bne.n	8001f2c <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8001f12:	68bb      	ldr	r3, [r7, #8]
 8001f14:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001f18:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8001f1a:	683b      	ldr	r3, [r7, #0]
 8001f1c:	685b      	ldr	r3, [r3, #4]
 8001f1e:	68ba      	ldr	r2, [r7, #8]
 8001f20:	4313      	orrs	r3, r2
 8001f22:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	68ba      	ldr	r2, [r7, #8]
 8001f2a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	2201      	movs	r2, #1
 8001f30:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	2200      	movs	r2, #0
 8001f38:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8001f3c:	2300      	movs	r3, #0
}
 8001f3e:	4618      	mov	r0, r3
 8001f40:	3714      	adds	r7, #20
 8001f42:	46bd      	mov	sp, r7
 8001f44:	bc80      	pop	{r7}
 8001f46:	4770      	bx	lr
 8001f48:	40012c00 	.word	0x40012c00
 8001f4c:	40000400 	.word	0x40000400
 8001f50:	40000800 	.word	0x40000800

08001f54 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001f54:	b580      	push	{r7, lr}
 8001f56:	b082      	sub	sp, #8
 8001f58:	af00      	add	r7, sp, #0
 8001f5a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	2b00      	cmp	r3, #0
 8001f60:	d101      	bne.n	8001f66 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001f62:	2301      	movs	r3, #1
 8001f64:	e042      	b.n	8001fec <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001f6c:	b2db      	uxtb	r3, r3
 8001f6e:	2b00      	cmp	r3, #0
 8001f70:	d106      	bne.n	8001f80 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	2200      	movs	r2, #0
 8001f76:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001f7a:	6878      	ldr	r0, [r7, #4]
 8001f7c:	f7fe fc28 	bl	80007d0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	2224      	movs	r2, #36	; 0x24
 8001f84:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	68da      	ldr	r2, [r3, #12]
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001f96:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8001f98:	6878      	ldr	r0, [r7, #4]
 8001f9a:	f000 f9c9 	bl	8002330 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	691a      	ldr	r2, [r3, #16]
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8001fac:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	695a      	ldr	r2, [r3, #20]
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8001fbc:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	68da      	ldr	r2, [r3, #12]
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001fcc:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	2200      	movs	r2, #0
 8001fd2:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	2220      	movs	r2, #32
 8001fd8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	2220      	movs	r2, #32
 8001fe0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	2200      	movs	r2, #0
 8001fe8:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8001fea:	2300      	movs	r3, #0
}
 8001fec:	4618      	mov	r0, r3
 8001fee:	3708      	adds	r7, #8
 8001ff0:	46bd      	mov	sp, r7
 8001ff2:	bd80      	pop	{r7, pc}

08001ff4 <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8001ff4:	b480      	push	{r7}
 8001ff6:	b085      	sub	sp, #20
 8001ff8:	af00      	add	r7, sp, #0
 8001ffa:	60f8      	str	r0, [r7, #12]
 8001ffc:	60b9      	str	r1, [r7, #8]
 8001ffe:	4613      	mov	r3, r2
 8002000:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002002:	68fb      	ldr	r3, [r7, #12]
 8002004:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002008:	b2db      	uxtb	r3, r3
 800200a:	2b20      	cmp	r3, #32
 800200c:	d121      	bne.n	8002052 <HAL_UART_Transmit_IT+0x5e>
  {
    if ((pData == NULL) || (Size == 0U))
 800200e:	68bb      	ldr	r3, [r7, #8]
 8002010:	2b00      	cmp	r3, #0
 8002012:	d002      	beq.n	800201a <HAL_UART_Transmit_IT+0x26>
 8002014:	88fb      	ldrh	r3, [r7, #6]
 8002016:	2b00      	cmp	r3, #0
 8002018:	d101      	bne.n	800201e <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 800201a:	2301      	movs	r3, #1
 800201c:	e01a      	b.n	8002054 <HAL_UART_Transmit_IT+0x60>
    }

    huart->pTxBuffPtr = pData;
 800201e:	68fb      	ldr	r3, [r7, #12]
 8002020:	68ba      	ldr	r2, [r7, #8]
 8002022:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8002024:	68fb      	ldr	r3, [r7, #12]
 8002026:	88fa      	ldrh	r2, [r7, #6]
 8002028:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800202a:	68fb      	ldr	r3, [r7, #12]
 800202c:	88fa      	ldrh	r2, [r7, #6]
 800202e:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002030:	68fb      	ldr	r3, [r7, #12]
 8002032:	2200      	movs	r2, #0
 8002034:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002036:	68fb      	ldr	r3, [r7, #12]
 8002038:	2221      	movs	r2, #33	; 0x21
 800203a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 800203e:	68fb      	ldr	r3, [r7, #12]
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	68da      	ldr	r2, [r3, #12]
 8002044:	68fb      	ldr	r3, [r7, #12]
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800204c:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 800204e:	2300      	movs	r3, #0
 8002050:	e000      	b.n	8002054 <HAL_UART_Transmit_IT+0x60>
  }
  else
  {
    return HAL_BUSY;
 8002052:	2302      	movs	r3, #2
  }
}
 8002054:	4618      	mov	r0, r3
 8002056:	3714      	adds	r7, #20
 8002058:	46bd      	mov	sp, r7
 800205a:	bc80      	pop	{r7}
 800205c:	4770      	bx	lr

0800205e <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800205e:	b580      	push	{r7, lr}
 8002060:	b084      	sub	sp, #16
 8002062:	af00      	add	r7, sp, #0
 8002064:	60f8      	str	r0, [r7, #12]
 8002066:	60b9      	str	r1, [r7, #8]
 8002068:	4613      	mov	r3, r2
 800206a:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800206c:	68fb      	ldr	r3, [r7, #12]
 800206e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8002072:	b2db      	uxtb	r3, r3
 8002074:	2b20      	cmp	r3, #32
 8002076:	d112      	bne.n	800209e <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8002078:	68bb      	ldr	r3, [r7, #8]
 800207a:	2b00      	cmp	r3, #0
 800207c:	d002      	beq.n	8002084 <HAL_UART_Receive_IT+0x26>
 800207e:	88fb      	ldrh	r3, [r7, #6]
 8002080:	2b00      	cmp	r3, #0
 8002082:	d101      	bne.n	8002088 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8002084:	2301      	movs	r3, #1
 8002086:	e00b      	b.n	80020a0 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002088:	68fb      	ldr	r3, [r7, #12]
 800208a:	2200      	movs	r2, #0
 800208c:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 800208e:	88fb      	ldrh	r3, [r7, #6]
 8002090:	461a      	mov	r2, r3
 8002092:	68b9      	ldr	r1, [r7, #8]
 8002094:	68f8      	ldr	r0, [r7, #12]
 8002096:	f000 f912 	bl	80022be <UART_Start_Receive_IT>
 800209a:	4603      	mov	r3, r0
 800209c:	e000      	b.n	80020a0 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 800209e:	2302      	movs	r3, #2
  }
}
 80020a0:	4618      	mov	r0, r3
 80020a2:	3710      	adds	r7, #16
 80020a4:	46bd      	mov	sp, r7
 80020a6:	bd80      	pop	{r7, pc}

080020a8 <HAL_UART_AbortTransmit>:
  *           - Set handle State to READY
  * @note   This procedure is executed in blocking mode : when exiting function, Abort is considered as completed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_AbortTransmit(UART_HandleTypeDef *huart)
{
 80020a8:	b580      	push	{r7, lr}
 80020aa:	b08e      	sub	sp, #56	; 0x38
 80020ac:	af00      	add	r7, sp, #0
 80020ae:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	330c      	adds	r3, #12
 80020b6:	623b      	str	r3, [r7, #32]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80020b8:	6a3b      	ldr	r3, [r7, #32]
 80020ba:	e853 3f00 	ldrex	r3, [r3]
 80020be:	61fb      	str	r3, [r7, #28]
   return(result);
 80020c0:	69fb      	ldr	r3, [r7, #28]
 80020c2:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 80020c6:	637b      	str	r3, [r7, #52]	; 0x34
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	330c      	adds	r3, #12
 80020ce:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80020d0:	62fa      	str	r2, [r7, #44]	; 0x2c
 80020d2:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80020d4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80020d6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80020d8:	e841 2300 	strex	r3, r2, [r1]
 80020dc:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80020de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020e0:	2b00      	cmp	r3, #0
 80020e2:	d1e5      	bne.n	80020b0 <HAL_UART_AbortTransmit+0x8>

  /* Disable the UART DMA Tx request if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT))
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	695b      	ldr	r3, [r3, #20]
 80020ea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80020ee:	2b00      	cmp	r3, #0
 80020f0:	d036      	beq.n	8002160 <HAL_UART_AbortTransmit+0xb8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	3314      	adds	r3, #20
 80020f8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80020fa:	68fb      	ldr	r3, [r7, #12]
 80020fc:	e853 3f00 	ldrex	r3, [r3]
 8002100:	60bb      	str	r3, [r7, #8]
   return(result);
 8002102:	68bb      	ldr	r3, [r7, #8]
 8002104:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002108:	633b      	str	r3, [r7, #48]	; 0x30
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	3314      	adds	r3, #20
 8002110:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002112:	61ba      	str	r2, [r7, #24]
 8002114:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002116:	6979      	ldr	r1, [r7, #20]
 8002118:	69ba      	ldr	r2, [r7, #24]
 800211a:	e841 2300 	strex	r3, r2, [r1]
 800211e:	613b      	str	r3, [r7, #16]
   return(result);
 8002120:	693b      	ldr	r3, [r7, #16]
 8002122:	2b00      	cmp	r3, #0
 8002124:	d1e5      	bne.n	80020f2 <HAL_UART_AbortTransmit+0x4a>

    /* Abort the UART DMA Tx channel : use blocking DMA Abort API (no callback) */
    if (huart->hdmatx != NULL)
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800212a:	2b00      	cmp	r3, #0
 800212c:	d018      	beq.n	8002160 <HAL_UART_AbortTransmit+0xb8>
    {
      /* Set the UART DMA Abort callback to Null.
         No call back execution at end of DMA abort procedure */
      huart->hdmatx->XferAbortCallback = NULL;
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002132:	2200      	movs	r2, #0
 8002134:	635a      	str	r2, [r3, #52]	; 0x34

      if (HAL_DMA_Abort(huart->hdmatx) != HAL_OK)
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800213a:	4618      	mov	r0, r3
 800213c:	f7fe fe11 	bl	8000d62 <HAL_DMA_Abort>
 8002140:	4603      	mov	r3, r0
 8002142:	2b00      	cmp	r3, #0
 8002144:	d00c      	beq.n	8002160 <HAL_UART_AbortTransmit+0xb8>
      {
        if (HAL_DMA_GetError(huart->hdmatx) == HAL_DMA_ERROR_TIMEOUT)
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800214a:	4618      	mov	r0, r3
 800214c:	f7fe fe44 	bl	8000dd8 <HAL_DMA_GetError>
 8002150:	4603      	mov	r3, r0
 8002152:	2b20      	cmp	r3, #32
 8002154:	d104      	bne.n	8002160 <HAL_UART_AbortTransmit+0xb8>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	2210      	movs	r2, #16
 800215a:	645a      	str	r2, [r3, #68]	; 0x44

          return HAL_TIMEOUT;
 800215c:	2303      	movs	r3, #3
 800215e:	e007      	b.n	8002170 <HAL_UART_AbortTransmit+0xc8>
      }
    }
  }

  /* Reset Tx transfer counter */
  huart->TxXferCount = 0x00U;
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	2200      	movs	r2, #0
 8002164:	84da      	strh	r2, [r3, #38]	; 0x26

  /* Restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	2220      	movs	r2, #32
 800216a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return HAL_OK;
 800216e:	2300      	movs	r3, #0
}
 8002170:	4618      	mov	r0, r3
 8002172:	3738      	adds	r7, #56	; 0x38
 8002174:	46bd      	mov	sp, r7
 8002176:	bd80      	pop	{r7, pc}

08002178 <HAL_UART_AbortReceive>:
  *           - Set handle State to READY
  * @note   This procedure is executed in blocking mode : when exiting function, Abort is considered as completed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_AbortReceive(UART_HandleTypeDef *huart)
{
 8002178:	b580      	push	{r7, lr}
 800217a:	b09a      	sub	sp, #104	; 0x68
 800217c:	af00      	add	r7, sp, #0
 800217e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	330c      	adds	r3, #12
 8002186:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002188:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800218a:	e853 3f00 	ldrex	r3, [r3]
 800218e:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8002190:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002192:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8002196:	667b      	str	r3, [r7, #100]	; 0x64
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	330c      	adds	r3, #12
 800219e:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80021a0:	657a      	str	r2, [r7, #84]	; 0x54
 80021a2:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80021a4:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80021a6:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80021a8:	e841 2300 	strex	r3, r2, [r1]
 80021ac:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80021ae:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80021b0:	2b00      	cmp	r3, #0
 80021b2:	d1e5      	bne.n	8002180 <HAL_UART_AbortReceive+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	3314      	adds	r3, #20
 80021ba:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80021bc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80021be:	e853 3f00 	ldrex	r3, [r3]
 80021c2:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80021c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80021c6:	f023 0301 	bic.w	r3, r3, #1
 80021ca:	663b      	str	r3, [r7, #96]	; 0x60
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	3314      	adds	r3, #20
 80021d2:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80021d4:	643a      	str	r2, [r7, #64]	; 0x40
 80021d6:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80021d8:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80021da:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80021dc:	e841 2300 	strex	r3, r2, [r1]
 80021e0:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80021e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80021e4:	2b00      	cmp	r3, #0
 80021e6:	d1e5      	bne.n	80021b4 <HAL_UART_AbortReceive+0x3c>

  /* If Reception till IDLE event was ongoing, disable IDLEIE interrupt */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021ec:	2b01      	cmp	r3, #1
 80021ee:	d119      	bne.n	8002224 <HAL_UART_AbortReceive+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_IDLEIE));
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	330c      	adds	r3, #12
 80021f6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80021f8:	6a3b      	ldr	r3, [r7, #32]
 80021fa:	e853 3f00 	ldrex	r3, [r3]
 80021fe:	61fb      	str	r3, [r7, #28]
   return(result);
 8002200:	69fb      	ldr	r3, [r7, #28]
 8002202:	f023 0310 	bic.w	r3, r3, #16
 8002206:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	330c      	adds	r3, #12
 800220e:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8002210:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002212:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002214:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002216:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002218:	e841 2300 	strex	r3, r2, [r1]
 800221c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800221e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002220:	2b00      	cmp	r3, #0
 8002222:	d1e5      	bne.n	80021f0 <HAL_UART_AbortReceive+0x78>
  }

  /* Disable the UART DMA Rx request if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	695b      	ldr	r3, [r3, #20]
 800222a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800222e:	2b00      	cmp	r3, #0
 8002230:	d036      	beq.n	80022a0 <HAL_UART_AbortReceive+0x128>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	3314      	adds	r3, #20
 8002238:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800223a:	68fb      	ldr	r3, [r7, #12]
 800223c:	e853 3f00 	ldrex	r3, [r3]
 8002240:	60bb      	str	r3, [r7, #8]
   return(result);
 8002242:	68bb      	ldr	r3, [r7, #8]
 8002244:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002248:	65bb      	str	r3, [r7, #88]	; 0x58
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	3314      	adds	r3, #20
 8002250:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002252:	61ba      	str	r2, [r7, #24]
 8002254:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002256:	6979      	ldr	r1, [r7, #20]
 8002258:	69ba      	ldr	r2, [r7, #24]
 800225a:	e841 2300 	strex	r3, r2, [r1]
 800225e:	613b      	str	r3, [r7, #16]
   return(result);
 8002260:	693b      	ldr	r3, [r7, #16]
 8002262:	2b00      	cmp	r3, #0
 8002264:	d1e5      	bne.n	8002232 <HAL_UART_AbortReceive+0xba>

    /* Abort the UART DMA Rx channel : use blocking DMA Abort API (no callback) */
    if (huart->hdmarx != NULL)
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800226a:	2b00      	cmp	r3, #0
 800226c:	d018      	beq.n	80022a0 <HAL_UART_AbortReceive+0x128>
    {
      /* Set the UART DMA Abort callback to Null.
         No call back execution at end of DMA abort procedure */
      huart->hdmarx->XferAbortCallback = NULL;
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002272:	2200      	movs	r2, #0
 8002274:	635a      	str	r2, [r3, #52]	; 0x34

      if (HAL_DMA_Abort(huart->hdmarx) != HAL_OK)
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800227a:	4618      	mov	r0, r3
 800227c:	f7fe fd71 	bl	8000d62 <HAL_DMA_Abort>
 8002280:	4603      	mov	r3, r0
 8002282:	2b00      	cmp	r3, #0
 8002284:	d00c      	beq.n	80022a0 <HAL_UART_AbortReceive+0x128>
      {
        if (HAL_DMA_GetError(huart->hdmarx) == HAL_DMA_ERROR_TIMEOUT)
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800228a:	4618      	mov	r0, r3
 800228c:	f7fe fda4 	bl	8000dd8 <HAL_DMA_GetError>
 8002290:	4603      	mov	r3, r0
 8002292:	2b20      	cmp	r3, #32
 8002294:	d104      	bne.n	80022a0 <HAL_UART_AbortReceive+0x128>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	2210      	movs	r2, #16
 800229a:	645a      	str	r2, [r3, #68]	; 0x44

          return HAL_TIMEOUT;
 800229c:	2303      	movs	r3, #3
 800229e:	e00a      	b.n	80022b6 <HAL_UART_AbortReceive+0x13e>
      }
    }
  }

  /* Reset Rx transfer counter */
  huart->RxXferCount = 0x00U;
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	2200      	movs	r2, #0
 80022a4:	85da      	strh	r2, [r3, #46]	; 0x2e

  /* Restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	2220      	movs	r2, #32
 80022aa:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	2200      	movs	r2, #0
 80022b2:	631a      	str	r2, [r3, #48]	; 0x30

  return HAL_OK;
 80022b4:	2300      	movs	r3, #0
}
 80022b6:	4618      	mov	r0, r3
 80022b8:	3768      	adds	r7, #104	; 0x68
 80022ba:	46bd      	mov	sp, r7
 80022bc:	bd80      	pop	{r7, pc}

080022be <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80022be:	b480      	push	{r7}
 80022c0:	b085      	sub	sp, #20
 80022c2:	af00      	add	r7, sp, #0
 80022c4:	60f8      	str	r0, [r7, #12]
 80022c6:	60b9      	str	r1, [r7, #8]
 80022c8:	4613      	mov	r3, r2
 80022ca:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 80022cc:	68fb      	ldr	r3, [r7, #12]
 80022ce:	68ba      	ldr	r2, [r7, #8]
 80022d0:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 80022d2:	68fb      	ldr	r3, [r7, #12]
 80022d4:	88fa      	ldrh	r2, [r7, #6]
 80022d6:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 80022d8:	68fb      	ldr	r3, [r7, #12]
 80022da:	88fa      	ldrh	r2, [r7, #6]
 80022dc:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80022de:	68fb      	ldr	r3, [r7, #12]
 80022e0:	2200      	movs	r2, #0
 80022e2:	645a      	str	r2, [r3, #68]	; 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80022e4:	68fb      	ldr	r3, [r7, #12]
 80022e6:	2222      	movs	r2, #34	; 0x22
 80022e8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 80022ec:	68fb      	ldr	r3, [r7, #12]
 80022ee:	691b      	ldr	r3, [r3, #16]
 80022f0:	2b00      	cmp	r3, #0
 80022f2:	d007      	beq.n	8002304 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 80022f4:	68fb      	ldr	r3, [r7, #12]
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	68da      	ldr	r2, [r3, #12]
 80022fa:	68fb      	ldr	r3, [r7, #12]
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002302:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8002304:	68fb      	ldr	r3, [r7, #12]
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	695a      	ldr	r2, [r3, #20]
 800230a:	68fb      	ldr	r3, [r7, #12]
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	f042 0201 	orr.w	r2, r2, #1
 8002312:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8002314:	68fb      	ldr	r3, [r7, #12]
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	68da      	ldr	r2, [r3, #12]
 800231a:	68fb      	ldr	r3, [r7, #12]
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	f042 0220 	orr.w	r2, r2, #32
 8002322:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8002324:	2300      	movs	r3, #0
}
 8002326:	4618      	mov	r0, r3
 8002328:	3714      	adds	r7, #20
 800232a:	46bd      	mov	sp, r7
 800232c:	bc80      	pop	{r7}
 800232e:	4770      	bx	lr

08002330 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002330:	b580      	push	{r7, lr}
 8002332:	b084      	sub	sp, #16
 8002334:	af00      	add	r7, sp, #0
 8002336:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	691b      	ldr	r3, [r3, #16]
 800233e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	68da      	ldr	r2, [r3, #12]
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	430a      	orrs	r2, r1
 800234c:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	689a      	ldr	r2, [r3, #8]
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	691b      	ldr	r3, [r3, #16]
 8002356:	431a      	orrs	r2, r3
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	695b      	ldr	r3, [r3, #20]
 800235c:	4313      	orrs	r3, r2
 800235e:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	68db      	ldr	r3, [r3, #12]
 8002366:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 800236a:	f023 030c 	bic.w	r3, r3, #12
 800236e:	687a      	ldr	r2, [r7, #4]
 8002370:	6812      	ldr	r2, [r2, #0]
 8002372:	68b9      	ldr	r1, [r7, #8]
 8002374:	430b      	orrs	r3, r1
 8002376:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	695b      	ldr	r3, [r3, #20]
 800237e:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	699a      	ldr	r2, [r3, #24]
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	430a      	orrs	r2, r1
 800238c:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	4a2c      	ldr	r2, [pc, #176]	; (8002444 <UART_SetConfig+0x114>)
 8002394:	4293      	cmp	r3, r2
 8002396:	d103      	bne.n	80023a0 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8002398:	f7ff fabc 	bl	8001914 <HAL_RCC_GetPCLK2Freq>
 800239c:	60f8      	str	r0, [r7, #12]
 800239e:	e002      	b.n	80023a6 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80023a0:	f7ff faa4 	bl	80018ec <HAL_RCC_GetPCLK1Freq>
 80023a4:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80023a6:	68fa      	ldr	r2, [r7, #12]
 80023a8:	4613      	mov	r3, r2
 80023aa:	009b      	lsls	r3, r3, #2
 80023ac:	4413      	add	r3, r2
 80023ae:	009a      	lsls	r2, r3, #2
 80023b0:	441a      	add	r2, r3
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	685b      	ldr	r3, [r3, #4]
 80023b6:	009b      	lsls	r3, r3, #2
 80023b8:	fbb2 f3f3 	udiv	r3, r2, r3
 80023bc:	4a22      	ldr	r2, [pc, #136]	; (8002448 <UART_SetConfig+0x118>)
 80023be:	fba2 2303 	umull	r2, r3, r2, r3
 80023c2:	095b      	lsrs	r3, r3, #5
 80023c4:	0119      	lsls	r1, r3, #4
 80023c6:	68fa      	ldr	r2, [r7, #12]
 80023c8:	4613      	mov	r3, r2
 80023ca:	009b      	lsls	r3, r3, #2
 80023cc:	4413      	add	r3, r2
 80023ce:	009a      	lsls	r2, r3, #2
 80023d0:	441a      	add	r2, r3
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	685b      	ldr	r3, [r3, #4]
 80023d6:	009b      	lsls	r3, r3, #2
 80023d8:	fbb2 f2f3 	udiv	r2, r2, r3
 80023dc:	4b1a      	ldr	r3, [pc, #104]	; (8002448 <UART_SetConfig+0x118>)
 80023de:	fba3 0302 	umull	r0, r3, r3, r2
 80023e2:	095b      	lsrs	r3, r3, #5
 80023e4:	2064      	movs	r0, #100	; 0x64
 80023e6:	fb00 f303 	mul.w	r3, r0, r3
 80023ea:	1ad3      	subs	r3, r2, r3
 80023ec:	011b      	lsls	r3, r3, #4
 80023ee:	3332      	adds	r3, #50	; 0x32
 80023f0:	4a15      	ldr	r2, [pc, #84]	; (8002448 <UART_SetConfig+0x118>)
 80023f2:	fba2 2303 	umull	r2, r3, r2, r3
 80023f6:	095b      	lsrs	r3, r3, #5
 80023f8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80023fc:	4419      	add	r1, r3
 80023fe:	68fa      	ldr	r2, [r7, #12]
 8002400:	4613      	mov	r3, r2
 8002402:	009b      	lsls	r3, r3, #2
 8002404:	4413      	add	r3, r2
 8002406:	009a      	lsls	r2, r3, #2
 8002408:	441a      	add	r2, r3
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	685b      	ldr	r3, [r3, #4]
 800240e:	009b      	lsls	r3, r3, #2
 8002410:	fbb2 f2f3 	udiv	r2, r2, r3
 8002414:	4b0c      	ldr	r3, [pc, #48]	; (8002448 <UART_SetConfig+0x118>)
 8002416:	fba3 0302 	umull	r0, r3, r3, r2
 800241a:	095b      	lsrs	r3, r3, #5
 800241c:	2064      	movs	r0, #100	; 0x64
 800241e:	fb00 f303 	mul.w	r3, r0, r3
 8002422:	1ad3      	subs	r3, r2, r3
 8002424:	011b      	lsls	r3, r3, #4
 8002426:	3332      	adds	r3, #50	; 0x32
 8002428:	4a07      	ldr	r2, [pc, #28]	; (8002448 <UART_SetConfig+0x118>)
 800242a:	fba2 2303 	umull	r2, r3, r2, r3
 800242e:	095b      	lsrs	r3, r3, #5
 8002430:	f003 020f 	and.w	r2, r3, #15
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	440a      	add	r2, r1
 800243a:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 800243c:	bf00      	nop
 800243e:	3710      	adds	r7, #16
 8002440:	46bd      	mov	sp, r7
 8002442:	bd80      	pop	{r7, pc}
 8002444:	40013800 	.word	0x40013800
 8002448:	51eb851f 	.word	0x51eb851f

0800244c <eMBInit>:
};

/* ----------------------- Start implementation -----------------------------*/
eMBErrorCode
eMBInit( eMBMode eMode, UCHAR ucSlaveAddress, UCHAR ucPort, ULONG ulBaudRate, eMBParity eParity )
{
 800244c:	b580      	push	{r7, lr}
 800244e:	b084      	sub	sp, #16
 8002450:	af00      	add	r7, sp, #0
 8002452:	603b      	str	r3, [r7, #0]
 8002454:	4603      	mov	r3, r0
 8002456:	71fb      	strb	r3, [r7, #7]
 8002458:	460b      	mov	r3, r1
 800245a:	71bb      	strb	r3, [r7, #6]
 800245c:	4613      	mov	r3, r2
 800245e:	717b      	strb	r3, [r7, #5]
    eMBErrorCode    eStatus = MB_ENOERR;
 8002460:	2300      	movs	r3, #0
 8002462:	73fb      	strb	r3, [r7, #15]

    /* check preconditions */
    if( ( ucSlaveAddress == MB_ADDRESS_BROADCAST ) ||
 8002464:	79bb      	ldrb	r3, [r7, #6]
 8002466:	2b00      	cmp	r3, #0
 8002468:	d005      	beq.n	8002476 <eMBInit+0x2a>
 800246a:	79bb      	ldrb	r3, [r7, #6]
 800246c:	2b00      	cmp	r3, #0
 800246e:	d002      	beq.n	8002476 <eMBInit+0x2a>
        ( ucSlaveAddress < MB_ADDRESS_MIN ) || ( ucSlaveAddress > MB_ADDRESS_MAX ) )
 8002470:	79bb      	ldrb	r3, [r7, #6]
 8002472:	2bf7      	cmp	r3, #247	; 0xf7
 8002474:	d902      	bls.n	800247c <eMBInit+0x30>
    {
        eStatus = MB_EINVAL;
 8002476:	2302      	movs	r3, #2
 8002478:	73fb      	strb	r3, [r7, #15]
 800247a:	e03a      	b.n	80024f2 <eMBInit+0xa6>
    }
    else
    {
        ucMBAddress = ucSlaveAddress;
 800247c:	4a1f      	ldr	r2, [pc, #124]	; (80024fc <eMBInit+0xb0>)
 800247e:	79bb      	ldrb	r3, [r7, #6]
 8002480:	7013      	strb	r3, [r2, #0]

        switch ( eMode )
 8002482:	79fb      	ldrb	r3, [r7, #7]
 8002484:	2b00      	cmp	r3, #0
 8002486:	d121      	bne.n	80024cc <eMBInit+0x80>
        {
#if MB_RTU_ENABLED > 0
        case MB_RTU:
            pvMBFrameStartCur = eMBRTUStart;
 8002488:	4b1d      	ldr	r3, [pc, #116]	; (8002500 <eMBInit+0xb4>)
 800248a:	4a1e      	ldr	r2, [pc, #120]	; (8002504 <eMBInit+0xb8>)
 800248c:	601a      	str	r2, [r3, #0]
            pvMBFrameStopCur = eMBRTUStop;
 800248e:	4b1e      	ldr	r3, [pc, #120]	; (8002508 <eMBInit+0xbc>)
 8002490:	4a1e      	ldr	r2, [pc, #120]	; (800250c <eMBInit+0xc0>)
 8002492:	601a      	str	r2, [r3, #0]
            peMBFrameSendCur = eMBRTUSend;
 8002494:	4b1e      	ldr	r3, [pc, #120]	; (8002510 <eMBInit+0xc4>)
 8002496:	4a1f      	ldr	r2, [pc, #124]	; (8002514 <eMBInit+0xc8>)
 8002498:	601a      	str	r2, [r3, #0]
            peMBFrameReceiveCur = eMBRTUReceive;
 800249a:	4b1f      	ldr	r3, [pc, #124]	; (8002518 <eMBInit+0xcc>)
 800249c:	4a1f      	ldr	r2, [pc, #124]	; (800251c <eMBInit+0xd0>)
 800249e:	601a      	str	r2, [r3, #0]
            pvMBFrameCloseCur = MB_PORT_HAS_CLOSE ? vMBPortClose : NULL;
 80024a0:	4b1f      	ldr	r3, [pc, #124]	; (8002520 <eMBInit+0xd4>)
 80024a2:	2200      	movs	r2, #0
 80024a4:	601a      	str	r2, [r3, #0]
            pxMBFrameCBByteReceived = xMBRTUReceiveFSM;
 80024a6:	4b1f      	ldr	r3, [pc, #124]	; (8002524 <eMBInit+0xd8>)
 80024a8:	4a1f      	ldr	r2, [pc, #124]	; (8002528 <eMBInit+0xdc>)
 80024aa:	601a      	str	r2, [r3, #0]
            pxMBFrameCBTransmitterEmpty = xMBRTUTransmitFSM;
 80024ac:	4b1f      	ldr	r3, [pc, #124]	; (800252c <eMBInit+0xe0>)
 80024ae:	4a20      	ldr	r2, [pc, #128]	; (8002530 <eMBInit+0xe4>)
 80024b0:	601a      	str	r2, [r3, #0]
            pxMBPortCBTimerExpired = xMBRTUTimerT35Expired;
 80024b2:	4b20      	ldr	r3, [pc, #128]	; (8002534 <eMBInit+0xe8>)
 80024b4:	4a20      	ldr	r2, [pc, #128]	; (8002538 <eMBInit+0xec>)
 80024b6:	601a      	str	r2, [r3, #0]

            eStatus = eMBRTUInit( ucMBAddress, ucPort, ulBaudRate, eParity );
 80024b8:	4b10      	ldr	r3, [pc, #64]	; (80024fc <eMBInit+0xb0>)
 80024ba:	7818      	ldrb	r0, [r3, #0]
 80024bc:	7e3b      	ldrb	r3, [r7, #24]
 80024be:	7979      	ldrb	r1, [r7, #5]
 80024c0:	683a      	ldr	r2, [r7, #0]
 80024c2:	f000 fd39 	bl	8002f38 <eMBRTUInit>
 80024c6:	4603      	mov	r3, r0
 80024c8:	73fb      	strb	r3, [r7, #15]
            break;
 80024ca:	e001      	b.n	80024d0 <eMBInit+0x84>

            eStatus = eMBASCIIInit( ucMBAddress, ucPort, ulBaudRate, eParity );
            break;
#endif
        default:
            eStatus = MB_EINVAL;
 80024cc:	2302      	movs	r3, #2
 80024ce:	73fb      	strb	r3, [r7, #15]
        }

        if( eStatus == MB_ENOERR )
 80024d0:	7bfb      	ldrb	r3, [r7, #15]
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	d10d      	bne.n	80024f2 <eMBInit+0xa6>
        {
            if( !xMBPortEventInit(  ) )
 80024d6:	f000 ff8b 	bl	80033f0 <xMBPortEventInit>
 80024da:	4603      	mov	r3, r0
 80024dc:	2b00      	cmp	r3, #0
 80024de:	d102      	bne.n	80024e6 <eMBInit+0x9a>
            {
                /* port dependent event module initalization failed. */
                eStatus = MB_EPORTERR;
 80024e0:	2303      	movs	r3, #3
 80024e2:	73fb      	strb	r3, [r7, #15]
 80024e4:	e005      	b.n	80024f2 <eMBInit+0xa6>
            }
            else
            {
                eMBCurrentMode = eMode;
 80024e6:	4a15      	ldr	r2, [pc, #84]	; (800253c <eMBInit+0xf0>)
 80024e8:	79fb      	ldrb	r3, [r7, #7]
 80024ea:	7013      	strb	r3, [r2, #0]
                eMBState = STATE_DISABLED;
 80024ec:	4b14      	ldr	r3, [pc, #80]	; (8002540 <eMBInit+0xf4>)
 80024ee:	2201      	movs	r2, #1
 80024f0:	701a      	strb	r2, [r3, #0]
            }
        }
    }
    return eStatus;
 80024f2:	7bfb      	ldrb	r3, [r7, #15]
}
 80024f4:	4618      	mov	r0, r3
 80024f6:	3710      	adds	r7, #16
 80024f8:	46bd      	mov	sp, r7
 80024fa:	bd80      	pop	{r7, pc}
 80024fc:	200001a8 	.word	0x200001a8
 8002500:	200001b0 	.word	0x200001b0
 8002504:	08002fb1 	.word	0x08002fb1
 8002508:	200001b4 	.word	0x200001b4
 800250c:	08002fd9 	.word	0x08002fd9
 8002510:	200001ac 	.word	0x200001ac
 8002514:	08003091 	.word	0x08003091
 8002518:	200001b8 	.word	0x200001b8
 800251c:	08002ff5 	.word	0x08002ff5
 8002520:	200001bc 	.word	0x200001bc
 8002524:	200001c0 	.word	0x200001c0
 8002528:	08003159 	.word	0x08003159
 800252c:	200001c4 	.word	0x200001c4
 8002530:	08003229 	.word	0x08003229
 8002534:	200001c8 	.word	0x200001c8
 8002538:	080032d9 	.word	0x080032d9
 800253c:	200001a9 	.word	0x200001a9
 8002540:	2000000d 	.word	0x2000000d

08002544 <eMBEnable>:
    return eStatus;
}

eMBErrorCode
eMBEnable( void )
{
 8002544:	b580      	push	{r7, lr}
 8002546:	b082      	sub	sp, #8
 8002548:	af00      	add	r7, sp, #0
    eMBErrorCode    eStatus = MB_ENOERR;
 800254a:	2300      	movs	r3, #0
 800254c:	71fb      	strb	r3, [r7, #7]

    if( eMBState == STATE_DISABLED )
 800254e:	4b09      	ldr	r3, [pc, #36]	; (8002574 <eMBEnable+0x30>)
 8002550:	781b      	ldrb	r3, [r3, #0]
 8002552:	2b01      	cmp	r3, #1
 8002554:	d106      	bne.n	8002564 <eMBEnable+0x20>
    {
        /* Activate the protocol stack. */
        pvMBFrameStartCur(  );
 8002556:	4b08      	ldr	r3, [pc, #32]	; (8002578 <eMBEnable+0x34>)
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	4798      	blx	r3
        eMBState = STATE_ENABLED;
 800255c:	4b05      	ldr	r3, [pc, #20]	; (8002574 <eMBEnable+0x30>)
 800255e:	2200      	movs	r2, #0
 8002560:	701a      	strb	r2, [r3, #0]
 8002562:	e001      	b.n	8002568 <eMBEnable+0x24>
    }
    else
    {
        eStatus = MB_EILLSTATE;
 8002564:	2306      	movs	r3, #6
 8002566:	71fb      	strb	r3, [r7, #7]
    }
    return eStatus;
 8002568:	79fb      	ldrb	r3, [r7, #7]
}
 800256a:	4618      	mov	r0, r3
 800256c:	3708      	adds	r7, #8
 800256e:	46bd      	mov	sp, r7
 8002570:	bd80      	pop	{r7, pc}
 8002572:	bf00      	nop
 8002574:	2000000d 	.word	0x2000000d
 8002578:	200001b0 	.word	0x200001b0

0800257c <eMBPoll>:
    return eStatus;
}

eMBErrorCode
eMBPoll( void )
{
 800257c:	b590      	push	{r4, r7, lr}
 800257e:	b083      	sub	sp, #12
 8002580:	af00      	add	r7, sp, #0
    static UCHAR    ucFunctionCode;
    static USHORT   usLength;
    static eMBException eException;

    int             i;
    eMBErrorCode    eStatus = MB_ENOERR;
 8002582:	2300      	movs	r3, #0
 8002584:	70fb      	strb	r3, [r7, #3]
    eMBEventType    eEvent;

    /* Check if the protocol stack is ready. */
    if( eMBState != STATE_ENABLED )
 8002586:	4b50      	ldr	r3, [pc, #320]	; (80026c8 <eMBPoll+0x14c>)
 8002588:	781b      	ldrb	r3, [r3, #0]
 800258a:	2b00      	cmp	r3, #0
 800258c:	d001      	beq.n	8002592 <eMBPoll+0x16>
    {
        return MB_EILLSTATE;
 800258e:	2306      	movs	r3, #6
 8002590:	e095      	b.n	80026be <eMBPoll+0x142>
    }

    /* Check if there is a event available. If not return control to caller.
     * Otherwise we will handle the event. */
    if( xMBPortEventGet( &eEvent ) == TRUE )
 8002592:	1cbb      	adds	r3, r7, #2
 8002594:	4618      	mov	r0, r3
 8002596:	f000 ff4d 	bl	8003434 <xMBPortEventGet>
 800259a:	4603      	mov	r3, r0
 800259c:	2b01      	cmp	r3, #1
 800259e:	f040 808d 	bne.w	80026bc <eMBPoll+0x140>
    {
        switch ( eEvent )
 80025a2:	78bb      	ldrb	r3, [r7, #2]
 80025a4:	2b03      	cmp	r3, #3
 80025a6:	f200 8089 	bhi.w	80026bc <eMBPoll+0x140>
 80025aa:	a201      	add	r2, pc, #4	; (adr r2, 80025b0 <eMBPoll+0x34>)
 80025ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80025b0:	080026bd 	.word	0x080026bd
 80025b4:	080025c1 	.word	0x080025c1
 80025b8:	080025f3 	.word	0x080025f3
 80025bc:	080026bd 	.word	0x080026bd
        {
        case EV_READY:
            break;

        case EV_FRAME_RECEIVED:
            eStatus = peMBFrameReceiveCur( &ucRcvAddress, &ucMBFrame, &usLength );
 80025c0:	4b42      	ldr	r3, [pc, #264]	; (80026cc <eMBPoll+0x150>)
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	4a42      	ldr	r2, [pc, #264]	; (80026d0 <eMBPoll+0x154>)
 80025c6:	4943      	ldr	r1, [pc, #268]	; (80026d4 <eMBPoll+0x158>)
 80025c8:	4843      	ldr	r0, [pc, #268]	; (80026d8 <eMBPoll+0x15c>)
 80025ca:	4798      	blx	r3
 80025cc:	4603      	mov	r3, r0
 80025ce:	70fb      	strb	r3, [r7, #3]
            if( eStatus == MB_ENOERR )
 80025d0:	78fb      	ldrb	r3, [r7, #3]
 80025d2:	2b00      	cmp	r3, #0
 80025d4:	d16f      	bne.n	80026b6 <eMBPoll+0x13a>
            {
                /* Check if the frame is for us. If not ignore the frame. */
                if( ( ucRcvAddress == ucMBAddress ) || ( ucRcvAddress == MB_ADDRESS_BROADCAST ) )
 80025d6:	4b40      	ldr	r3, [pc, #256]	; (80026d8 <eMBPoll+0x15c>)
 80025d8:	781a      	ldrb	r2, [r3, #0]
 80025da:	4b40      	ldr	r3, [pc, #256]	; (80026dc <eMBPoll+0x160>)
 80025dc:	781b      	ldrb	r3, [r3, #0]
 80025de:	429a      	cmp	r2, r3
 80025e0:	d003      	beq.n	80025ea <eMBPoll+0x6e>
 80025e2:	4b3d      	ldr	r3, [pc, #244]	; (80026d8 <eMBPoll+0x15c>)
 80025e4:	781b      	ldrb	r3, [r3, #0]
 80025e6:	2b00      	cmp	r3, #0
 80025e8:	d165      	bne.n	80026b6 <eMBPoll+0x13a>
                {
                    ( void )xMBPortEventPost( EV_EXECUTE );
 80025ea:	2002      	movs	r0, #2
 80025ec:	f000 ff0c 	bl	8003408 <xMBPortEventPost>
                }
            }
            break;
 80025f0:	e061      	b.n	80026b6 <eMBPoll+0x13a>

        case EV_EXECUTE:
            ucFunctionCode = ucMBFrame[MB_PDU_FUNC_OFF];
 80025f2:	4b38      	ldr	r3, [pc, #224]	; (80026d4 <eMBPoll+0x158>)
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	781a      	ldrb	r2, [r3, #0]
 80025f8:	4b39      	ldr	r3, [pc, #228]	; (80026e0 <eMBPoll+0x164>)
 80025fa:	701a      	strb	r2, [r3, #0]
            eException = MB_EX_ILLEGAL_FUNCTION;
 80025fc:	4b39      	ldr	r3, [pc, #228]	; (80026e4 <eMBPoll+0x168>)
 80025fe:	2201      	movs	r2, #1
 8002600:	701a      	strb	r2, [r3, #0]
            for( i = 0; i < MB_FUNC_HANDLERS_MAX; i++ )
 8002602:	2300      	movs	r3, #0
 8002604:	607b      	str	r3, [r7, #4]
 8002606:	e01f      	b.n	8002648 <eMBPoll+0xcc>
            {
                /* No more function handlers registered. Abort. */
                if( xFuncHandlers[i].ucFunctionCode == 0 )
 8002608:	4a37      	ldr	r2, [pc, #220]	; (80026e8 <eMBPoll+0x16c>)
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	f812 3033 	ldrb.w	r3, [r2, r3, lsl #3]
 8002610:	2b00      	cmp	r3, #0
 8002612:	d01d      	beq.n	8002650 <eMBPoll+0xd4>
                {
                    break;
                }
                else if( xFuncHandlers[i].ucFunctionCode == ucFunctionCode )
 8002614:	4a34      	ldr	r2, [pc, #208]	; (80026e8 <eMBPoll+0x16c>)
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	f812 2033 	ldrb.w	r2, [r2, r3, lsl #3]
 800261c:	4b30      	ldr	r3, [pc, #192]	; (80026e0 <eMBPoll+0x164>)
 800261e:	781b      	ldrb	r3, [r3, #0]
 8002620:	429a      	cmp	r2, r3
 8002622:	d10e      	bne.n	8002642 <eMBPoll+0xc6>
                {
                    eException = xFuncHandlers[i].pxHandler( ucMBFrame, &usLength );
 8002624:	4a30      	ldr	r2, [pc, #192]	; (80026e8 <eMBPoll+0x16c>)
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	00db      	lsls	r3, r3, #3
 800262a:	4413      	add	r3, r2
 800262c:	685b      	ldr	r3, [r3, #4]
 800262e:	4a29      	ldr	r2, [pc, #164]	; (80026d4 <eMBPoll+0x158>)
 8002630:	6812      	ldr	r2, [r2, #0]
 8002632:	4927      	ldr	r1, [pc, #156]	; (80026d0 <eMBPoll+0x154>)
 8002634:	4610      	mov	r0, r2
 8002636:	4798      	blx	r3
 8002638:	4603      	mov	r3, r0
 800263a:	461a      	mov	r2, r3
 800263c:	4b29      	ldr	r3, [pc, #164]	; (80026e4 <eMBPoll+0x168>)
 800263e:	701a      	strb	r2, [r3, #0]
                    break;
 8002640:	e007      	b.n	8002652 <eMBPoll+0xd6>
            for( i = 0; i < MB_FUNC_HANDLERS_MAX; i++ )
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	3301      	adds	r3, #1
 8002646:	607b      	str	r3, [r7, #4]
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	2b0f      	cmp	r3, #15
 800264c:	dddc      	ble.n	8002608 <eMBPoll+0x8c>
 800264e:	e000      	b.n	8002652 <eMBPoll+0xd6>
                    break;
 8002650:	bf00      	nop
                }
            }

            /* If the request was not sent to the broadcast address we
             * return a reply. */
            if( ucRcvAddress != MB_ADDRESS_BROADCAST )
 8002652:	4b21      	ldr	r3, [pc, #132]	; (80026d8 <eMBPoll+0x15c>)
 8002654:	781b      	ldrb	r3, [r3, #0]
 8002656:	2b00      	cmp	r3, #0
 8002658:	d02f      	beq.n	80026ba <eMBPoll+0x13e>
            {
                if( eException != MB_EX_NONE )
 800265a:	4b22      	ldr	r3, [pc, #136]	; (80026e4 <eMBPoll+0x168>)
 800265c:	781b      	ldrb	r3, [r3, #0]
 800265e:	2b00      	cmp	r3, #0
 8002660:	d01d      	beq.n	800269e <eMBPoll+0x122>
                {
                    /* An exception occured. Build an error frame. */
                    usLength = 0;
 8002662:	4b1b      	ldr	r3, [pc, #108]	; (80026d0 <eMBPoll+0x154>)
 8002664:	2200      	movs	r2, #0
 8002666:	801a      	strh	r2, [r3, #0]
                    ucMBFrame[usLength++] = ( UCHAR )( ucFunctionCode | MB_FUNC_ERROR );
 8002668:	4b1d      	ldr	r3, [pc, #116]	; (80026e0 <eMBPoll+0x164>)
 800266a:	781a      	ldrb	r2, [r3, #0]
 800266c:	4b19      	ldr	r3, [pc, #100]	; (80026d4 <eMBPoll+0x158>)
 800266e:	6819      	ldr	r1, [r3, #0]
 8002670:	4b17      	ldr	r3, [pc, #92]	; (80026d0 <eMBPoll+0x154>)
 8002672:	881b      	ldrh	r3, [r3, #0]
 8002674:	1c58      	adds	r0, r3, #1
 8002676:	b284      	uxth	r4, r0
 8002678:	4815      	ldr	r0, [pc, #84]	; (80026d0 <eMBPoll+0x154>)
 800267a:	8004      	strh	r4, [r0, #0]
 800267c:	440b      	add	r3, r1
 800267e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8002682:	b2d2      	uxtb	r2, r2
 8002684:	701a      	strb	r2, [r3, #0]
                    ucMBFrame[usLength++] = eException;
 8002686:	4b13      	ldr	r3, [pc, #76]	; (80026d4 <eMBPoll+0x158>)
 8002688:	681a      	ldr	r2, [r3, #0]
 800268a:	4b11      	ldr	r3, [pc, #68]	; (80026d0 <eMBPoll+0x154>)
 800268c:	881b      	ldrh	r3, [r3, #0]
 800268e:	1c59      	adds	r1, r3, #1
 8002690:	b288      	uxth	r0, r1
 8002692:	490f      	ldr	r1, [pc, #60]	; (80026d0 <eMBPoll+0x154>)
 8002694:	8008      	strh	r0, [r1, #0]
 8002696:	4413      	add	r3, r2
 8002698:	4a12      	ldr	r2, [pc, #72]	; (80026e4 <eMBPoll+0x168>)
 800269a:	7812      	ldrb	r2, [r2, #0]
 800269c:	701a      	strb	r2, [r3, #0]
                }
                if( ( eMBCurrentMode == MB_ASCII ) && MB_ASCII_TIMEOUT_WAIT_BEFORE_SEND_MS )
                {
                    vMBPortTimersDelay( MB_ASCII_TIMEOUT_WAIT_BEFORE_SEND_MS );
                }                
                eStatus = peMBFrameSendCur( ucMBAddress, ucMBFrame, usLength );
 800269e:	4b13      	ldr	r3, [pc, #76]	; (80026ec <eMBPoll+0x170>)
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	4a0e      	ldr	r2, [pc, #56]	; (80026dc <eMBPoll+0x160>)
 80026a4:	7810      	ldrb	r0, [r2, #0]
 80026a6:	4a0b      	ldr	r2, [pc, #44]	; (80026d4 <eMBPoll+0x158>)
 80026a8:	6811      	ldr	r1, [r2, #0]
 80026aa:	4a09      	ldr	r2, [pc, #36]	; (80026d0 <eMBPoll+0x154>)
 80026ac:	8812      	ldrh	r2, [r2, #0]
 80026ae:	4798      	blx	r3
 80026b0:	4603      	mov	r3, r0
 80026b2:	70fb      	strb	r3, [r7, #3]
            }
            break;
 80026b4:	e001      	b.n	80026ba <eMBPoll+0x13e>
            break;
 80026b6:	bf00      	nop
 80026b8:	e000      	b.n	80026bc <eMBPoll+0x140>
            break;
 80026ba:	bf00      	nop

        case EV_FRAME_SENT:
            break;
        }
    }
    return MB_ENOERR;
 80026bc:	2300      	movs	r3, #0
}
 80026be:	4618      	mov	r0, r3
 80026c0:	370c      	adds	r7, #12
 80026c2:	46bd      	mov	sp, r7
 80026c4:	bd90      	pop	{r4, r7, pc}
 80026c6:	bf00      	nop
 80026c8:	2000000d 	.word	0x2000000d
 80026cc:	200001b8 	.word	0x200001b8
 80026d0:	200001d4 	.word	0x200001d4
 80026d4:	200001d0 	.word	0x200001d0
 80026d8:	200001cc 	.word	0x200001cc
 80026dc:	200001a8 	.word	0x200001a8
 80026e0:	200001d6 	.word	0x200001d6
 80026e4:	200001d7 	.word	0x200001d7
 80026e8:	20000010 	.word	0x20000010
 80026ec:	200001ac 	.word	0x200001ac

080026f0 <usMBCRC16>:
    0x41, 0x81, 0x80, 0x40
};

USHORT
usMBCRC16( UCHAR * pucFrame, USHORT usLen )
{
 80026f0:	b480      	push	{r7}
 80026f2:	b085      	sub	sp, #20
 80026f4:	af00      	add	r7, sp, #0
 80026f6:	6078      	str	r0, [r7, #4]
 80026f8:	460b      	mov	r3, r1
 80026fa:	807b      	strh	r3, [r7, #2]
    UCHAR           ucCRCHi = 0xFF;
 80026fc:	23ff      	movs	r3, #255	; 0xff
 80026fe:	73fb      	strb	r3, [r7, #15]
    UCHAR           ucCRCLo = 0xFF;
 8002700:	23ff      	movs	r3, #255	; 0xff
 8002702:	73bb      	strb	r3, [r7, #14]
    int             iIndex;

    while( usLen-- )
 8002704:	e013      	b.n	800272e <usMBCRC16+0x3e>
    {
        iIndex = ucCRCLo ^ *( pucFrame++ );
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	1c5a      	adds	r2, r3, #1
 800270a:	607a      	str	r2, [r7, #4]
 800270c:	781a      	ldrb	r2, [r3, #0]
 800270e:	7bbb      	ldrb	r3, [r7, #14]
 8002710:	4053      	eors	r3, r2
 8002712:	b2db      	uxtb	r3, r3
 8002714:	60bb      	str	r3, [r7, #8]
        ucCRCLo = ( UCHAR )( ucCRCHi ^ aucCRCHi[iIndex] );
 8002716:	4a0f      	ldr	r2, [pc, #60]	; (8002754 <usMBCRC16+0x64>)
 8002718:	68bb      	ldr	r3, [r7, #8]
 800271a:	4413      	add	r3, r2
 800271c:	781a      	ldrb	r2, [r3, #0]
 800271e:	7bfb      	ldrb	r3, [r7, #15]
 8002720:	4053      	eors	r3, r2
 8002722:	73bb      	strb	r3, [r7, #14]
        ucCRCHi = aucCRCLo[iIndex];
 8002724:	4a0c      	ldr	r2, [pc, #48]	; (8002758 <usMBCRC16+0x68>)
 8002726:	68bb      	ldr	r3, [r7, #8]
 8002728:	4413      	add	r3, r2
 800272a:	781b      	ldrb	r3, [r3, #0]
 800272c:	73fb      	strb	r3, [r7, #15]
    while( usLen-- )
 800272e:	887b      	ldrh	r3, [r7, #2]
 8002730:	1e5a      	subs	r2, r3, #1
 8002732:	807a      	strh	r2, [r7, #2]
 8002734:	2b00      	cmp	r3, #0
 8002736:	d1e6      	bne.n	8002706 <usMBCRC16+0x16>
    }
    return ( USHORT )( ucCRCHi << 8 | ucCRCLo );
 8002738:	7bfb      	ldrb	r3, [r7, #15]
 800273a:	021b      	lsls	r3, r3, #8
 800273c:	b21a      	sxth	r2, r3
 800273e:	7bbb      	ldrb	r3, [r7, #14]
 8002740:	b21b      	sxth	r3, r3
 8002742:	4313      	orrs	r3, r2
 8002744:	b21b      	sxth	r3, r3
 8002746:	b29b      	uxth	r3, r3
}
 8002748:	4618      	mov	r0, r3
 800274a:	3714      	adds	r7, #20
 800274c:	46bd      	mov	sp, r7
 800274e:	bc80      	pop	{r7}
 8002750:	4770      	bx	lr
 8002752:	bf00      	nop
 8002754:	080046bc 	.word	0x080046bc
 8002758:	080047bc 	.word	0x080047bc

0800275c <eMBFuncReadCoils>:

#if MB_FUNC_READ_COILS_ENABLED > 0

eMBException
eMBFuncReadCoils( UCHAR * pucFrame, USHORT * usLen )
{
 800275c:	b580      	push	{r7, lr}
 800275e:	b086      	sub	sp, #24
 8002760:	af00      	add	r7, sp, #0
 8002762:	6078      	str	r0, [r7, #4]
 8002764:	6039      	str	r1, [r7, #0]
    USHORT          usRegAddress;
    USHORT          usCoilCount;
    UCHAR           ucNBytes;
    UCHAR          *pucFrameCur;

    eMBException    eStatus = MB_EX_NONE;
 8002766:	2300      	movs	r3, #0
 8002768:	75bb      	strb	r3, [r7, #22]
    eMBErrorCode    eRegStatus;

    if( *usLen == ( MB_PDU_FUNC_READ_SIZE + MB_PDU_SIZE_MIN ) )
 800276a:	683b      	ldr	r3, [r7, #0]
 800276c:	881b      	ldrh	r3, [r3, #0]
 800276e:	2b05      	cmp	r3, #5
 8002770:	d16c      	bne.n	800284c <eMBFuncReadCoils+0xf0>
    {
        usRegAddress = ( USHORT )( pucFrame[MB_PDU_FUNC_READ_ADDR_OFF] << 8 );
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	3301      	adds	r3, #1
 8002776:	781b      	ldrb	r3, [r3, #0]
 8002778:	b29b      	uxth	r3, r3
 800277a:	021b      	lsls	r3, r3, #8
 800277c:	82bb      	strh	r3, [r7, #20]
        usRegAddress |= ( USHORT )( pucFrame[MB_PDU_FUNC_READ_ADDR_OFF + 1] );
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	3302      	adds	r3, #2
 8002782:	781b      	ldrb	r3, [r3, #0]
 8002784:	b29a      	uxth	r2, r3
 8002786:	8abb      	ldrh	r3, [r7, #20]
 8002788:	4313      	orrs	r3, r2
 800278a:	82bb      	strh	r3, [r7, #20]
        usRegAddress++;
 800278c:	8abb      	ldrh	r3, [r7, #20]
 800278e:	3301      	adds	r3, #1
 8002790:	82bb      	strh	r3, [r7, #20]

        usCoilCount = ( USHORT )( pucFrame[MB_PDU_FUNC_READ_COILCNT_OFF] << 8 );
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	3303      	adds	r3, #3
 8002796:	781b      	ldrb	r3, [r3, #0]
 8002798:	b29b      	uxth	r3, r3
 800279a:	021b      	lsls	r3, r3, #8
 800279c:	827b      	strh	r3, [r7, #18]
        usCoilCount |= ( USHORT )( pucFrame[MB_PDU_FUNC_READ_COILCNT_OFF + 1] );
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	3304      	adds	r3, #4
 80027a2:	781b      	ldrb	r3, [r3, #0]
 80027a4:	b29a      	uxth	r2, r3
 80027a6:	8a7b      	ldrh	r3, [r7, #18]
 80027a8:	4313      	orrs	r3, r2
 80027aa:	827b      	strh	r3, [r7, #18]

        /* Check if the number of registers to read is valid. If not
         * return Modbus illegal data value exception. 
         */
        if( ( usCoilCount >= 1 ) &&
 80027ac:	8a7b      	ldrh	r3, [r7, #18]
 80027ae:	2b00      	cmp	r3, #0
 80027b0:	d049      	beq.n	8002846 <eMBFuncReadCoils+0xea>
 80027b2:	8a7b      	ldrh	r3, [r7, #18]
 80027b4:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 80027b8:	d245      	bcs.n	8002846 <eMBFuncReadCoils+0xea>
            ( usCoilCount < MB_PDU_FUNC_READ_COILCNT_MAX ) )
        {
            /* Set the current PDU data pointer to the beginning. */
            pucFrameCur = &pucFrame[MB_PDU_FUNC_OFF];
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	60fb      	str	r3, [r7, #12]
            *usLen = MB_PDU_FUNC_OFF;
 80027be:	683b      	ldr	r3, [r7, #0]
 80027c0:	2200      	movs	r2, #0
 80027c2:	801a      	strh	r2, [r3, #0]

            /* First byte contains the function code. */
            *pucFrameCur++ = MB_FUNC_READ_COILS;
 80027c4:	68fb      	ldr	r3, [r7, #12]
 80027c6:	1c5a      	adds	r2, r3, #1
 80027c8:	60fa      	str	r2, [r7, #12]
 80027ca:	2201      	movs	r2, #1
 80027cc:	701a      	strb	r2, [r3, #0]
            *usLen += 1;
 80027ce:	683b      	ldr	r3, [r7, #0]
 80027d0:	881b      	ldrh	r3, [r3, #0]
 80027d2:	3301      	adds	r3, #1
 80027d4:	b29a      	uxth	r2, r3
 80027d6:	683b      	ldr	r3, [r7, #0]
 80027d8:	801a      	strh	r2, [r3, #0]

            /* Test if the quantity of coils is a multiple of 8. If not last
             * byte is only partially field with unused coils set to zero. */
            if( ( usCoilCount & 0x0007 ) != 0 )
 80027da:	8a7b      	ldrh	r3, [r7, #18]
 80027dc:	f003 0307 	and.w	r3, r3, #7
 80027e0:	2b00      	cmp	r3, #0
 80027e2:	d006      	beq.n	80027f2 <eMBFuncReadCoils+0x96>
            {
                ucNBytes = ( UCHAR )( usCoilCount / 8 + 1 );
 80027e4:	8a7b      	ldrh	r3, [r7, #18]
 80027e6:	08db      	lsrs	r3, r3, #3
 80027e8:	b29b      	uxth	r3, r3
 80027ea:	b2db      	uxtb	r3, r3
 80027ec:	3301      	adds	r3, #1
 80027ee:	75fb      	strb	r3, [r7, #23]
 80027f0:	e003      	b.n	80027fa <eMBFuncReadCoils+0x9e>
            }
            else
            {
                ucNBytes = ( UCHAR )( usCoilCount / 8 );
 80027f2:	8a7b      	ldrh	r3, [r7, #18]
 80027f4:	08db      	lsrs	r3, r3, #3
 80027f6:	b29b      	uxth	r3, r3
 80027f8:	75fb      	strb	r3, [r7, #23]
            }
            *pucFrameCur++ = ucNBytes;
 80027fa:	68fb      	ldr	r3, [r7, #12]
 80027fc:	1c5a      	adds	r2, r3, #1
 80027fe:	60fa      	str	r2, [r7, #12]
 8002800:	7dfa      	ldrb	r2, [r7, #23]
 8002802:	701a      	strb	r2, [r3, #0]
            *usLen += 1;
 8002804:	683b      	ldr	r3, [r7, #0]
 8002806:	881b      	ldrh	r3, [r3, #0]
 8002808:	3301      	adds	r3, #1
 800280a:	b29a      	uxth	r2, r3
 800280c:	683b      	ldr	r3, [r7, #0]
 800280e:	801a      	strh	r2, [r3, #0]

            eRegStatus =
                eMBRegCoilsCB( pucFrameCur, usRegAddress, usCoilCount,
 8002810:	8a7a      	ldrh	r2, [r7, #18]
 8002812:	8ab9      	ldrh	r1, [r7, #20]
 8002814:	2300      	movs	r3, #0
 8002816:	68f8      	ldr	r0, [r7, #12]
 8002818:	f7fd ff64 	bl	80006e4 <eMBRegCoilsCB>
 800281c:	4603      	mov	r3, r0
 800281e:	72fb      	strb	r3, [r7, #11]
                               MB_REG_READ );

            /* If an error occured convert it into a Modbus exception. */
            if( eRegStatus != MB_ENOERR )
 8002820:	7afb      	ldrb	r3, [r7, #11]
 8002822:	2b00      	cmp	r3, #0
 8002824:	d006      	beq.n	8002834 <eMBFuncReadCoils+0xd8>
            {
                eStatus = prveMBError2Exception( eRegStatus );
 8002826:	7afb      	ldrb	r3, [r7, #11]
 8002828:	4618      	mov	r0, r3
 800282a:	f000 fd9b 	bl	8003364 <prveMBError2Exception>
 800282e:	4603      	mov	r3, r0
 8002830:	75bb      	strb	r3, [r7, #22]
            if( eRegStatus != MB_ENOERR )
 8002832:	e00d      	b.n	8002850 <eMBFuncReadCoils+0xf4>
            else
            {
                /* The response contains the function code, the starting address
                 * and the quantity of registers. We reuse the old values in the 
                 * buffer because they are still valid. */
                *usLen += ucNBytes;;
 8002834:	683b      	ldr	r3, [r7, #0]
 8002836:	881a      	ldrh	r2, [r3, #0]
 8002838:	7dfb      	ldrb	r3, [r7, #23]
 800283a:	b29b      	uxth	r3, r3
 800283c:	4413      	add	r3, r2
 800283e:	b29a      	uxth	r2, r3
 8002840:	683b      	ldr	r3, [r7, #0]
 8002842:	801a      	strh	r2, [r3, #0]
            if( eRegStatus != MB_ENOERR )
 8002844:	e004      	b.n	8002850 <eMBFuncReadCoils+0xf4>
            }
        }
        else
        {
            eStatus = MB_EX_ILLEGAL_DATA_VALUE;
 8002846:	2303      	movs	r3, #3
 8002848:	75bb      	strb	r3, [r7, #22]
 800284a:	e001      	b.n	8002850 <eMBFuncReadCoils+0xf4>
    }
    else
    {
        /* Can't be a valid read coil register request because the length
         * is incorrect. */
        eStatus = MB_EX_ILLEGAL_DATA_VALUE;
 800284c:	2303      	movs	r3, #3
 800284e:	75bb      	strb	r3, [r7, #22]
    }
    return eStatus;
 8002850:	7dbb      	ldrb	r3, [r7, #22]
}
 8002852:	4618      	mov	r0, r3
 8002854:	3718      	adds	r7, #24
 8002856:	46bd      	mov	sp, r7
 8002858:	bd80      	pop	{r7, pc}

0800285a <eMBFuncWriteCoil>:

#if MB_FUNC_WRITE_COIL_ENABLED > 0
eMBException
eMBFuncWriteCoil( UCHAR * pucFrame, USHORT * usLen )
{
 800285a:	b580      	push	{r7, lr}
 800285c:	b084      	sub	sp, #16
 800285e:	af00      	add	r7, sp, #0
 8002860:	6078      	str	r0, [r7, #4]
 8002862:	6039      	str	r1, [r7, #0]
    USHORT          usRegAddress;
    UCHAR           ucBuf[2];

    eMBException    eStatus = MB_EX_NONE;
 8002864:	2300      	movs	r3, #0
 8002866:	73fb      	strb	r3, [r7, #15]
    eMBErrorCode    eRegStatus;

    if( *usLen == ( MB_PDU_FUNC_WRITE_SIZE + MB_PDU_SIZE_MIN ) )
 8002868:	683b      	ldr	r3, [r7, #0]
 800286a:	881b      	ldrh	r3, [r3, #0]
 800286c:	2b05      	cmp	r3, #5
 800286e:	d140      	bne.n	80028f2 <eMBFuncWriteCoil+0x98>
    {
        usRegAddress = ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_ADDR_OFF] << 8 );
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	3301      	adds	r3, #1
 8002874:	781b      	ldrb	r3, [r3, #0]
 8002876:	b29b      	uxth	r3, r3
 8002878:	021b      	lsls	r3, r3, #8
 800287a:	81bb      	strh	r3, [r7, #12]
        usRegAddress |= ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_ADDR_OFF + 1] );
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	3302      	adds	r3, #2
 8002880:	781b      	ldrb	r3, [r3, #0]
 8002882:	b29a      	uxth	r2, r3
 8002884:	89bb      	ldrh	r3, [r7, #12]
 8002886:	4313      	orrs	r3, r2
 8002888:	81bb      	strh	r3, [r7, #12]
        usRegAddress++;
 800288a:	89bb      	ldrh	r3, [r7, #12]
 800288c:	3301      	adds	r3, #1
 800288e:	81bb      	strh	r3, [r7, #12]

        if( ( pucFrame[MB_PDU_FUNC_WRITE_VALUE_OFF + 1] == 0x00 ) &&
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	3304      	adds	r3, #4
 8002894:	781b      	ldrb	r3, [r3, #0]
 8002896:	2b00      	cmp	r3, #0
 8002898:	d128      	bne.n	80028ec <eMBFuncWriteCoil+0x92>
            ( ( pucFrame[MB_PDU_FUNC_WRITE_VALUE_OFF] == 0xFF ) ||
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	3303      	adds	r3, #3
 800289e:	781b      	ldrb	r3, [r3, #0]
        if( ( pucFrame[MB_PDU_FUNC_WRITE_VALUE_OFF + 1] == 0x00 ) &&
 80028a0:	2bff      	cmp	r3, #255	; 0xff
 80028a2:	d004      	beq.n	80028ae <eMBFuncWriteCoil+0x54>
              ( pucFrame[MB_PDU_FUNC_WRITE_VALUE_OFF] == 0x00 ) ) )
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	3303      	adds	r3, #3
 80028a8:	781b      	ldrb	r3, [r3, #0]
            ( ( pucFrame[MB_PDU_FUNC_WRITE_VALUE_OFF] == 0xFF ) ||
 80028aa:	2b00      	cmp	r3, #0
 80028ac:	d11e      	bne.n	80028ec <eMBFuncWriteCoil+0x92>
        {
            ucBuf[1] = 0;
 80028ae:	2300      	movs	r3, #0
 80028b0:	727b      	strb	r3, [r7, #9]
            if( pucFrame[MB_PDU_FUNC_WRITE_VALUE_OFF] == 0xFF )
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	3303      	adds	r3, #3
 80028b6:	781b      	ldrb	r3, [r3, #0]
 80028b8:	2bff      	cmp	r3, #255	; 0xff
 80028ba:	d102      	bne.n	80028c2 <eMBFuncWriteCoil+0x68>
            {
                ucBuf[0] = 1;
 80028bc:	2301      	movs	r3, #1
 80028be:	723b      	strb	r3, [r7, #8]
 80028c0:	e001      	b.n	80028c6 <eMBFuncWriteCoil+0x6c>
            }
            else
            {
                ucBuf[0] = 0;
 80028c2:	2300      	movs	r3, #0
 80028c4:	723b      	strb	r3, [r7, #8]
            }
            eRegStatus =
                eMBRegCoilsCB( &ucBuf[0], usRegAddress, 1, MB_REG_WRITE );
 80028c6:	89b9      	ldrh	r1, [r7, #12]
 80028c8:	f107 0008 	add.w	r0, r7, #8
 80028cc:	2301      	movs	r3, #1
 80028ce:	2201      	movs	r2, #1
 80028d0:	f7fd ff08 	bl	80006e4 <eMBRegCoilsCB>
 80028d4:	4603      	mov	r3, r0
 80028d6:	72fb      	strb	r3, [r7, #11]

            /* If an error occured convert it into a Modbus exception. */
            if( eRegStatus != MB_ENOERR )
 80028d8:	7afb      	ldrb	r3, [r7, #11]
 80028da:	2b00      	cmp	r3, #0
 80028dc:	d00b      	beq.n	80028f6 <eMBFuncWriteCoil+0x9c>
            {
                eStatus = prveMBError2Exception( eRegStatus );
 80028de:	7afb      	ldrb	r3, [r7, #11]
 80028e0:	4618      	mov	r0, r3
 80028e2:	f000 fd3f 	bl	8003364 <prveMBError2Exception>
 80028e6:	4603      	mov	r3, r0
 80028e8:	73fb      	strb	r3, [r7, #15]
            if( eRegStatus != MB_ENOERR )
 80028ea:	e004      	b.n	80028f6 <eMBFuncWriteCoil+0x9c>
            }
        }
        else
        {
            eStatus = MB_EX_ILLEGAL_DATA_VALUE;
 80028ec:	2303      	movs	r3, #3
 80028ee:	73fb      	strb	r3, [r7, #15]
 80028f0:	e001      	b.n	80028f6 <eMBFuncWriteCoil+0x9c>
    }
    else
    {
        /* Can't be a valid write coil register request because the length
         * is incorrect. */
        eStatus = MB_EX_ILLEGAL_DATA_VALUE;
 80028f2:	2303      	movs	r3, #3
 80028f4:	73fb      	strb	r3, [r7, #15]
    }
    return eStatus;
 80028f6:	7bfb      	ldrb	r3, [r7, #15]
}
 80028f8:	4618      	mov	r0, r3
 80028fa:	3710      	adds	r7, #16
 80028fc:	46bd      	mov	sp, r7
 80028fe:	bd80      	pop	{r7, pc}

08002900 <eMBFuncWriteMultipleCoils>:
#endif

#if MB_FUNC_WRITE_MULTIPLE_COILS_ENABLED > 0
eMBException
eMBFuncWriteMultipleCoils( UCHAR * pucFrame, USHORT * usLen )
{
 8002900:	b580      	push	{r7, lr}
 8002902:	b084      	sub	sp, #16
 8002904:	af00      	add	r7, sp, #0
 8002906:	6078      	str	r0, [r7, #4]
 8002908:	6039      	str	r1, [r7, #0]
    USHORT          usRegAddress;
    USHORT          usCoilCnt;
    UCHAR           ucByteCount;
    UCHAR           ucByteCountVerify;

    eMBException    eStatus = MB_EX_NONE;
 800290a:	2300      	movs	r3, #0
 800290c:	73bb      	strb	r3, [r7, #14]
    eMBErrorCode    eRegStatus;

    if( *usLen > ( MB_PDU_FUNC_WRITE_SIZE + MB_PDU_SIZE_MIN ) )
 800290e:	683b      	ldr	r3, [r7, #0]
 8002910:	881b      	ldrh	r3, [r3, #0]
 8002912:	2b05      	cmp	r3, #5
 8002914:	d954      	bls.n	80029c0 <eMBFuncWriteMultipleCoils+0xc0>
    {
        usRegAddress = ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_MUL_ADDR_OFF] << 8 );
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	3301      	adds	r3, #1
 800291a:	781b      	ldrb	r3, [r3, #0]
 800291c:	b29b      	uxth	r3, r3
 800291e:	021b      	lsls	r3, r3, #8
 8002920:	81bb      	strh	r3, [r7, #12]
        usRegAddress |= ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_MUL_ADDR_OFF + 1] );
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	3302      	adds	r3, #2
 8002926:	781b      	ldrb	r3, [r3, #0]
 8002928:	b29a      	uxth	r2, r3
 800292a:	89bb      	ldrh	r3, [r7, #12]
 800292c:	4313      	orrs	r3, r2
 800292e:	81bb      	strh	r3, [r7, #12]
        usRegAddress++;
 8002930:	89bb      	ldrh	r3, [r7, #12]
 8002932:	3301      	adds	r3, #1
 8002934:	81bb      	strh	r3, [r7, #12]

        usCoilCnt = ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_MUL_COILCNT_OFF] << 8 );
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	3303      	adds	r3, #3
 800293a:	781b      	ldrb	r3, [r3, #0]
 800293c:	b29b      	uxth	r3, r3
 800293e:	021b      	lsls	r3, r3, #8
 8002940:	817b      	strh	r3, [r7, #10]
        usCoilCnt |= ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_MUL_COILCNT_OFF + 1] );
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	3304      	adds	r3, #4
 8002946:	781b      	ldrb	r3, [r3, #0]
 8002948:	b29a      	uxth	r2, r3
 800294a:	897b      	ldrh	r3, [r7, #10]
 800294c:	4313      	orrs	r3, r2
 800294e:	817b      	strh	r3, [r7, #10]

        ucByteCount = pucFrame[MB_PDU_FUNC_WRITE_MUL_BYTECNT_OFF];
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	795b      	ldrb	r3, [r3, #5]
 8002954:	727b      	strb	r3, [r7, #9]

        /* Compute the number of expected bytes in the request. */
        if( ( usCoilCnt & 0x0007 ) != 0 )
 8002956:	897b      	ldrh	r3, [r7, #10]
 8002958:	f003 0307 	and.w	r3, r3, #7
 800295c:	2b00      	cmp	r3, #0
 800295e:	d006      	beq.n	800296e <eMBFuncWriteMultipleCoils+0x6e>
        {
            ucByteCountVerify = ( UCHAR )( usCoilCnt / 8 + 1 );
 8002960:	897b      	ldrh	r3, [r7, #10]
 8002962:	08db      	lsrs	r3, r3, #3
 8002964:	b29b      	uxth	r3, r3
 8002966:	b2db      	uxtb	r3, r3
 8002968:	3301      	adds	r3, #1
 800296a:	73fb      	strb	r3, [r7, #15]
 800296c:	e003      	b.n	8002976 <eMBFuncWriteMultipleCoils+0x76>
        }
        else
        {
            ucByteCountVerify = ( UCHAR )( usCoilCnt / 8 );
 800296e:	897b      	ldrh	r3, [r7, #10]
 8002970:	08db      	lsrs	r3, r3, #3
 8002972:	b29b      	uxth	r3, r3
 8002974:	73fb      	strb	r3, [r7, #15]
        }

        if( ( usCoilCnt >= 1 ) &&
 8002976:	897b      	ldrh	r3, [r7, #10]
 8002978:	2b00      	cmp	r3, #0
 800297a:	d01e      	beq.n	80029ba <eMBFuncWriteMultipleCoils+0xba>
 800297c:	897b      	ldrh	r3, [r7, #10]
 800297e:	f5b3 6ff6 	cmp.w	r3, #1968	; 0x7b0
 8002982:	d81a      	bhi.n	80029ba <eMBFuncWriteMultipleCoils+0xba>
            ( usCoilCnt <= MB_PDU_FUNC_WRITE_MUL_COILCNT_MAX ) &&
 8002984:	7bfa      	ldrb	r2, [r7, #15]
 8002986:	7a7b      	ldrb	r3, [r7, #9]
 8002988:	429a      	cmp	r2, r3
 800298a:	d116      	bne.n	80029ba <eMBFuncWriteMultipleCoils+0xba>
            ( ucByteCountVerify == ucByteCount ) )
        {
            eRegStatus =
                eMBRegCoilsCB( &pucFrame[MB_PDU_FUNC_WRITE_MUL_VALUES_OFF],
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	1d98      	adds	r0, r3, #6
 8002990:	897a      	ldrh	r2, [r7, #10]
 8002992:	89b9      	ldrh	r1, [r7, #12]
 8002994:	2301      	movs	r3, #1
 8002996:	f7fd fea5 	bl	80006e4 <eMBRegCoilsCB>
 800299a:	4603      	mov	r3, r0
 800299c:	723b      	strb	r3, [r7, #8]
                               usRegAddress, usCoilCnt, MB_REG_WRITE );

            /* If an error occured convert it into a Modbus exception. */
            if( eRegStatus != MB_ENOERR )
 800299e:	7a3b      	ldrb	r3, [r7, #8]
 80029a0:	2b00      	cmp	r3, #0
 80029a2:	d006      	beq.n	80029b2 <eMBFuncWriteMultipleCoils+0xb2>
            {
                eStatus = prveMBError2Exception( eRegStatus );
 80029a4:	7a3b      	ldrb	r3, [r7, #8]
 80029a6:	4618      	mov	r0, r3
 80029a8:	f000 fcdc 	bl	8003364 <prveMBError2Exception>
 80029ac:	4603      	mov	r3, r0
 80029ae:	73bb      	strb	r3, [r7, #14]
            if( eRegStatus != MB_ENOERR )
 80029b0:	e008      	b.n	80029c4 <eMBFuncWriteMultipleCoils+0xc4>
            else
            {
                /* The response contains the function code, the starting address
                 * and the quantity of registers. We reuse the old values in the 
                 * buffer because they are still valid. */
                *usLen = MB_PDU_FUNC_WRITE_MUL_BYTECNT_OFF;
 80029b2:	683b      	ldr	r3, [r7, #0]
 80029b4:	2205      	movs	r2, #5
 80029b6:	801a      	strh	r2, [r3, #0]
            if( eRegStatus != MB_ENOERR )
 80029b8:	e004      	b.n	80029c4 <eMBFuncWriteMultipleCoils+0xc4>
            }
        }
        else
        {
            eStatus = MB_EX_ILLEGAL_DATA_VALUE;
 80029ba:	2303      	movs	r3, #3
 80029bc:	73bb      	strb	r3, [r7, #14]
 80029be:	e001      	b.n	80029c4 <eMBFuncWriteMultipleCoils+0xc4>
    }
    else
    {
        /* Can't be a valid write coil register request because the length
         * is incorrect. */
        eStatus = MB_EX_ILLEGAL_DATA_VALUE;
 80029c0:	2303      	movs	r3, #3
 80029c2:	73bb      	strb	r3, [r7, #14]
    }
    return eStatus;
 80029c4:	7bbb      	ldrb	r3, [r7, #14]
}
 80029c6:	4618      	mov	r0, r3
 80029c8:	3710      	adds	r7, #16
 80029ca:	46bd      	mov	sp, r7
 80029cc:	bd80      	pop	{r7, pc}

080029ce <eMBFuncReadDiscreteInputs>:

#if MB_FUNC_READ_COILS_ENABLED > 0

eMBException
eMBFuncReadDiscreteInputs( UCHAR * pucFrame, USHORT * usLen )
{
 80029ce:	b580      	push	{r7, lr}
 80029d0:	b086      	sub	sp, #24
 80029d2:	af00      	add	r7, sp, #0
 80029d4:	6078      	str	r0, [r7, #4]
 80029d6:	6039      	str	r1, [r7, #0]
    USHORT          usRegAddress;
    USHORT          usDiscreteCnt;
    UCHAR           ucNBytes;
    UCHAR          *pucFrameCur;

    eMBException    eStatus = MB_EX_NONE;
 80029d8:	2300      	movs	r3, #0
 80029da:	75bb      	strb	r3, [r7, #22]
    eMBErrorCode    eRegStatus;

    if( *usLen == ( MB_PDU_FUNC_READ_SIZE + MB_PDU_SIZE_MIN ) )
 80029dc:	683b      	ldr	r3, [r7, #0]
 80029de:	881b      	ldrh	r3, [r3, #0]
 80029e0:	2b05      	cmp	r3, #5
 80029e2:	d16c      	bne.n	8002abe <eMBFuncReadDiscreteInputs+0xf0>
    {
        usRegAddress = ( USHORT )( pucFrame[MB_PDU_FUNC_READ_ADDR_OFF] << 8 );
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	3301      	adds	r3, #1
 80029e8:	781b      	ldrb	r3, [r3, #0]
 80029ea:	b29b      	uxth	r3, r3
 80029ec:	021b      	lsls	r3, r3, #8
 80029ee:	82bb      	strh	r3, [r7, #20]
        usRegAddress |= ( USHORT )( pucFrame[MB_PDU_FUNC_READ_ADDR_OFF + 1] );
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	3302      	adds	r3, #2
 80029f4:	781b      	ldrb	r3, [r3, #0]
 80029f6:	b29a      	uxth	r2, r3
 80029f8:	8abb      	ldrh	r3, [r7, #20]
 80029fa:	4313      	orrs	r3, r2
 80029fc:	82bb      	strh	r3, [r7, #20]
        usRegAddress++;
 80029fe:	8abb      	ldrh	r3, [r7, #20]
 8002a00:	3301      	adds	r3, #1
 8002a02:	82bb      	strh	r3, [r7, #20]

        usDiscreteCnt = ( USHORT )( pucFrame[MB_PDU_FUNC_READ_DISCCNT_OFF] << 8 );
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	3303      	adds	r3, #3
 8002a08:	781b      	ldrb	r3, [r3, #0]
 8002a0a:	b29b      	uxth	r3, r3
 8002a0c:	021b      	lsls	r3, r3, #8
 8002a0e:	827b      	strh	r3, [r7, #18]
        usDiscreteCnt |= ( USHORT )( pucFrame[MB_PDU_FUNC_READ_DISCCNT_OFF + 1] );
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	3304      	adds	r3, #4
 8002a14:	781b      	ldrb	r3, [r3, #0]
 8002a16:	b29a      	uxth	r2, r3
 8002a18:	8a7b      	ldrh	r3, [r7, #18]
 8002a1a:	4313      	orrs	r3, r2
 8002a1c:	827b      	strh	r3, [r7, #18]

        /* Check if the number of registers to read is valid. If not
         * return Modbus illegal data value exception. 
         */
        if( ( usDiscreteCnt >= 1 ) &&
 8002a1e:	8a7b      	ldrh	r3, [r7, #18]
 8002a20:	2b00      	cmp	r3, #0
 8002a22:	d049      	beq.n	8002ab8 <eMBFuncReadDiscreteInputs+0xea>
 8002a24:	8a7b      	ldrh	r3, [r7, #18]
 8002a26:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8002a2a:	d245      	bcs.n	8002ab8 <eMBFuncReadDiscreteInputs+0xea>
            ( usDiscreteCnt < MB_PDU_FUNC_READ_DISCCNT_MAX ) )
        {
            /* Set the current PDU data pointer to the beginning. */
            pucFrameCur = &pucFrame[MB_PDU_FUNC_OFF];
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	60fb      	str	r3, [r7, #12]
            *usLen = MB_PDU_FUNC_OFF;
 8002a30:	683b      	ldr	r3, [r7, #0]
 8002a32:	2200      	movs	r2, #0
 8002a34:	801a      	strh	r2, [r3, #0]

            /* First byte contains the function code. */
            *pucFrameCur++ = MB_FUNC_READ_DISCRETE_INPUTS;
 8002a36:	68fb      	ldr	r3, [r7, #12]
 8002a38:	1c5a      	adds	r2, r3, #1
 8002a3a:	60fa      	str	r2, [r7, #12]
 8002a3c:	2202      	movs	r2, #2
 8002a3e:	701a      	strb	r2, [r3, #0]
            *usLen += 1;
 8002a40:	683b      	ldr	r3, [r7, #0]
 8002a42:	881b      	ldrh	r3, [r3, #0]
 8002a44:	3301      	adds	r3, #1
 8002a46:	b29a      	uxth	r2, r3
 8002a48:	683b      	ldr	r3, [r7, #0]
 8002a4a:	801a      	strh	r2, [r3, #0]

            /* Test if the quantity of coils is a multiple of 8. If not last
             * byte is only partially field with unused coils set to zero. */
            if( ( usDiscreteCnt & 0x0007 ) != 0 )
 8002a4c:	8a7b      	ldrh	r3, [r7, #18]
 8002a4e:	f003 0307 	and.w	r3, r3, #7
 8002a52:	2b00      	cmp	r3, #0
 8002a54:	d006      	beq.n	8002a64 <eMBFuncReadDiscreteInputs+0x96>
            {
                ucNBytes = ( UCHAR ) ( usDiscreteCnt / 8 + 1 );
 8002a56:	8a7b      	ldrh	r3, [r7, #18]
 8002a58:	08db      	lsrs	r3, r3, #3
 8002a5a:	b29b      	uxth	r3, r3
 8002a5c:	b2db      	uxtb	r3, r3
 8002a5e:	3301      	adds	r3, #1
 8002a60:	75fb      	strb	r3, [r7, #23]
 8002a62:	e003      	b.n	8002a6c <eMBFuncReadDiscreteInputs+0x9e>
            }
            else
            {
                ucNBytes = ( UCHAR ) ( usDiscreteCnt / 8 );
 8002a64:	8a7b      	ldrh	r3, [r7, #18]
 8002a66:	08db      	lsrs	r3, r3, #3
 8002a68:	b29b      	uxth	r3, r3
 8002a6a:	75fb      	strb	r3, [r7, #23]
            }
            *pucFrameCur++ = ucNBytes;
 8002a6c:	68fb      	ldr	r3, [r7, #12]
 8002a6e:	1c5a      	adds	r2, r3, #1
 8002a70:	60fa      	str	r2, [r7, #12]
 8002a72:	7dfa      	ldrb	r2, [r7, #23]
 8002a74:	701a      	strb	r2, [r3, #0]
            *usLen += 1;
 8002a76:	683b      	ldr	r3, [r7, #0]
 8002a78:	881b      	ldrh	r3, [r3, #0]
 8002a7a:	3301      	adds	r3, #1
 8002a7c:	b29a      	uxth	r2, r3
 8002a7e:	683b      	ldr	r3, [r7, #0]
 8002a80:	801a      	strh	r2, [r3, #0]

            eRegStatus =
                eMBRegDiscreteCB( pucFrameCur, usRegAddress, usDiscreteCnt );
 8002a82:	8a7a      	ldrh	r2, [r7, #18]
 8002a84:	8abb      	ldrh	r3, [r7, #20]
 8002a86:	4619      	mov	r1, r3
 8002a88:	68f8      	ldr	r0, [r7, #12]
 8002a8a:	f7fd fe3e 	bl	800070a <eMBRegDiscreteCB>
 8002a8e:	4603      	mov	r3, r0
 8002a90:	72fb      	strb	r3, [r7, #11]

            /* If an error occured convert it into a Modbus exception. */
            if( eRegStatus != MB_ENOERR )
 8002a92:	7afb      	ldrb	r3, [r7, #11]
 8002a94:	2b00      	cmp	r3, #0
 8002a96:	d006      	beq.n	8002aa6 <eMBFuncReadDiscreteInputs+0xd8>
            {
                eStatus = prveMBError2Exception( eRegStatus );
 8002a98:	7afb      	ldrb	r3, [r7, #11]
 8002a9a:	4618      	mov	r0, r3
 8002a9c:	f000 fc62 	bl	8003364 <prveMBError2Exception>
 8002aa0:	4603      	mov	r3, r0
 8002aa2:	75bb      	strb	r3, [r7, #22]
            if( eRegStatus != MB_ENOERR )
 8002aa4:	e00d      	b.n	8002ac2 <eMBFuncReadDiscreteInputs+0xf4>
            else
            {
                /* The response contains the function code, the starting address
                 * and the quantity of registers. We reuse the old values in the 
                 * buffer because they are still valid. */
                *usLen += ucNBytes;;
 8002aa6:	683b      	ldr	r3, [r7, #0]
 8002aa8:	881a      	ldrh	r2, [r3, #0]
 8002aaa:	7dfb      	ldrb	r3, [r7, #23]
 8002aac:	b29b      	uxth	r3, r3
 8002aae:	4413      	add	r3, r2
 8002ab0:	b29a      	uxth	r2, r3
 8002ab2:	683b      	ldr	r3, [r7, #0]
 8002ab4:	801a      	strh	r2, [r3, #0]
            if( eRegStatus != MB_ENOERR )
 8002ab6:	e004      	b.n	8002ac2 <eMBFuncReadDiscreteInputs+0xf4>
            }
        }
        else
        {
            eStatus = MB_EX_ILLEGAL_DATA_VALUE;
 8002ab8:	2303      	movs	r3, #3
 8002aba:	75bb      	strb	r3, [r7, #22]
 8002abc:	e001      	b.n	8002ac2 <eMBFuncReadDiscreteInputs+0xf4>
    }
    else
    {
        /* Can't be a valid read coil register request because the length
         * is incorrect. */
        eStatus = MB_EX_ILLEGAL_DATA_VALUE;
 8002abe:	2303      	movs	r3, #3
 8002ac0:	75bb      	strb	r3, [r7, #22]
    }
    return eStatus;
 8002ac2:	7dbb      	ldrb	r3, [r7, #22]
}
 8002ac4:	4618      	mov	r0, r3
 8002ac6:	3718      	adds	r7, #24
 8002ac8:	46bd      	mov	sp, r7
 8002aca:	bd80      	pop	{r7, pc}

08002acc <eMBFuncWriteHoldingRegister>:

#if MB_FUNC_WRITE_HOLDING_ENABLED > 0

eMBException
eMBFuncWriteHoldingRegister( UCHAR * pucFrame, USHORT * usLen )
{
 8002acc:	b580      	push	{r7, lr}
 8002ace:	b084      	sub	sp, #16
 8002ad0:	af00      	add	r7, sp, #0
 8002ad2:	6078      	str	r0, [r7, #4]
 8002ad4:	6039      	str	r1, [r7, #0]
    USHORT          usRegAddress;
    eMBException    eStatus = MB_EX_NONE;
 8002ad6:	2300      	movs	r3, #0
 8002ad8:	73fb      	strb	r3, [r7, #15]
    eMBErrorCode    eRegStatus;

    if( *usLen == ( MB_PDU_FUNC_WRITE_SIZE + MB_PDU_SIZE_MIN ) )
 8002ada:	683b      	ldr	r3, [r7, #0]
 8002adc:	881b      	ldrh	r3, [r3, #0]
 8002ade:	2b05      	cmp	r3, #5
 8002ae0:	d122      	bne.n	8002b28 <eMBFuncWriteHoldingRegister+0x5c>
    {
        usRegAddress = ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_ADDR_OFF] << 8 );
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	3301      	adds	r3, #1
 8002ae6:	781b      	ldrb	r3, [r3, #0]
 8002ae8:	b29b      	uxth	r3, r3
 8002aea:	021b      	lsls	r3, r3, #8
 8002aec:	81bb      	strh	r3, [r7, #12]
        usRegAddress |= ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_ADDR_OFF + 1] );
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	3302      	adds	r3, #2
 8002af2:	781b      	ldrb	r3, [r3, #0]
 8002af4:	b29a      	uxth	r2, r3
 8002af6:	89bb      	ldrh	r3, [r7, #12]
 8002af8:	4313      	orrs	r3, r2
 8002afa:	81bb      	strh	r3, [r7, #12]
        usRegAddress++;
 8002afc:	89bb      	ldrh	r3, [r7, #12]
 8002afe:	3301      	adds	r3, #1
 8002b00:	81bb      	strh	r3, [r7, #12]

        /* Make callback to update the value. */
        eRegStatus = eMBRegHoldingCB( &pucFrame[MB_PDU_FUNC_WRITE_VALUE_OFF],
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	1cd8      	adds	r0, r3, #3
 8002b06:	89b9      	ldrh	r1, [r7, #12]
 8002b08:	2301      	movs	r3, #1
 8002b0a:	2201      	movs	r2, #1
 8002b0c:	f7fd fd76 	bl	80005fc <eMBRegHoldingCB>
 8002b10:	4603      	mov	r3, r0
 8002b12:	72fb      	strb	r3, [r7, #11]
                                      usRegAddress, 1, MB_REG_WRITE );

        /* If an error occured convert it into a Modbus exception. */
        if( eRegStatus != MB_ENOERR )
 8002b14:	7afb      	ldrb	r3, [r7, #11]
 8002b16:	2b00      	cmp	r3, #0
 8002b18:	d008      	beq.n	8002b2c <eMBFuncWriteHoldingRegister+0x60>
        {
            eStatus = prveMBError2Exception( eRegStatus );
 8002b1a:	7afb      	ldrb	r3, [r7, #11]
 8002b1c:	4618      	mov	r0, r3
 8002b1e:	f000 fc21 	bl	8003364 <prveMBError2Exception>
 8002b22:	4603      	mov	r3, r0
 8002b24:	73fb      	strb	r3, [r7, #15]
 8002b26:	e001      	b.n	8002b2c <eMBFuncWriteHoldingRegister+0x60>
        }
    }
    else
    {
        /* Can't be a valid request because the length is incorrect. */
        eStatus = MB_EX_ILLEGAL_DATA_VALUE;
 8002b28:	2303      	movs	r3, #3
 8002b2a:	73fb      	strb	r3, [r7, #15]
    }
    return eStatus;
 8002b2c:	7bfb      	ldrb	r3, [r7, #15]
}
 8002b2e:	4618      	mov	r0, r3
 8002b30:	3710      	adds	r7, #16
 8002b32:	46bd      	mov	sp, r7
 8002b34:	bd80      	pop	{r7, pc}

08002b36 <eMBFuncWriteMultipleHoldingRegister>:
#endif

#if MB_FUNC_WRITE_MULTIPLE_HOLDING_ENABLED > 0
eMBException
eMBFuncWriteMultipleHoldingRegister( UCHAR * pucFrame, USHORT * usLen )
{
 8002b36:	b580      	push	{r7, lr}
 8002b38:	b084      	sub	sp, #16
 8002b3a:	af00      	add	r7, sp, #0
 8002b3c:	6078      	str	r0, [r7, #4]
 8002b3e:	6039      	str	r1, [r7, #0]
    USHORT          usRegAddress;
    USHORT          usRegCount;
    UCHAR           ucRegByteCount;

    eMBException    eStatus = MB_EX_NONE;
 8002b40:	2300      	movs	r3, #0
 8002b42:	73fb      	strb	r3, [r7, #15]
    eMBErrorCode    eRegStatus;

    if( *usLen >= ( MB_PDU_FUNC_WRITE_MUL_SIZE_MIN + MB_PDU_SIZE_MIN ) )
 8002b44:	683b      	ldr	r3, [r7, #0]
 8002b46:	881b      	ldrh	r3, [r3, #0]
 8002b48:	2b05      	cmp	r3, #5
 8002b4a:	d946      	bls.n	8002bda <eMBFuncWriteMultipleHoldingRegister+0xa4>
    {
        usRegAddress = ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_MUL_ADDR_OFF] << 8 );
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	3301      	adds	r3, #1
 8002b50:	781b      	ldrb	r3, [r3, #0]
 8002b52:	b29b      	uxth	r3, r3
 8002b54:	021b      	lsls	r3, r3, #8
 8002b56:	81bb      	strh	r3, [r7, #12]
        usRegAddress |= ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_MUL_ADDR_OFF + 1] );
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	3302      	adds	r3, #2
 8002b5c:	781b      	ldrb	r3, [r3, #0]
 8002b5e:	b29a      	uxth	r2, r3
 8002b60:	89bb      	ldrh	r3, [r7, #12]
 8002b62:	4313      	orrs	r3, r2
 8002b64:	81bb      	strh	r3, [r7, #12]
        usRegAddress++;
 8002b66:	89bb      	ldrh	r3, [r7, #12]
 8002b68:	3301      	adds	r3, #1
 8002b6a:	81bb      	strh	r3, [r7, #12]

        usRegCount = ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_MUL_REGCNT_OFF] << 8 );
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	3303      	adds	r3, #3
 8002b70:	781b      	ldrb	r3, [r3, #0]
 8002b72:	b29b      	uxth	r3, r3
 8002b74:	021b      	lsls	r3, r3, #8
 8002b76:	817b      	strh	r3, [r7, #10]
        usRegCount |= ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_MUL_REGCNT_OFF + 1] );
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	3304      	adds	r3, #4
 8002b7c:	781b      	ldrb	r3, [r3, #0]
 8002b7e:	b29a      	uxth	r2, r3
 8002b80:	897b      	ldrh	r3, [r7, #10]
 8002b82:	4313      	orrs	r3, r2
 8002b84:	817b      	strh	r3, [r7, #10]

        ucRegByteCount = pucFrame[MB_PDU_FUNC_WRITE_MUL_BYTECNT_OFF];
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	795b      	ldrb	r3, [r3, #5]
 8002b8a:	727b      	strb	r3, [r7, #9]

        if( ( usRegCount >= 1 ) &&
 8002b8c:	897b      	ldrh	r3, [r7, #10]
 8002b8e:	2b00      	cmp	r3, #0
 8002b90:	d020      	beq.n	8002bd4 <eMBFuncWriteMultipleHoldingRegister+0x9e>
 8002b92:	897b      	ldrh	r3, [r7, #10]
 8002b94:	2b78      	cmp	r3, #120	; 0x78
 8002b96:	d81d      	bhi.n	8002bd4 <eMBFuncWriteMultipleHoldingRegister+0x9e>
            ( usRegCount <= MB_PDU_FUNC_WRITE_MUL_REGCNT_MAX ) &&
            ( ucRegByteCount == ( UCHAR ) ( 2 * usRegCount ) ) )
 8002b98:	897b      	ldrh	r3, [r7, #10]
 8002b9a:	b2db      	uxtb	r3, r3
 8002b9c:	005b      	lsls	r3, r3, #1
 8002b9e:	b2db      	uxtb	r3, r3
            ( usRegCount <= MB_PDU_FUNC_WRITE_MUL_REGCNT_MAX ) &&
 8002ba0:	7a7a      	ldrb	r2, [r7, #9]
 8002ba2:	429a      	cmp	r2, r3
 8002ba4:	d116      	bne.n	8002bd4 <eMBFuncWriteMultipleHoldingRegister+0x9e>
        {
            /* Make callback to update the register values. */
            eRegStatus =
                eMBRegHoldingCB( &pucFrame[MB_PDU_FUNC_WRITE_MUL_VALUES_OFF],
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	1d98      	adds	r0, r3, #6
 8002baa:	897a      	ldrh	r2, [r7, #10]
 8002bac:	89b9      	ldrh	r1, [r7, #12]
 8002bae:	2301      	movs	r3, #1
 8002bb0:	f7fd fd24 	bl	80005fc <eMBRegHoldingCB>
 8002bb4:	4603      	mov	r3, r0
 8002bb6:	723b      	strb	r3, [r7, #8]
                                 usRegAddress, usRegCount, MB_REG_WRITE );

            /* If an error occured convert it into a Modbus exception. */
            if( eRegStatus != MB_ENOERR )
 8002bb8:	7a3b      	ldrb	r3, [r7, #8]
 8002bba:	2b00      	cmp	r3, #0
 8002bbc:	d006      	beq.n	8002bcc <eMBFuncWriteMultipleHoldingRegister+0x96>
            {
                eStatus = prveMBError2Exception( eRegStatus );
 8002bbe:	7a3b      	ldrb	r3, [r7, #8]
 8002bc0:	4618      	mov	r0, r3
 8002bc2:	f000 fbcf 	bl	8003364 <prveMBError2Exception>
 8002bc6:	4603      	mov	r3, r0
 8002bc8:	73fb      	strb	r3, [r7, #15]
            if( eRegStatus != MB_ENOERR )
 8002bca:	e008      	b.n	8002bde <eMBFuncWriteMultipleHoldingRegister+0xa8>
            {
                /* The response contains the function code, the starting
                 * address and the quantity of registers. We reuse the
                 * old values in the buffer because they are still valid.
                 */
                *usLen = MB_PDU_FUNC_WRITE_MUL_BYTECNT_OFF;
 8002bcc:	683b      	ldr	r3, [r7, #0]
 8002bce:	2205      	movs	r2, #5
 8002bd0:	801a      	strh	r2, [r3, #0]
            if( eRegStatus != MB_ENOERR )
 8002bd2:	e004      	b.n	8002bde <eMBFuncWriteMultipleHoldingRegister+0xa8>
            }
        }
        else
        {
            eStatus = MB_EX_ILLEGAL_DATA_VALUE;
 8002bd4:	2303      	movs	r3, #3
 8002bd6:	73fb      	strb	r3, [r7, #15]
 8002bd8:	e001      	b.n	8002bde <eMBFuncWriteMultipleHoldingRegister+0xa8>
        }
    }
    else
    {
        /* Can't be a valid request because the length is incorrect. */
        eStatus = MB_EX_ILLEGAL_DATA_VALUE;
 8002bda:	2303      	movs	r3, #3
 8002bdc:	73fb      	strb	r3, [r7, #15]
    }
    return eStatus;
 8002bde:	7bfb      	ldrb	r3, [r7, #15]
}
 8002be0:	4618      	mov	r0, r3
 8002be2:	3710      	adds	r7, #16
 8002be4:	46bd      	mov	sp, r7
 8002be6:	bd80      	pop	{r7, pc}

08002be8 <eMBFuncReadHoldingRegister>:

#if MB_FUNC_READ_HOLDING_ENABLED > 0

eMBException
eMBFuncReadHoldingRegister( UCHAR * pucFrame, USHORT * usLen )
{
 8002be8:	b580      	push	{r7, lr}
 8002bea:	b086      	sub	sp, #24
 8002bec:	af00      	add	r7, sp, #0
 8002bee:	6078      	str	r0, [r7, #4]
 8002bf0:	6039      	str	r1, [r7, #0]
    USHORT          usRegAddress;
    USHORT          usRegCount;
    UCHAR          *pucFrameCur;

    eMBException    eStatus = MB_EX_NONE;
 8002bf2:	2300      	movs	r3, #0
 8002bf4:	75fb      	strb	r3, [r7, #23]
    eMBErrorCode    eRegStatus;

    if( *usLen == ( MB_PDU_FUNC_READ_SIZE + MB_PDU_SIZE_MIN ) )
 8002bf6:	683b      	ldr	r3, [r7, #0]
 8002bf8:	881b      	ldrh	r3, [r3, #0]
 8002bfa:	2b05      	cmp	r3, #5
 8002bfc:	d15c      	bne.n	8002cb8 <eMBFuncReadHoldingRegister+0xd0>
    {
        usRegAddress = ( USHORT )( pucFrame[MB_PDU_FUNC_READ_ADDR_OFF] << 8 );
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	3301      	adds	r3, #1
 8002c02:	781b      	ldrb	r3, [r3, #0]
 8002c04:	b29b      	uxth	r3, r3
 8002c06:	021b      	lsls	r3, r3, #8
 8002c08:	82bb      	strh	r3, [r7, #20]
        usRegAddress |= ( USHORT )( pucFrame[MB_PDU_FUNC_READ_ADDR_OFF + 1] );
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	3302      	adds	r3, #2
 8002c0e:	781b      	ldrb	r3, [r3, #0]
 8002c10:	b29a      	uxth	r2, r3
 8002c12:	8abb      	ldrh	r3, [r7, #20]
 8002c14:	4313      	orrs	r3, r2
 8002c16:	82bb      	strh	r3, [r7, #20]
        usRegAddress++;
 8002c18:	8abb      	ldrh	r3, [r7, #20]
 8002c1a:	3301      	adds	r3, #1
 8002c1c:	82bb      	strh	r3, [r7, #20]

        usRegCount = ( USHORT )( pucFrame[MB_PDU_FUNC_READ_REGCNT_OFF] << 8 );
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	3303      	adds	r3, #3
 8002c22:	781b      	ldrb	r3, [r3, #0]
 8002c24:	b29b      	uxth	r3, r3
 8002c26:	021b      	lsls	r3, r3, #8
 8002c28:	827b      	strh	r3, [r7, #18]
        usRegCount = ( USHORT )( pucFrame[MB_PDU_FUNC_READ_REGCNT_OFF + 1] );
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	3304      	adds	r3, #4
 8002c2e:	781b      	ldrb	r3, [r3, #0]
 8002c30:	827b      	strh	r3, [r7, #18]

        /* Check if the number of registers to read is valid. If not
         * return Modbus illegal data value exception. 
         */
        if( ( usRegCount >= 1 ) && ( usRegCount <= MB_PDU_FUNC_READ_REGCNT_MAX ) )
 8002c32:	8a7b      	ldrh	r3, [r7, #18]
 8002c34:	2b00      	cmp	r3, #0
 8002c36:	d03c      	beq.n	8002cb2 <eMBFuncReadHoldingRegister+0xca>
 8002c38:	8a7b      	ldrh	r3, [r7, #18]
 8002c3a:	2b7d      	cmp	r3, #125	; 0x7d
 8002c3c:	d839      	bhi.n	8002cb2 <eMBFuncReadHoldingRegister+0xca>
        {
            /* Set the current PDU data pointer to the beginning. */
            pucFrameCur = &pucFrame[MB_PDU_FUNC_OFF];
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	60fb      	str	r3, [r7, #12]
            *usLen = MB_PDU_FUNC_OFF;
 8002c42:	683b      	ldr	r3, [r7, #0]
 8002c44:	2200      	movs	r2, #0
 8002c46:	801a      	strh	r2, [r3, #0]

            /* First byte contains the function code. */
            *pucFrameCur++ = MB_FUNC_READ_HOLDING_REGISTER;
 8002c48:	68fb      	ldr	r3, [r7, #12]
 8002c4a:	1c5a      	adds	r2, r3, #1
 8002c4c:	60fa      	str	r2, [r7, #12]
 8002c4e:	2203      	movs	r2, #3
 8002c50:	701a      	strb	r2, [r3, #0]
            *usLen += 1;
 8002c52:	683b      	ldr	r3, [r7, #0]
 8002c54:	881b      	ldrh	r3, [r3, #0]
 8002c56:	3301      	adds	r3, #1
 8002c58:	b29a      	uxth	r2, r3
 8002c5a:	683b      	ldr	r3, [r7, #0]
 8002c5c:	801a      	strh	r2, [r3, #0]

            /* Second byte in the response contain the number of bytes. */
            *pucFrameCur++ = ( UCHAR ) ( usRegCount * 2 );
 8002c5e:	8a7b      	ldrh	r3, [r7, #18]
 8002c60:	b2da      	uxtb	r2, r3
 8002c62:	68fb      	ldr	r3, [r7, #12]
 8002c64:	1c59      	adds	r1, r3, #1
 8002c66:	60f9      	str	r1, [r7, #12]
 8002c68:	0052      	lsls	r2, r2, #1
 8002c6a:	b2d2      	uxtb	r2, r2
 8002c6c:	701a      	strb	r2, [r3, #0]
            *usLen += 1;
 8002c6e:	683b      	ldr	r3, [r7, #0]
 8002c70:	881b      	ldrh	r3, [r3, #0]
 8002c72:	3301      	adds	r3, #1
 8002c74:	b29a      	uxth	r2, r3
 8002c76:	683b      	ldr	r3, [r7, #0]
 8002c78:	801a      	strh	r2, [r3, #0]

            /* Make callback to fill the buffer. */
            eRegStatus = eMBRegHoldingCB( pucFrameCur, usRegAddress, usRegCount, MB_REG_READ );
 8002c7a:	8a7a      	ldrh	r2, [r7, #18]
 8002c7c:	8ab9      	ldrh	r1, [r7, #20]
 8002c7e:	2300      	movs	r3, #0
 8002c80:	68f8      	ldr	r0, [r7, #12]
 8002c82:	f7fd fcbb 	bl	80005fc <eMBRegHoldingCB>
 8002c86:	4603      	mov	r3, r0
 8002c88:	72fb      	strb	r3, [r7, #11]
            /* If an error occured convert it into a Modbus exception. */
            if( eRegStatus != MB_ENOERR )
 8002c8a:	7afb      	ldrb	r3, [r7, #11]
 8002c8c:	2b00      	cmp	r3, #0
 8002c8e:	d006      	beq.n	8002c9e <eMBFuncReadHoldingRegister+0xb6>
            {
                eStatus = prveMBError2Exception( eRegStatus );
 8002c90:	7afb      	ldrb	r3, [r7, #11]
 8002c92:	4618      	mov	r0, r3
 8002c94:	f000 fb66 	bl	8003364 <prveMBError2Exception>
 8002c98:	4603      	mov	r3, r0
 8002c9a:	75fb      	strb	r3, [r7, #23]
            if( eRegStatus != MB_ENOERR )
 8002c9c:	e00e      	b.n	8002cbc <eMBFuncReadHoldingRegister+0xd4>
            }
            else
            {
                *usLen += usRegCount * 2;
 8002c9e:	683b      	ldr	r3, [r7, #0]
 8002ca0:	881a      	ldrh	r2, [r3, #0]
 8002ca2:	8a7b      	ldrh	r3, [r7, #18]
 8002ca4:	005b      	lsls	r3, r3, #1
 8002ca6:	b29b      	uxth	r3, r3
 8002ca8:	4413      	add	r3, r2
 8002caa:	b29a      	uxth	r2, r3
 8002cac:	683b      	ldr	r3, [r7, #0]
 8002cae:	801a      	strh	r2, [r3, #0]
            if( eRegStatus != MB_ENOERR )
 8002cb0:	e004      	b.n	8002cbc <eMBFuncReadHoldingRegister+0xd4>
            }
        }
        else
        {
            eStatus = MB_EX_ILLEGAL_DATA_VALUE;
 8002cb2:	2303      	movs	r3, #3
 8002cb4:	75fb      	strb	r3, [r7, #23]
 8002cb6:	e001      	b.n	8002cbc <eMBFuncReadHoldingRegister+0xd4>
        }
    }
    else
    {
        /* Can't be a valid request because the length is incorrect. */
        eStatus = MB_EX_ILLEGAL_DATA_VALUE;
 8002cb8:	2303      	movs	r3, #3
 8002cba:	75fb      	strb	r3, [r7, #23]
    }
    return eStatus;
 8002cbc:	7dfb      	ldrb	r3, [r7, #23]
}
 8002cbe:	4618      	mov	r0, r3
 8002cc0:	3718      	adds	r7, #24
 8002cc2:	46bd      	mov	sp, r7
 8002cc4:	bd80      	pop	{r7, pc}

08002cc6 <eMBFuncReadWriteMultipleHoldingRegister>:

#if MB_FUNC_READWRITE_HOLDING_ENABLED > 0

eMBException
eMBFuncReadWriteMultipleHoldingRegister( UCHAR * pucFrame, USHORT * usLen )
{
 8002cc6:	b580      	push	{r7, lr}
 8002cc8:	b086      	sub	sp, #24
 8002cca:	af00      	add	r7, sp, #0
 8002ccc:	6078      	str	r0, [r7, #4]
 8002cce:	6039      	str	r1, [r7, #0]
    USHORT          usRegWriteAddress;
    USHORT          usRegWriteCount;
    UCHAR           ucRegWriteByteCount;
    UCHAR          *pucFrameCur;

    eMBException    eStatus = MB_EX_NONE;
 8002cd0:	2300      	movs	r3, #0
 8002cd2:	75fb      	strb	r3, [r7, #23]
    eMBErrorCode    eRegStatus;

    if( *usLen >= ( MB_PDU_FUNC_READWRITE_SIZE_MIN + MB_PDU_SIZE_MIN ) )
 8002cd4:	683b      	ldr	r3, [r7, #0]
 8002cd6:	881b      	ldrh	r3, [r3, #0]
 8002cd8:	2b09      	cmp	r3, #9
 8002cda:	f240 8099 	bls.w	8002e10 <eMBFuncReadWriteMultipleHoldingRegister+0x14a>
    {
        usRegReadAddress = ( USHORT )( pucFrame[MB_PDU_FUNC_READWRITE_READ_ADDR_OFF] << 8U );
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	3301      	adds	r3, #1
 8002ce2:	781b      	ldrb	r3, [r3, #0]
 8002ce4:	b29b      	uxth	r3, r3
 8002ce6:	021b      	lsls	r3, r3, #8
 8002ce8:	82bb      	strh	r3, [r7, #20]
        usRegReadAddress |= ( USHORT )( pucFrame[MB_PDU_FUNC_READWRITE_READ_ADDR_OFF + 1] );
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	3302      	adds	r3, #2
 8002cee:	781b      	ldrb	r3, [r3, #0]
 8002cf0:	b29a      	uxth	r2, r3
 8002cf2:	8abb      	ldrh	r3, [r7, #20]
 8002cf4:	4313      	orrs	r3, r2
 8002cf6:	82bb      	strh	r3, [r7, #20]
        usRegReadAddress++;
 8002cf8:	8abb      	ldrh	r3, [r7, #20]
 8002cfa:	3301      	adds	r3, #1
 8002cfc:	82bb      	strh	r3, [r7, #20]

        usRegReadCount = ( USHORT )( pucFrame[MB_PDU_FUNC_READWRITE_READ_REGCNT_OFF] << 8U );
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	3303      	adds	r3, #3
 8002d02:	781b      	ldrb	r3, [r3, #0]
 8002d04:	b29b      	uxth	r3, r3
 8002d06:	021b      	lsls	r3, r3, #8
 8002d08:	827b      	strh	r3, [r7, #18]
        usRegReadCount |= ( USHORT )( pucFrame[MB_PDU_FUNC_READWRITE_READ_REGCNT_OFF + 1] );
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	3304      	adds	r3, #4
 8002d0e:	781b      	ldrb	r3, [r3, #0]
 8002d10:	b29a      	uxth	r2, r3
 8002d12:	8a7b      	ldrh	r3, [r7, #18]
 8002d14:	4313      	orrs	r3, r2
 8002d16:	827b      	strh	r3, [r7, #18]

        usRegWriteAddress = ( USHORT )( pucFrame[MB_PDU_FUNC_READWRITE_WRITE_ADDR_OFF] << 8U );
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	3305      	adds	r3, #5
 8002d1c:	781b      	ldrb	r3, [r3, #0]
 8002d1e:	b29b      	uxth	r3, r3
 8002d20:	021b      	lsls	r3, r3, #8
 8002d22:	823b      	strh	r3, [r7, #16]
        usRegWriteAddress |= ( USHORT )( pucFrame[MB_PDU_FUNC_READWRITE_WRITE_ADDR_OFF + 1] );
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	3306      	adds	r3, #6
 8002d28:	781b      	ldrb	r3, [r3, #0]
 8002d2a:	b29a      	uxth	r2, r3
 8002d2c:	8a3b      	ldrh	r3, [r7, #16]
 8002d2e:	4313      	orrs	r3, r2
 8002d30:	823b      	strh	r3, [r7, #16]
        usRegWriteAddress++;
 8002d32:	8a3b      	ldrh	r3, [r7, #16]
 8002d34:	3301      	adds	r3, #1
 8002d36:	823b      	strh	r3, [r7, #16]

        usRegWriteCount = ( USHORT )( pucFrame[MB_PDU_FUNC_READWRITE_WRITE_REGCNT_OFF] << 8U );
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	3307      	adds	r3, #7
 8002d3c:	781b      	ldrb	r3, [r3, #0]
 8002d3e:	b29b      	uxth	r3, r3
 8002d40:	021b      	lsls	r3, r3, #8
 8002d42:	81fb      	strh	r3, [r7, #14]
        usRegWriteCount |= ( USHORT )( pucFrame[MB_PDU_FUNC_READWRITE_WRITE_REGCNT_OFF + 1] );
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	3308      	adds	r3, #8
 8002d48:	781b      	ldrb	r3, [r3, #0]
 8002d4a:	b29a      	uxth	r2, r3
 8002d4c:	89fb      	ldrh	r3, [r7, #14]
 8002d4e:	4313      	orrs	r3, r2
 8002d50:	81fb      	strh	r3, [r7, #14]

        ucRegWriteByteCount = pucFrame[MB_PDU_FUNC_READWRITE_BYTECNT_OFF];
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	7a5b      	ldrb	r3, [r3, #9]
 8002d56:	737b      	strb	r3, [r7, #13]

        if( ( usRegReadCount >= 1 ) && ( usRegReadCount <= 0x7D ) &&
 8002d58:	8a7b      	ldrh	r3, [r7, #18]
 8002d5a:	2b00      	cmp	r3, #0
 8002d5c:	d056      	beq.n	8002e0c <eMBFuncReadWriteMultipleHoldingRegister+0x146>
 8002d5e:	8a7b      	ldrh	r3, [r7, #18]
 8002d60:	2b7d      	cmp	r3, #125	; 0x7d
 8002d62:	d853      	bhi.n	8002e0c <eMBFuncReadWriteMultipleHoldingRegister+0x146>
 8002d64:	89fb      	ldrh	r3, [r7, #14]
 8002d66:	2b00      	cmp	r3, #0
 8002d68:	d050      	beq.n	8002e0c <eMBFuncReadWriteMultipleHoldingRegister+0x146>
            ( usRegWriteCount >= 1 ) && ( usRegWriteCount <= 0x79 ) &&
 8002d6a:	89fb      	ldrh	r3, [r7, #14]
 8002d6c:	2b79      	cmp	r3, #121	; 0x79
 8002d6e:	d84d      	bhi.n	8002e0c <eMBFuncReadWriteMultipleHoldingRegister+0x146>
            ( ( 2 * usRegWriteCount ) == ucRegWriteByteCount ) )
 8002d70:	89fb      	ldrh	r3, [r7, #14]
 8002d72:	005a      	lsls	r2, r3, #1
 8002d74:	7b7b      	ldrb	r3, [r7, #13]
            ( usRegWriteCount >= 1 ) && ( usRegWriteCount <= 0x79 ) &&
 8002d76:	429a      	cmp	r2, r3
 8002d78:	d148      	bne.n	8002e0c <eMBFuncReadWriteMultipleHoldingRegister+0x146>
        {
            /* Make callback to update the register values. */
            eRegStatus = eMBRegHoldingCB( &pucFrame[MB_PDU_FUNC_READWRITE_WRITE_VALUES_OFF],
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	f103 000a 	add.w	r0, r3, #10
 8002d80:	89fa      	ldrh	r2, [r7, #14]
 8002d82:	8a39      	ldrh	r1, [r7, #16]
 8002d84:	2301      	movs	r3, #1
 8002d86:	f7fd fc39 	bl	80005fc <eMBRegHoldingCB>
 8002d8a:	4603      	mov	r3, r0
 8002d8c:	75bb      	strb	r3, [r7, #22]
                                          usRegWriteAddress, usRegWriteCount, MB_REG_WRITE );

            if( eRegStatus == MB_ENOERR )
 8002d8e:	7dbb      	ldrb	r3, [r7, #22]
 8002d90:	2b00      	cmp	r3, #0
 8002d92:	d131      	bne.n	8002df8 <eMBFuncReadWriteMultipleHoldingRegister+0x132>
            {
                /* Set the current PDU data pointer to the beginning. */
                pucFrameCur = &pucFrame[MB_PDU_FUNC_OFF];
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	60bb      	str	r3, [r7, #8]
                *usLen = MB_PDU_FUNC_OFF;
 8002d98:	683b      	ldr	r3, [r7, #0]
 8002d9a:	2200      	movs	r2, #0
 8002d9c:	801a      	strh	r2, [r3, #0]

                /* First byte contains the function code. */
                *pucFrameCur++ = MB_FUNC_READWRITE_MULTIPLE_REGISTERS;
 8002d9e:	68bb      	ldr	r3, [r7, #8]
 8002da0:	1c5a      	adds	r2, r3, #1
 8002da2:	60ba      	str	r2, [r7, #8]
 8002da4:	2217      	movs	r2, #23
 8002da6:	701a      	strb	r2, [r3, #0]
                *usLen += 1;
 8002da8:	683b      	ldr	r3, [r7, #0]
 8002daa:	881b      	ldrh	r3, [r3, #0]
 8002dac:	3301      	adds	r3, #1
 8002dae:	b29a      	uxth	r2, r3
 8002db0:	683b      	ldr	r3, [r7, #0]
 8002db2:	801a      	strh	r2, [r3, #0]

                /* Second byte in the response contain the number of bytes. */
                *pucFrameCur++ = ( UCHAR ) ( usRegReadCount * 2 );
 8002db4:	8a7b      	ldrh	r3, [r7, #18]
 8002db6:	b2da      	uxtb	r2, r3
 8002db8:	68bb      	ldr	r3, [r7, #8]
 8002dba:	1c59      	adds	r1, r3, #1
 8002dbc:	60b9      	str	r1, [r7, #8]
 8002dbe:	0052      	lsls	r2, r2, #1
 8002dc0:	b2d2      	uxtb	r2, r2
 8002dc2:	701a      	strb	r2, [r3, #0]
                *usLen += 1;
 8002dc4:	683b      	ldr	r3, [r7, #0]
 8002dc6:	881b      	ldrh	r3, [r3, #0]
 8002dc8:	3301      	adds	r3, #1
 8002dca:	b29a      	uxth	r2, r3
 8002dcc:	683b      	ldr	r3, [r7, #0]
 8002dce:	801a      	strh	r2, [r3, #0]

                /* Make the read callback. */
                eRegStatus =
                    eMBRegHoldingCB( pucFrameCur, usRegReadAddress, usRegReadCount, MB_REG_READ );
 8002dd0:	8a7a      	ldrh	r2, [r7, #18]
 8002dd2:	8ab9      	ldrh	r1, [r7, #20]
 8002dd4:	2300      	movs	r3, #0
 8002dd6:	68b8      	ldr	r0, [r7, #8]
 8002dd8:	f7fd fc10 	bl	80005fc <eMBRegHoldingCB>
 8002ddc:	4603      	mov	r3, r0
 8002dde:	75bb      	strb	r3, [r7, #22]
                if( eRegStatus == MB_ENOERR )
 8002de0:	7dbb      	ldrb	r3, [r7, #22]
 8002de2:	2b00      	cmp	r3, #0
 8002de4:	d108      	bne.n	8002df8 <eMBFuncReadWriteMultipleHoldingRegister+0x132>
                {
                    *usLen += 2 * usRegReadCount;
 8002de6:	683b      	ldr	r3, [r7, #0]
 8002de8:	881a      	ldrh	r2, [r3, #0]
 8002dea:	8a7b      	ldrh	r3, [r7, #18]
 8002dec:	005b      	lsls	r3, r3, #1
 8002dee:	b29b      	uxth	r3, r3
 8002df0:	4413      	add	r3, r2
 8002df2:	b29a      	uxth	r2, r3
 8002df4:	683b      	ldr	r3, [r7, #0]
 8002df6:	801a      	strh	r2, [r3, #0]
                }
            }
            if( eRegStatus != MB_ENOERR )
 8002df8:	7dbb      	ldrb	r3, [r7, #22]
 8002dfa:	2b00      	cmp	r3, #0
 8002dfc:	d008      	beq.n	8002e10 <eMBFuncReadWriteMultipleHoldingRegister+0x14a>
            {
                eStatus = prveMBError2Exception( eRegStatus );
 8002dfe:	7dbb      	ldrb	r3, [r7, #22]
 8002e00:	4618      	mov	r0, r3
 8002e02:	f000 faaf 	bl	8003364 <prveMBError2Exception>
 8002e06:	4603      	mov	r3, r0
 8002e08:	75fb      	strb	r3, [r7, #23]
            if( eRegStatus != MB_ENOERR )
 8002e0a:	e001      	b.n	8002e10 <eMBFuncReadWriteMultipleHoldingRegister+0x14a>
            }
        }
        else
        {
            eStatus = MB_EX_ILLEGAL_DATA_VALUE;
 8002e0c:	2303      	movs	r3, #3
 8002e0e:	75fb      	strb	r3, [r7, #23]
        }
    }
    return eStatus;
 8002e10:	7dfb      	ldrb	r3, [r7, #23]
}
 8002e12:	4618      	mov	r0, r3
 8002e14:	3718      	adds	r7, #24
 8002e16:	46bd      	mov	sp, r7
 8002e18:	bd80      	pop	{r7, pc}

08002e1a <eMBFuncReadInputRegister>:
/* ----------------------- Start implementation -----------------------------*/
#if MB_FUNC_READ_INPUT_ENABLED > 0

eMBException
eMBFuncReadInputRegister( UCHAR * pucFrame, USHORT * usLen )
{
 8002e1a:	b580      	push	{r7, lr}
 8002e1c:	b086      	sub	sp, #24
 8002e1e:	af00      	add	r7, sp, #0
 8002e20:	6078      	str	r0, [r7, #4]
 8002e22:	6039      	str	r1, [r7, #0]
    USHORT          usRegAddress;
    USHORT          usRegCount;
    UCHAR          *pucFrameCur;

    eMBException    eStatus = MB_EX_NONE;
 8002e24:	2300      	movs	r3, #0
 8002e26:	75fb      	strb	r3, [r7, #23]
    eMBErrorCode    eRegStatus;

    if( *usLen == ( MB_PDU_FUNC_READ_SIZE + MB_PDU_SIZE_MIN ) )
 8002e28:	683b      	ldr	r3, [r7, #0]
 8002e2a:	881b      	ldrh	r3, [r3, #0]
 8002e2c:	2b05      	cmp	r3, #5
 8002e2e:	d15f      	bne.n	8002ef0 <eMBFuncReadInputRegister+0xd6>
    {
        usRegAddress = ( USHORT )( pucFrame[MB_PDU_FUNC_READ_ADDR_OFF] << 8 );
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	3301      	adds	r3, #1
 8002e34:	781b      	ldrb	r3, [r3, #0]
 8002e36:	b29b      	uxth	r3, r3
 8002e38:	021b      	lsls	r3, r3, #8
 8002e3a:	82bb      	strh	r3, [r7, #20]
        usRegAddress |= ( USHORT )( pucFrame[MB_PDU_FUNC_READ_ADDR_OFF + 1] );
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	3302      	adds	r3, #2
 8002e40:	781b      	ldrb	r3, [r3, #0]
 8002e42:	b29a      	uxth	r2, r3
 8002e44:	8abb      	ldrh	r3, [r7, #20]
 8002e46:	4313      	orrs	r3, r2
 8002e48:	82bb      	strh	r3, [r7, #20]
        usRegAddress++;
 8002e4a:	8abb      	ldrh	r3, [r7, #20]
 8002e4c:	3301      	adds	r3, #1
 8002e4e:	82bb      	strh	r3, [r7, #20]

        usRegCount = ( USHORT )( pucFrame[MB_PDU_FUNC_READ_REGCNT_OFF] << 8 );
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	3303      	adds	r3, #3
 8002e54:	781b      	ldrb	r3, [r3, #0]
 8002e56:	b29b      	uxth	r3, r3
 8002e58:	021b      	lsls	r3, r3, #8
 8002e5a:	827b      	strh	r3, [r7, #18]
        usRegCount |= ( USHORT )( pucFrame[MB_PDU_FUNC_READ_REGCNT_OFF + 1] );
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	3304      	adds	r3, #4
 8002e60:	781b      	ldrb	r3, [r3, #0]
 8002e62:	b29a      	uxth	r2, r3
 8002e64:	8a7b      	ldrh	r3, [r7, #18]
 8002e66:	4313      	orrs	r3, r2
 8002e68:	827b      	strh	r3, [r7, #18]

        /* Check if the number of registers to read is valid. If not
         * return Modbus illegal data value exception. 
         */
        if( ( usRegCount >= 1 )
 8002e6a:	8a7b      	ldrh	r3, [r7, #18]
 8002e6c:	2b00      	cmp	r3, #0
 8002e6e:	d03c      	beq.n	8002eea <eMBFuncReadInputRegister+0xd0>
            && ( usRegCount < MB_PDU_FUNC_READ_REGCNT_MAX ) )
 8002e70:	8a7b      	ldrh	r3, [r7, #18]
 8002e72:	2b7c      	cmp	r3, #124	; 0x7c
 8002e74:	d839      	bhi.n	8002eea <eMBFuncReadInputRegister+0xd0>
        {
            /* Set the current PDU data pointer to the beginning. */
            pucFrameCur = &pucFrame[MB_PDU_FUNC_OFF];
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	60fb      	str	r3, [r7, #12]
            *usLen = MB_PDU_FUNC_OFF;
 8002e7a:	683b      	ldr	r3, [r7, #0]
 8002e7c:	2200      	movs	r2, #0
 8002e7e:	801a      	strh	r2, [r3, #0]

            /* First byte contains the function code. */
            *pucFrameCur++ = MB_FUNC_READ_INPUT_REGISTER;
 8002e80:	68fb      	ldr	r3, [r7, #12]
 8002e82:	1c5a      	adds	r2, r3, #1
 8002e84:	60fa      	str	r2, [r7, #12]
 8002e86:	2204      	movs	r2, #4
 8002e88:	701a      	strb	r2, [r3, #0]
            *usLen += 1;
 8002e8a:	683b      	ldr	r3, [r7, #0]
 8002e8c:	881b      	ldrh	r3, [r3, #0]
 8002e8e:	3301      	adds	r3, #1
 8002e90:	b29a      	uxth	r2, r3
 8002e92:	683b      	ldr	r3, [r7, #0]
 8002e94:	801a      	strh	r2, [r3, #0]

            /* Second byte in the response contain the number of bytes. */
            *pucFrameCur++ = ( UCHAR )( usRegCount * 2 );
 8002e96:	8a7b      	ldrh	r3, [r7, #18]
 8002e98:	b2da      	uxtb	r2, r3
 8002e9a:	68fb      	ldr	r3, [r7, #12]
 8002e9c:	1c59      	adds	r1, r3, #1
 8002e9e:	60f9      	str	r1, [r7, #12]
 8002ea0:	0052      	lsls	r2, r2, #1
 8002ea2:	b2d2      	uxtb	r2, r2
 8002ea4:	701a      	strb	r2, [r3, #0]
            *usLen += 1;
 8002ea6:	683b      	ldr	r3, [r7, #0]
 8002ea8:	881b      	ldrh	r3, [r3, #0]
 8002eaa:	3301      	adds	r3, #1
 8002eac:	b29a      	uxth	r2, r3
 8002eae:	683b      	ldr	r3, [r7, #0]
 8002eb0:	801a      	strh	r2, [r3, #0]

            eRegStatus =
                eMBRegInputCB( pucFrameCur, usRegAddress, usRegCount );
 8002eb2:	8a7a      	ldrh	r2, [r7, #18]
 8002eb4:	8abb      	ldrh	r3, [r7, #20]
 8002eb6:	4619      	mov	r1, r3
 8002eb8:	68f8      	ldr	r0, [r7, #12]
 8002eba:	f7fd fb59 	bl	8000570 <eMBRegInputCB>
 8002ebe:	4603      	mov	r3, r0
 8002ec0:	72fb      	strb	r3, [r7, #11]

            /* If an error occured convert it into a Modbus exception. */
            if( eRegStatus != MB_ENOERR )
 8002ec2:	7afb      	ldrb	r3, [r7, #11]
 8002ec4:	2b00      	cmp	r3, #0
 8002ec6:	d006      	beq.n	8002ed6 <eMBFuncReadInputRegister+0xbc>
            {
                eStatus = prveMBError2Exception( eRegStatus );
 8002ec8:	7afb      	ldrb	r3, [r7, #11]
 8002eca:	4618      	mov	r0, r3
 8002ecc:	f000 fa4a 	bl	8003364 <prveMBError2Exception>
 8002ed0:	4603      	mov	r3, r0
 8002ed2:	75fb      	strb	r3, [r7, #23]
            if( eRegStatus != MB_ENOERR )
 8002ed4:	e00e      	b.n	8002ef4 <eMBFuncReadInputRegister+0xda>
            }
            else
            {
                *usLen += usRegCount * 2;
 8002ed6:	683b      	ldr	r3, [r7, #0]
 8002ed8:	881a      	ldrh	r2, [r3, #0]
 8002eda:	8a7b      	ldrh	r3, [r7, #18]
 8002edc:	005b      	lsls	r3, r3, #1
 8002ede:	b29b      	uxth	r3, r3
 8002ee0:	4413      	add	r3, r2
 8002ee2:	b29a      	uxth	r2, r3
 8002ee4:	683b      	ldr	r3, [r7, #0]
 8002ee6:	801a      	strh	r2, [r3, #0]
            if( eRegStatus != MB_ENOERR )
 8002ee8:	e004      	b.n	8002ef4 <eMBFuncReadInputRegister+0xda>
            }
        }
        else
        {
            eStatus = MB_EX_ILLEGAL_DATA_VALUE;
 8002eea:	2303      	movs	r3, #3
 8002eec:	75fb      	strb	r3, [r7, #23]
 8002eee:	e001      	b.n	8002ef4 <eMBFuncReadInputRegister+0xda>
    }
    else
    {
        /* Can't be a valid read input register request because the length
         * is incorrect. */
        eStatus = MB_EX_ILLEGAL_DATA_VALUE;
 8002ef0:	2303      	movs	r3, #3
 8002ef2:	75fb      	strb	r3, [r7, #23]
    }
    return eStatus;
 8002ef4:	7dfb      	ldrb	r3, [r7, #23]
}
 8002ef6:	4618      	mov	r0, r3
 8002ef8:	3718      	adds	r7, #24
 8002efa:	46bd      	mov	sp, r7
 8002efc:	bd80      	pop	{r7, pc}
	...

08002f00 <eMBFuncReportSlaveID>:
    return eStatus;
}

eMBException
eMBFuncReportSlaveID( UCHAR * pucFrame, USHORT * usLen )
{
 8002f00:	b580      	push	{r7, lr}
 8002f02:	b082      	sub	sp, #8
 8002f04:	af00      	add	r7, sp, #0
 8002f06:	6078      	str	r0, [r7, #4]
 8002f08:	6039      	str	r1, [r7, #0]
    memcpy( &pucFrame[MB_PDU_DATA_OFF], &ucMBSlaveID[0], ( size_t )usMBSlaveIDLen );
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	3301      	adds	r3, #1
 8002f0e:	4a08      	ldr	r2, [pc, #32]	; (8002f30 <eMBFuncReportSlaveID+0x30>)
 8002f10:	8812      	ldrh	r2, [r2, #0]
 8002f12:	4908      	ldr	r1, [pc, #32]	; (8002f34 <eMBFuncReportSlaveID+0x34>)
 8002f14:	4618      	mov	r0, r3
 8002f16:	f000 fd2a 	bl	800396e <memcpy>
    *usLen = ( USHORT )( MB_PDU_DATA_OFF + usMBSlaveIDLen );
 8002f1a:	4b05      	ldr	r3, [pc, #20]	; (8002f30 <eMBFuncReportSlaveID+0x30>)
 8002f1c:	881b      	ldrh	r3, [r3, #0]
 8002f1e:	3301      	adds	r3, #1
 8002f20:	b29a      	uxth	r2, r3
 8002f22:	683b      	ldr	r3, [r7, #0]
 8002f24:	801a      	strh	r2, [r3, #0]
    return MB_EX_NONE;
 8002f26:	2300      	movs	r3, #0
}
 8002f28:	4618      	mov	r0, r3
 8002f2a:	3708      	adds	r7, #8
 8002f2c:	46bd      	mov	sp, r7
 8002f2e:	bd80      	pop	{r7, pc}
 8002f30:	200001f8 	.word	0x200001f8
 8002f34:	200001d8 	.word	0x200001d8

08002f38 <eMBRTUInit>:
static volatile USHORT usRcvBufferPos;

/* ----------------------- Start implementation -----------------------------*/
eMBErrorCode
eMBRTUInit( UCHAR ucSlaveAddress, UCHAR ucPort, ULONG ulBaudRate, eMBParity eParity )
{
 8002f38:	b580      	push	{r7, lr}
 8002f3a:	b084      	sub	sp, #16
 8002f3c:	af00      	add	r7, sp, #0
 8002f3e:	603a      	str	r2, [r7, #0]
 8002f40:	461a      	mov	r2, r3
 8002f42:	4603      	mov	r3, r0
 8002f44:	71fb      	strb	r3, [r7, #7]
 8002f46:	460b      	mov	r3, r1
 8002f48:	71bb      	strb	r3, [r7, #6]
 8002f4a:	4613      	mov	r3, r2
 8002f4c:	717b      	strb	r3, [r7, #5]
    eMBErrorCode    eStatus = MB_ENOERR;
 8002f4e:	2300      	movs	r3, #0
 8002f50:	73fb      	strb	r3, [r7, #15]
    ULONG           usTimerT35_50us;

    ( void )ucSlaveAddress;
    ENTER_CRITICAL_SECTION(  );
 8002f52:	f000 fa29 	bl	80033a8 <critical_enter>

    /* Modbus RTU uses 8 Databits. */
    if( xMBPortSerialInit( ucPort, ulBaudRate, 8, eParity ) != TRUE )
 8002f56:	797b      	ldrb	r3, [r7, #5]
 8002f58:	79b8      	ldrb	r0, [r7, #6]
 8002f5a:	2208      	movs	r2, #8
 8002f5c:	6839      	ldr	r1, [r7, #0]
 8002f5e:	f000 fae5 	bl	800352c <xMBPortSerialInit>
 8002f62:	4603      	mov	r3, r0
 8002f64:	2b01      	cmp	r3, #1
 8002f66:	d002      	beq.n	8002f6e <eMBRTUInit+0x36>
    {
        eStatus = MB_EPORTERR;
 8002f68:	2303      	movs	r3, #3
 8002f6a:	73fb      	strb	r3, [r7, #15]
 8002f6c:	e016      	b.n	8002f9c <eMBRTUInit+0x64>
    else
    {
        /* If baudrate > 19200 then we should use the fixed timer values
         * t35 = 1750us. Otherwise t35 must be 3.5 times the character time.
         */
        if( ulBaudRate > 19200 )
 8002f6e:	683b      	ldr	r3, [r7, #0]
 8002f70:	f5b3 4f96 	cmp.w	r3, #19200	; 0x4b00
 8002f74:	d902      	bls.n	8002f7c <eMBRTUInit+0x44>
        {
            usTimerT35_50us = 35;       /* 1800us. */
 8002f76:	2323      	movs	r3, #35	; 0x23
 8002f78:	60bb      	str	r3, [r7, #8]
 8002f7a:	e005      	b.n	8002f88 <eMBRTUInit+0x50>
             *             = 11 * Ticks_per_1s / Baudrate
             *             = 220000 / Baudrate
             * The reload for t3.5 is 1.5 times this value and similary
             * for t3.5.
             */
            usTimerT35_50us = ( 7UL * 220000UL ) / ( 2UL * ulBaudRate );
 8002f7c:	683b      	ldr	r3, [r7, #0]
 8002f7e:	005b      	lsls	r3, r3, #1
 8002f80:	4a0a      	ldr	r2, [pc, #40]	; (8002fac <eMBRTUInit+0x74>)
 8002f82:	fbb2 f3f3 	udiv	r3, r2, r3
 8002f86:	60bb      	str	r3, [r7, #8]
        }
        if( xMBPortTimersInit( ( USHORT ) usTimerT35_50us ) != TRUE )
 8002f88:	68bb      	ldr	r3, [r7, #8]
 8002f8a:	b29b      	uxth	r3, r3
 8002f8c:	4618      	mov	r0, r3
 8002f8e:	f000 fb11 	bl	80035b4 <xMBPortTimersInit>
 8002f92:	4603      	mov	r3, r0
 8002f94:	2b01      	cmp	r3, #1
 8002f96:	d001      	beq.n	8002f9c <eMBRTUInit+0x64>
        {
            eStatus = MB_EPORTERR;
 8002f98:	2303      	movs	r3, #3
 8002f9a:	73fb      	strb	r3, [r7, #15]
        }
    }
    EXIT_CRITICAL_SECTION(  );
 8002f9c:	f000 fa14 	bl	80033c8 <critical_exit>

    return eStatus;
 8002fa0:	7bfb      	ldrb	r3, [r7, #15]
}
 8002fa2:	4618      	mov	r0, r3
 8002fa4:	3710      	adds	r7, #16
 8002fa6:	46bd      	mov	sp, r7
 8002fa8:	bd80      	pop	{r7, pc}
 8002faa:	bf00      	nop
 8002fac:	00177fa0 	.word	0x00177fa0

08002fb0 <eMBRTUStart>:

void
eMBRTUStart( void )
{
 8002fb0:	b580      	push	{r7, lr}
 8002fb2:	af00      	add	r7, sp, #0
    ENTER_CRITICAL_SECTION(  );
 8002fb4:	f000 f9f8 	bl	80033a8 <critical_enter>
    /* Initially the receiver is in the state STATE_RX_INIT. we start
     * the timer and if no character is received within t3.5 we change
     * to STATE_RX_IDLE. This makes sure that we delay startup of the
     * modbus protocol stack until the bus is free.
     */
    eRcvState = STATE_RX_INIT;
 8002fb8:	4b06      	ldr	r3, [pc, #24]	; (8002fd4 <eMBRTUStart+0x24>)
 8002fba:	2200      	movs	r2, #0
 8002fbc:	701a      	strb	r2, [r3, #0]
    vMBPortSerialEnable( TRUE, FALSE );
 8002fbe:	2100      	movs	r1, #0
 8002fc0:	2001      	movs	r0, #1
 8002fc2:	f000 fa55 	bl	8003470 <vMBPortSerialEnable>
    vMBPortTimersEnable(  );
 8002fc6:	f000 fb05 	bl	80035d4 <vMBPortTimersEnable>

    EXIT_CRITICAL_SECTION(  );
 8002fca:	f000 f9fd 	bl	80033c8 <critical_exit>
}
 8002fce:	bf00      	nop
 8002fd0:	bd80      	pop	{r7, pc}
 8002fd2:	bf00      	nop
 8002fd4:	200001fb 	.word	0x200001fb

08002fd8 <eMBRTUStop>:

void
eMBRTUStop( void )
{
 8002fd8:	b580      	push	{r7, lr}
 8002fda:	af00      	add	r7, sp, #0
    ENTER_CRITICAL_SECTION(  );
 8002fdc:	f000 f9e4 	bl	80033a8 <critical_enter>
    vMBPortSerialEnable( FALSE, FALSE );
 8002fe0:	2100      	movs	r1, #0
 8002fe2:	2000      	movs	r0, #0
 8002fe4:	f000 fa44 	bl	8003470 <vMBPortSerialEnable>
    vMBPortTimersDisable(  );
 8002fe8:	f000 fb04 	bl	80035f4 <vMBPortTimersDisable>
    EXIT_CRITICAL_SECTION(  );
 8002fec:	f000 f9ec 	bl	80033c8 <critical_exit>
}
 8002ff0:	bf00      	nop
 8002ff2:	bd80      	pop	{r7, pc}

08002ff4 <eMBRTUReceive>:

eMBErrorCode
eMBRTUReceive( UCHAR * pucRcvAddress, UCHAR ** pucFrame, USHORT * pusLength )
{
 8002ff4:	b580      	push	{r7, lr}
 8002ff6:	b086      	sub	sp, #24
 8002ff8:	af00      	add	r7, sp, #0
 8002ffa:	60f8      	str	r0, [r7, #12]
 8002ffc:	60b9      	str	r1, [r7, #8]
 8002ffe:	607a      	str	r2, [r7, #4]
    BOOL            xFrameReceived = FALSE;
 8003000:	2300      	movs	r3, #0
 8003002:	75bb      	strb	r3, [r7, #22]
    eMBErrorCode    eStatus = MB_ENOERR;
 8003004:	2300      	movs	r3, #0
 8003006:	75fb      	strb	r3, [r7, #23]

    ENTER_CRITICAL_SECTION(  );
 8003008:	f000 f9ce 	bl	80033a8 <critical_enter>
    assert( usRcvBufferPos < MB_SER_PDU_SIZE_MAX );
 800300c:	4b1a      	ldr	r3, [pc, #104]	; (8003078 <eMBRTUReceive+0x84>)
 800300e:	881b      	ldrh	r3, [r3, #0]
 8003010:	b29b      	uxth	r3, r3
 8003012:	2bff      	cmp	r3, #255	; 0xff
 8003014:	d905      	bls.n	8003022 <eMBRTUReceive+0x2e>
 8003016:	4b19      	ldr	r3, [pc, #100]	; (800307c <eMBRTUReceive+0x88>)
 8003018:	4a19      	ldr	r2, [pc, #100]	; (8003080 <eMBRTUReceive+0x8c>)
 800301a:	219c      	movs	r1, #156	; 0x9c
 800301c:	4819      	ldr	r0, [pc, #100]	; (8003084 <eMBRTUReceive+0x90>)
 800301e:	f000 faf5 	bl	800360c <__assert_func>

    /* Length and CRC check */
    if( ( usRcvBufferPos >= MB_SER_PDU_SIZE_MIN )
 8003022:	4b15      	ldr	r3, [pc, #84]	; (8003078 <eMBRTUReceive+0x84>)
 8003024:	881b      	ldrh	r3, [r3, #0]
 8003026:	b29b      	uxth	r3, r3
 8003028:	2b03      	cmp	r3, #3
 800302a:	d91b      	bls.n	8003064 <eMBRTUReceive+0x70>
        && ( usMBCRC16( ( UCHAR * ) ucRTUBuf, usRcvBufferPos ) == 0 ) )
 800302c:	4b12      	ldr	r3, [pc, #72]	; (8003078 <eMBRTUReceive+0x84>)
 800302e:	881b      	ldrh	r3, [r3, #0]
 8003030:	b29b      	uxth	r3, r3
 8003032:	4619      	mov	r1, r3
 8003034:	4814      	ldr	r0, [pc, #80]	; (8003088 <eMBRTUReceive+0x94>)
 8003036:	f7ff fb5b 	bl	80026f0 <usMBCRC16>
 800303a:	4603      	mov	r3, r0
 800303c:	2b00      	cmp	r3, #0
 800303e:	d111      	bne.n	8003064 <eMBRTUReceive+0x70>
    {
        /* Save the address field. All frames are passed to the upper layed
         * and the decision if a frame is used is done there.
         */
        *pucRcvAddress = ucRTUBuf[MB_SER_PDU_ADDR_OFF];
 8003040:	4b11      	ldr	r3, [pc, #68]	; (8003088 <eMBRTUReceive+0x94>)
 8003042:	781b      	ldrb	r3, [r3, #0]
 8003044:	b2da      	uxtb	r2, r3
 8003046:	68fb      	ldr	r3, [r7, #12]
 8003048:	701a      	strb	r2, [r3, #0]

        /* Total length of Modbus-PDU is Modbus-Serial-Line-PDU minus
         * size of address field and CRC checksum.
         */
        *pusLength = ( USHORT )( usRcvBufferPos - MB_SER_PDU_PDU_OFF - MB_SER_PDU_SIZE_CRC );
 800304a:	4b0b      	ldr	r3, [pc, #44]	; (8003078 <eMBRTUReceive+0x84>)
 800304c:	881b      	ldrh	r3, [r3, #0]
 800304e:	b29b      	uxth	r3, r3
 8003050:	3b03      	subs	r3, #3
 8003052:	b29a      	uxth	r2, r3
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	801a      	strh	r2, [r3, #0]

        /* Return the start of the Modbus PDU to the caller. */
        *pucFrame = ( UCHAR * ) & ucRTUBuf[MB_SER_PDU_PDU_OFF];
 8003058:	68bb      	ldr	r3, [r7, #8]
 800305a:	4a0c      	ldr	r2, [pc, #48]	; (800308c <eMBRTUReceive+0x98>)
 800305c:	601a      	str	r2, [r3, #0]
        xFrameReceived = TRUE;
 800305e:	2301      	movs	r3, #1
 8003060:	75bb      	strb	r3, [r7, #22]
 8003062:	e001      	b.n	8003068 <eMBRTUReceive+0x74>
    }
    else
    {
        eStatus = MB_EIO;
 8003064:	2305      	movs	r3, #5
 8003066:	75fb      	strb	r3, [r7, #23]
    }

    EXIT_CRITICAL_SECTION(  );
 8003068:	f000 f9ae 	bl	80033c8 <critical_exit>
    return eStatus;
 800306c:	7dfb      	ldrb	r3, [r7, #23]
}
 800306e:	4618      	mov	r0, r3
 8003070:	3718      	adds	r7, #24
 8003072:	46bd      	mov	sp, r7
 8003074:	bd80      	pop	{r7, pc}
 8003076:	bf00      	nop
 8003078:	20000302 	.word	0x20000302
 800307c:	08004590 	.word	0x08004590
 8003080:	080048bc 	.word	0x080048bc
 8003084:	080045b8 	.word	0x080045b8
 8003088:	200001fc 	.word	0x200001fc
 800308c:	200001fd 	.word	0x200001fd

08003090 <eMBRTUSend>:

eMBErrorCode
eMBRTUSend( UCHAR ucSlaveAddress, const UCHAR * pucFrame, USHORT usLength )
{
 8003090:	b580      	push	{r7, lr}
 8003092:	b084      	sub	sp, #16
 8003094:	af00      	add	r7, sp, #0
 8003096:	4603      	mov	r3, r0
 8003098:	6039      	str	r1, [r7, #0]
 800309a:	71fb      	strb	r3, [r7, #7]
 800309c:	4613      	mov	r3, r2
 800309e:	80bb      	strh	r3, [r7, #4]
    eMBErrorCode    eStatus = MB_ENOERR;
 80030a0:	2300      	movs	r3, #0
 80030a2:	73fb      	strb	r3, [r7, #15]
    USHORT          usCRC16;

    ENTER_CRITICAL_SECTION(  );
 80030a4:	f000 f980 	bl	80033a8 <critical_enter>

    /* Check if the receiver is still in idle state. If not we where to
     * slow with processing the received frame and the master sent another
     * frame on the network. We have to abort sending the frame.
     */
    if( eRcvState == STATE_RX_IDLE )
 80030a8:	4b26      	ldr	r3, [pc, #152]	; (8003144 <eMBRTUSend+0xb4>)
 80030aa:	781b      	ldrb	r3, [r3, #0]
 80030ac:	b2db      	uxtb	r3, r3
 80030ae:	2b01      	cmp	r3, #1
 80030b0:	d13f      	bne.n	8003132 <eMBRTUSend+0xa2>
    {
        /* First byte before the Modbus-PDU is the slave address. */
        pucSndBufferCur = ( UCHAR * ) pucFrame - 1;
 80030b2:	683b      	ldr	r3, [r7, #0]
 80030b4:	3b01      	subs	r3, #1
 80030b6:	4a24      	ldr	r2, [pc, #144]	; (8003148 <eMBRTUSend+0xb8>)
 80030b8:	6013      	str	r3, [r2, #0]
        usSndBufferCount = 1;
 80030ba:	4b24      	ldr	r3, [pc, #144]	; (800314c <eMBRTUSend+0xbc>)
 80030bc:	2201      	movs	r2, #1
 80030be:	801a      	strh	r2, [r3, #0]

        /* Now copy the Modbus-PDU into the Modbus-Serial-Line-PDU. */
        pucSndBufferCur[MB_SER_PDU_ADDR_OFF] = ucSlaveAddress;
 80030c0:	4b21      	ldr	r3, [pc, #132]	; (8003148 <eMBRTUSend+0xb8>)
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	79fa      	ldrb	r2, [r7, #7]
 80030c6:	701a      	strb	r2, [r3, #0]
        usSndBufferCount += usLength;
 80030c8:	4b20      	ldr	r3, [pc, #128]	; (800314c <eMBRTUSend+0xbc>)
 80030ca:	881b      	ldrh	r3, [r3, #0]
 80030cc:	b29a      	uxth	r2, r3
 80030ce:	88bb      	ldrh	r3, [r7, #4]
 80030d0:	4413      	add	r3, r2
 80030d2:	b29a      	uxth	r2, r3
 80030d4:	4b1d      	ldr	r3, [pc, #116]	; (800314c <eMBRTUSend+0xbc>)
 80030d6:	801a      	strh	r2, [r3, #0]

        /* Calculate CRC16 checksum for Modbus-Serial-Line-PDU. */
        usCRC16 = usMBCRC16( ( UCHAR * ) pucSndBufferCur, usSndBufferCount );
 80030d8:	4b1b      	ldr	r3, [pc, #108]	; (8003148 <eMBRTUSend+0xb8>)
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	4a1b      	ldr	r2, [pc, #108]	; (800314c <eMBRTUSend+0xbc>)
 80030de:	8812      	ldrh	r2, [r2, #0]
 80030e0:	b292      	uxth	r2, r2
 80030e2:	4611      	mov	r1, r2
 80030e4:	4618      	mov	r0, r3
 80030e6:	f7ff fb03 	bl	80026f0 <usMBCRC16>
 80030ea:	4603      	mov	r3, r0
 80030ec:	81bb      	strh	r3, [r7, #12]
        ucRTUBuf[usSndBufferCount++] = ( UCHAR )( usCRC16 & 0xFF );
 80030ee:	4b17      	ldr	r3, [pc, #92]	; (800314c <eMBRTUSend+0xbc>)
 80030f0:	881b      	ldrh	r3, [r3, #0]
 80030f2:	b29b      	uxth	r3, r3
 80030f4:	1c5a      	adds	r2, r3, #1
 80030f6:	b291      	uxth	r1, r2
 80030f8:	4a14      	ldr	r2, [pc, #80]	; (800314c <eMBRTUSend+0xbc>)
 80030fa:	8011      	strh	r1, [r2, #0]
 80030fc:	461a      	mov	r2, r3
 80030fe:	89bb      	ldrh	r3, [r7, #12]
 8003100:	b2d9      	uxtb	r1, r3
 8003102:	4b13      	ldr	r3, [pc, #76]	; (8003150 <eMBRTUSend+0xc0>)
 8003104:	5499      	strb	r1, [r3, r2]
        ucRTUBuf[usSndBufferCount++] = ( UCHAR )( usCRC16 >> 8 );
 8003106:	89bb      	ldrh	r3, [r7, #12]
 8003108:	0a1b      	lsrs	r3, r3, #8
 800310a:	b299      	uxth	r1, r3
 800310c:	4b0f      	ldr	r3, [pc, #60]	; (800314c <eMBRTUSend+0xbc>)
 800310e:	881b      	ldrh	r3, [r3, #0]
 8003110:	b29b      	uxth	r3, r3
 8003112:	1c5a      	adds	r2, r3, #1
 8003114:	b290      	uxth	r0, r2
 8003116:	4a0d      	ldr	r2, [pc, #52]	; (800314c <eMBRTUSend+0xbc>)
 8003118:	8010      	strh	r0, [r2, #0]
 800311a:	461a      	mov	r2, r3
 800311c:	b2c9      	uxtb	r1, r1
 800311e:	4b0c      	ldr	r3, [pc, #48]	; (8003150 <eMBRTUSend+0xc0>)
 8003120:	5499      	strb	r1, [r3, r2]
        /* Activate the transmitter. */
        eSndState = STATE_TX_XMIT;
 8003122:	4b0c      	ldr	r3, [pc, #48]	; (8003154 <eMBRTUSend+0xc4>)
 8003124:	2201      	movs	r2, #1
 8003126:	701a      	strb	r2, [r3, #0]
        vMBPortSerialEnable( FALSE, TRUE );
 8003128:	2101      	movs	r1, #1
 800312a:	2000      	movs	r0, #0
 800312c:	f000 f9a0 	bl	8003470 <vMBPortSerialEnable>
 8003130:	e001      	b.n	8003136 <eMBRTUSend+0xa6>
    }
    else
    {
        eStatus = MB_EIO;
 8003132:	2305      	movs	r3, #5
 8003134:	73fb      	strb	r3, [r7, #15]
    }
    EXIT_CRITICAL_SECTION(  );
 8003136:	f000 f947 	bl	80033c8 <critical_exit>
    return eStatus;
 800313a:	7bfb      	ldrb	r3, [r7, #15]
}
 800313c:	4618      	mov	r0, r3
 800313e:	3710      	adds	r7, #16
 8003140:	46bd      	mov	sp, r7
 8003142:	bd80      	pop	{r7, pc}
 8003144:	200001fb 	.word	0x200001fb
 8003148:	200002fc 	.word	0x200002fc
 800314c:	20000300 	.word	0x20000300
 8003150:	200001fc 	.word	0x200001fc
 8003154:	200001fa 	.word	0x200001fa

08003158 <xMBRTUReceiveFSM>:

BOOL
xMBRTUReceiveFSM( void )
{
 8003158:	b580      	push	{r7, lr}
 800315a:	b082      	sub	sp, #8
 800315c:	af00      	add	r7, sp, #0
    BOOL            xTaskNeedSwitch = FALSE;
 800315e:	2300      	movs	r3, #0
 8003160:	71fb      	strb	r3, [r7, #7]
    UCHAR           ucByte;

    assert( eSndState == STATE_TX_IDLE );
 8003162:	4b2a      	ldr	r3, [pc, #168]	; (800320c <xMBRTUReceiveFSM+0xb4>)
 8003164:	781b      	ldrb	r3, [r3, #0]
 8003166:	b2db      	uxtb	r3, r3
 8003168:	2b00      	cmp	r3, #0
 800316a:	d005      	beq.n	8003178 <xMBRTUReceiveFSM+0x20>
 800316c:	4b28      	ldr	r3, [pc, #160]	; (8003210 <xMBRTUReceiveFSM+0xb8>)
 800316e:	4a29      	ldr	r2, [pc, #164]	; (8003214 <xMBRTUReceiveFSM+0xbc>)
 8003170:	21e5      	movs	r1, #229	; 0xe5
 8003172:	4829      	ldr	r0, [pc, #164]	; (8003218 <xMBRTUReceiveFSM+0xc0>)
 8003174:	f000 fa4a 	bl	800360c <__assert_func>

    /* Always read the character. */
    ( void )xMBPortSerialGetByte( ( CHAR * ) & ucByte );
 8003178:	1dbb      	adds	r3, r7, #6
 800317a:	4618      	mov	r0, r3
 800317c:	f000 f9fc 	bl	8003578 <xMBPortSerialGetByte>

    switch ( eRcvState )
 8003180:	4b26      	ldr	r3, [pc, #152]	; (800321c <xMBRTUReceiveFSM+0xc4>)
 8003182:	781b      	ldrb	r3, [r3, #0]
 8003184:	b2db      	uxtb	r3, r3
 8003186:	2b03      	cmp	r3, #3
 8003188:	d83b      	bhi.n	8003202 <xMBRTUReceiveFSM+0xaa>
 800318a:	a201      	add	r2, pc, #4	; (adr r2, 8003190 <xMBRTUReceiveFSM+0x38>)
 800318c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003190:	080031a1 	.word	0x080031a1
 8003194:	080031ad 	.word	0x080031ad
 8003198:	080031d5 	.word	0x080031d5
 800319c:	080031a7 	.word	0x080031a7
    {
        /* If we have received a character in the init state we have to
         * wait until the frame is finished.
         */
    case STATE_RX_INIT:
        vMBPortTimersEnable(  );
 80031a0:	f000 fa18 	bl	80035d4 <vMBPortTimersEnable>
        break;
 80031a4:	e02d      	b.n	8003202 <xMBRTUReceiveFSM+0xaa>

        /* In the error state we wait until all characters in the
         * damaged frame are transmitted.
         */
    case STATE_RX_ERROR:
        vMBPortTimersEnable(  );
 80031a6:	f000 fa15 	bl	80035d4 <vMBPortTimersEnable>
        break;
 80031aa:	e02a      	b.n	8003202 <xMBRTUReceiveFSM+0xaa>
        /* In the idle state we wait for a new character. If a character
         * is received the t1.5 and t3.5 timers are started and the
         * receiver is in the state STATE_RX_RECEIVCE.
         */
    case STATE_RX_IDLE:
        usRcvBufferPos = 0;
 80031ac:	4b1c      	ldr	r3, [pc, #112]	; (8003220 <xMBRTUReceiveFSM+0xc8>)
 80031ae:	2200      	movs	r2, #0
 80031b0:	801a      	strh	r2, [r3, #0]
        ucRTUBuf[usRcvBufferPos++] = ucByte;
 80031b2:	4b1b      	ldr	r3, [pc, #108]	; (8003220 <xMBRTUReceiveFSM+0xc8>)
 80031b4:	881b      	ldrh	r3, [r3, #0]
 80031b6:	b29b      	uxth	r3, r3
 80031b8:	1c5a      	adds	r2, r3, #1
 80031ba:	b291      	uxth	r1, r2
 80031bc:	4a18      	ldr	r2, [pc, #96]	; (8003220 <xMBRTUReceiveFSM+0xc8>)
 80031be:	8011      	strh	r1, [r2, #0]
 80031c0:	461a      	mov	r2, r3
 80031c2:	79b9      	ldrb	r1, [r7, #6]
 80031c4:	4b17      	ldr	r3, [pc, #92]	; (8003224 <xMBRTUReceiveFSM+0xcc>)
 80031c6:	5499      	strb	r1, [r3, r2]
        eRcvState = STATE_RX_RCV;
 80031c8:	4b14      	ldr	r3, [pc, #80]	; (800321c <xMBRTUReceiveFSM+0xc4>)
 80031ca:	2202      	movs	r2, #2
 80031cc:	701a      	strb	r2, [r3, #0]

        /* Enable t3.5 timers. */
        vMBPortTimersEnable(  );
 80031ce:	f000 fa01 	bl	80035d4 <vMBPortTimersEnable>
        break;
 80031d2:	e016      	b.n	8003202 <xMBRTUReceiveFSM+0xaa>
         * every character received. If more than the maximum possible
         * number of bytes in a modbus frame is received the frame is
         * ignored.
         */
    case STATE_RX_RCV:
        if( usRcvBufferPos < MB_SER_PDU_SIZE_MAX )
 80031d4:	4b12      	ldr	r3, [pc, #72]	; (8003220 <xMBRTUReceiveFSM+0xc8>)
 80031d6:	881b      	ldrh	r3, [r3, #0]
 80031d8:	b29b      	uxth	r3, r3
 80031da:	2bff      	cmp	r3, #255	; 0xff
 80031dc:	d80b      	bhi.n	80031f6 <xMBRTUReceiveFSM+0x9e>
        {
            ucRTUBuf[usRcvBufferPos++] = ucByte;
 80031de:	4b10      	ldr	r3, [pc, #64]	; (8003220 <xMBRTUReceiveFSM+0xc8>)
 80031e0:	881b      	ldrh	r3, [r3, #0]
 80031e2:	b29b      	uxth	r3, r3
 80031e4:	1c5a      	adds	r2, r3, #1
 80031e6:	b291      	uxth	r1, r2
 80031e8:	4a0d      	ldr	r2, [pc, #52]	; (8003220 <xMBRTUReceiveFSM+0xc8>)
 80031ea:	8011      	strh	r1, [r2, #0]
 80031ec:	461a      	mov	r2, r3
 80031ee:	79b9      	ldrb	r1, [r7, #6]
 80031f0:	4b0c      	ldr	r3, [pc, #48]	; (8003224 <xMBRTUReceiveFSM+0xcc>)
 80031f2:	5499      	strb	r1, [r3, r2]
 80031f4:	e002      	b.n	80031fc <xMBRTUReceiveFSM+0xa4>
        }
        else
        {
            eRcvState = STATE_RX_ERROR;
 80031f6:	4b09      	ldr	r3, [pc, #36]	; (800321c <xMBRTUReceiveFSM+0xc4>)
 80031f8:	2203      	movs	r2, #3
 80031fa:	701a      	strb	r2, [r3, #0]
        }
        vMBPortTimersEnable(  );
 80031fc:	f000 f9ea 	bl	80035d4 <vMBPortTimersEnable>
        break;
 8003200:	bf00      	nop
    }
    return xTaskNeedSwitch;
 8003202:	79fb      	ldrb	r3, [r7, #7]
}
 8003204:	4618      	mov	r0, r3
 8003206:	3708      	adds	r7, #8
 8003208:	46bd      	mov	sp, r7
 800320a:	bd80      	pop	{r7, pc}
 800320c:	200001fa 	.word	0x200001fa
 8003210:	080045f4 	.word	0x080045f4
 8003214:	080048cc 	.word	0x080048cc
 8003218:	080045b8 	.word	0x080045b8
 800321c:	200001fb 	.word	0x200001fb
 8003220:	20000302 	.word	0x20000302
 8003224:	200001fc 	.word	0x200001fc

08003228 <xMBRTUTransmitFSM>:

BOOL
xMBRTUTransmitFSM( void )
{
 8003228:	b580      	push	{r7, lr}
 800322a:	b082      	sub	sp, #8
 800322c:	af00      	add	r7, sp, #0
    BOOL            xNeedPoll = FALSE;
 800322e:	2300      	movs	r3, #0
 8003230:	71fb      	strb	r3, [r7, #7]

    assert( eRcvState == STATE_RX_IDLE );
 8003232:	4b22      	ldr	r3, [pc, #136]	; (80032bc <xMBRTUTransmitFSM+0x94>)
 8003234:	781b      	ldrb	r3, [r3, #0]
 8003236:	b2db      	uxtb	r3, r3
 8003238:	2b01      	cmp	r3, #1
 800323a:	d006      	beq.n	800324a <xMBRTUTransmitFSM+0x22>
 800323c:	4b20      	ldr	r3, [pc, #128]	; (80032c0 <xMBRTUTransmitFSM+0x98>)
 800323e:	4a21      	ldr	r2, [pc, #132]	; (80032c4 <xMBRTUTransmitFSM+0x9c>)
 8003240:	f44f 7190 	mov.w	r1, #288	; 0x120
 8003244:	4820      	ldr	r0, [pc, #128]	; (80032c8 <xMBRTUTransmitFSM+0xa0>)
 8003246:	f000 f9e1 	bl	800360c <__assert_func>

    switch ( eSndState )
 800324a:	4b20      	ldr	r3, [pc, #128]	; (80032cc <xMBRTUTransmitFSM+0xa4>)
 800324c:	781b      	ldrb	r3, [r3, #0]
 800324e:	b2db      	uxtb	r3, r3
 8003250:	2b00      	cmp	r3, #0
 8003252:	d002      	beq.n	800325a <xMBRTUTransmitFSM+0x32>
 8003254:	2b01      	cmp	r3, #1
 8003256:	d005      	beq.n	8003264 <xMBRTUTransmitFSM+0x3c>
 8003258:	e02a      	b.n	80032b0 <xMBRTUTransmitFSM+0x88>
    {
        /* We should not get a transmitter event if the transmitter is in
         * idle state.  */
    case STATE_TX_IDLE:
        /* enable receiver/disable transmitter. */
        vMBPortSerialEnable( TRUE, FALSE );
 800325a:	2100      	movs	r1, #0
 800325c:	2001      	movs	r0, #1
 800325e:	f000 f907 	bl	8003470 <vMBPortSerialEnable>
        break;
 8003262:	e025      	b.n	80032b0 <xMBRTUTransmitFSM+0x88>

    case STATE_TX_XMIT:
        /* check if we are finished. */
        if( usSndBufferCount != 0 )
 8003264:	4b1a      	ldr	r3, [pc, #104]	; (80032d0 <xMBRTUTransmitFSM+0xa8>)
 8003266:	881b      	ldrh	r3, [r3, #0]
 8003268:	b29b      	uxth	r3, r3
 800326a:	2b00      	cmp	r3, #0
 800326c:	d013      	beq.n	8003296 <xMBRTUTransmitFSM+0x6e>
        {
            xMBPortSerialPutByte( ( CHAR )*pucSndBufferCur );
 800326e:	4b19      	ldr	r3, [pc, #100]	; (80032d4 <xMBRTUTransmitFSM+0xac>)
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	781b      	ldrb	r3, [r3, #0]
 8003274:	b2db      	uxtb	r3, r3
 8003276:	4618      	mov	r0, r3
 8003278:	f000 f96a 	bl	8003550 <xMBPortSerialPutByte>
            pucSndBufferCur++;  /* next byte in sendbuffer. */
 800327c:	4b15      	ldr	r3, [pc, #84]	; (80032d4 <xMBRTUTransmitFSM+0xac>)
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	3301      	adds	r3, #1
 8003282:	4a14      	ldr	r2, [pc, #80]	; (80032d4 <xMBRTUTransmitFSM+0xac>)
 8003284:	6013      	str	r3, [r2, #0]
            usSndBufferCount--;
 8003286:	4b12      	ldr	r3, [pc, #72]	; (80032d0 <xMBRTUTransmitFSM+0xa8>)
 8003288:	881b      	ldrh	r3, [r3, #0]
 800328a:	b29b      	uxth	r3, r3
 800328c:	3b01      	subs	r3, #1
 800328e:	b29a      	uxth	r2, r3
 8003290:	4b0f      	ldr	r3, [pc, #60]	; (80032d0 <xMBRTUTransmitFSM+0xa8>)
 8003292:	801a      	strh	r2, [r3, #0]
            /* Disable transmitter. This prevents another transmit buffer
             * empty interrupt. */
            vMBPortSerialEnable( TRUE, FALSE );
            eSndState = STATE_TX_IDLE;
        }
        break;
 8003294:	e00b      	b.n	80032ae <xMBRTUTransmitFSM+0x86>
            xNeedPoll = xMBPortEventPost( EV_FRAME_SENT );
 8003296:	2003      	movs	r0, #3
 8003298:	f000 f8b6 	bl	8003408 <xMBPortEventPost>
 800329c:	4603      	mov	r3, r0
 800329e:	71fb      	strb	r3, [r7, #7]
            vMBPortSerialEnable( TRUE, FALSE );
 80032a0:	2100      	movs	r1, #0
 80032a2:	2001      	movs	r0, #1
 80032a4:	f000 f8e4 	bl	8003470 <vMBPortSerialEnable>
            eSndState = STATE_TX_IDLE;
 80032a8:	4b08      	ldr	r3, [pc, #32]	; (80032cc <xMBRTUTransmitFSM+0xa4>)
 80032aa:	2200      	movs	r2, #0
 80032ac:	701a      	strb	r2, [r3, #0]
        break;
 80032ae:	bf00      	nop
    }

    return xNeedPoll;
 80032b0:	79fb      	ldrb	r3, [r7, #7]
}
 80032b2:	4618      	mov	r0, r3
 80032b4:	3708      	adds	r7, #8
 80032b6:	46bd      	mov	sp, r7
 80032b8:	bd80      	pop	{r7, pc}
 80032ba:	bf00      	nop
 80032bc:	200001fb 	.word	0x200001fb
 80032c0:	08004610 	.word	0x08004610
 80032c4:	080048e0 	.word	0x080048e0
 80032c8:	080045b8 	.word	0x080045b8
 80032cc:	200001fa 	.word	0x200001fa
 80032d0:	20000300 	.word	0x20000300
 80032d4:	200002fc 	.word	0x200002fc

080032d8 <xMBRTUTimerT35Expired>:

BOOL
xMBRTUTimerT35Expired( void )
{
 80032d8:	b580      	push	{r7, lr}
 80032da:	b082      	sub	sp, #8
 80032dc:	af00      	add	r7, sp, #0
    BOOL            xNeedPoll = FALSE;
 80032de:	2300      	movs	r3, #0
 80032e0:	71fb      	strb	r3, [r7, #7]

    switch ( eRcvState )
 80032e2:	4b1c      	ldr	r3, [pc, #112]	; (8003354 <xMBRTUTimerT35Expired+0x7c>)
 80032e4:	781b      	ldrb	r3, [r3, #0]
 80032e6:	b2db      	uxtb	r3, r3
 80032e8:	2b03      	cmp	r3, #3
 80032ea:	d028      	beq.n	800333e <xMBRTUTimerT35Expired+0x66>
 80032ec:	2b03      	cmp	r3, #3
 80032ee:	dc10      	bgt.n	8003312 <xMBRTUTimerT35Expired+0x3a>
 80032f0:	2b00      	cmp	r3, #0
 80032f2:	d002      	beq.n	80032fa <xMBRTUTimerT35Expired+0x22>
 80032f4:	2b02      	cmp	r3, #2
 80032f6:	d006      	beq.n	8003306 <xMBRTUTimerT35Expired+0x2e>
 80032f8:	e00b      	b.n	8003312 <xMBRTUTimerT35Expired+0x3a>
    {
        /* Timer t35 expired. Startup phase is finished. */
    case STATE_RX_INIT:
        xNeedPoll = xMBPortEventPost( EV_READY );
 80032fa:	2000      	movs	r0, #0
 80032fc:	f000 f884 	bl	8003408 <xMBPortEventPost>
 8003300:	4603      	mov	r3, r0
 8003302:	71fb      	strb	r3, [r7, #7]
        break;
 8003304:	e01c      	b.n	8003340 <xMBRTUTimerT35Expired+0x68>

        /* A frame was received and t35 expired. Notify the listener that
         * a new frame was received. */
    case STATE_RX_RCV:
        xNeedPoll = xMBPortEventPost( EV_FRAME_RECEIVED );
 8003306:	2001      	movs	r0, #1
 8003308:	f000 f87e 	bl	8003408 <xMBPortEventPost>
 800330c:	4603      	mov	r3, r0
 800330e:	71fb      	strb	r3, [r7, #7]
        break;
 8003310:	e016      	b.n	8003340 <xMBRTUTimerT35Expired+0x68>
    case STATE_RX_ERROR:
        break;

        /* Function called in an illegal state. */
    default:
        assert( ( eRcvState == STATE_RX_INIT ) ||
 8003312:	4b10      	ldr	r3, [pc, #64]	; (8003354 <xMBRTUTimerT35Expired+0x7c>)
 8003314:	781b      	ldrb	r3, [r3, #0]
 8003316:	b2db      	uxtb	r3, r3
 8003318:	2b00      	cmp	r3, #0
 800331a:	d011      	beq.n	8003340 <xMBRTUTimerT35Expired+0x68>
 800331c:	4b0d      	ldr	r3, [pc, #52]	; (8003354 <xMBRTUTimerT35Expired+0x7c>)
 800331e:	781b      	ldrb	r3, [r3, #0]
 8003320:	b2db      	uxtb	r3, r3
 8003322:	2b02      	cmp	r3, #2
 8003324:	d00c      	beq.n	8003340 <xMBRTUTimerT35Expired+0x68>
 8003326:	4b0b      	ldr	r3, [pc, #44]	; (8003354 <xMBRTUTimerT35Expired+0x7c>)
 8003328:	781b      	ldrb	r3, [r3, #0]
 800332a:	b2db      	uxtb	r3, r3
 800332c:	2b03      	cmp	r3, #3
 800332e:	d007      	beq.n	8003340 <xMBRTUTimerT35Expired+0x68>
 8003330:	4b09      	ldr	r3, [pc, #36]	; (8003358 <xMBRTUTimerT35Expired+0x80>)
 8003332:	4a0a      	ldr	r2, [pc, #40]	; (800335c <xMBRTUTimerT35Expired+0x84>)
 8003334:	f240 1159 	movw	r1, #345	; 0x159
 8003338:	4809      	ldr	r0, [pc, #36]	; (8003360 <xMBRTUTimerT35Expired+0x88>)
 800333a:	f000 f967 	bl	800360c <__assert_func>
        break;
 800333e:	bf00      	nop
                ( eRcvState == STATE_RX_RCV ) || ( eRcvState == STATE_RX_ERROR ) );
    }

    vMBPortTimersDisable(  );
 8003340:	f000 f958 	bl	80035f4 <vMBPortTimersDisable>
    eRcvState = STATE_RX_IDLE;
 8003344:	4b03      	ldr	r3, [pc, #12]	; (8003354 <xMBRTUTimerT35Expired+0x7c>)
 8003346:	2201      	movs	r2, #1
 8003348:	701a      	strb	r2, [r3, #0]

    return xNeedPoll;
 800334a:	79fb      	ldrb	r3, [r7, #7]
}
 800334c:	4618      	mov	r0, r3
 800334e:	3708      	adds	r7, #8
 8003350:	46bd      	mov	sp, r7
 8003352:	bd80      	pop	{r7, pc}
 8003354:	200001fb 	.word	0x200001fb
 8003358:	0800462c 	.word	0x0800462c
 800335c:	080048f4 	.word	0x080048f4
 8003360:	080045b8 	.word	0x080045b8

08003364 <prveMBError2Exception>:
    return ( UCHAR ) usWordBuf;
}

eMBException
prveMBError2Exception( eMBErrorCode eErrorCode )
{
 8003364:	b480      	push	{r7}
 8003366:	b085      	sub	sp, #20
 8003368:	af00      	add	r7, sp, #0
 800336a:	4603      	mov	r3, r0
 800336c:	71fb      	strb	r3, [r7, #7]
    eMBException    eStatus;

    switch ( eErrorCode )
 800336e:	79fb      	ldrb	r3, [r7, #7]
 8003370:	2b07      	cmp	r3, #7
 8003372:	d00c      	beq.n	800338e <prveMBError2Exception+0x2a>
 8003374:	2b07      	cmp	r3, #7
 8003376:	dc0d      	bgt.n	8003394 <prveMBError2Exception+0x30>
 8003378:	2b00      	cmp	r3, #0
 800337a:	d002      	beq.n	8003382 <prveMBError2Exception+0x1e>
 800337c:	2b01      	cmp	r3, #1
 800337e:	d003      	beq.n	8003388 <prveMBError2Exception+0x24>
 8003380:	e008      	b.n	8003394 <prveMBError2Exception+0x30>
    {
        case MB_ENOERR:
            eStatus = MB_EX_NONE;
 8003382:	2300      	movs	r3, #0
 8003384:	73fb      	strb	r3, [r7, #15]
            break;
 8003386:	e008      	b.n	800339a <prveMBError2Exception+0x36>

        case MB_ENOREG:
            eStatus = MB_EX_ILLEGAL_DATA_ADDRESS;
 8003388:	2302      	movs	r3, #2
 800338a:	73fb      	strb	r3, [r7, #15]
            break;
 800338c:	e005      	b.n	800339a <prveMBError2Exception+0x36>

        case MB_ETIMEDOUT:
            eStatus = MB_EX_SLAVE_BUSY;
 800338e:	2306      	movs	r3, #6
 8003390:	73fb      	strb	r3, [r7, #15]
            break;
 8003392:	e002      	b.n	800339a <prveMBError2Exception+0x36>

        default:
            eStatus = MB_EX_SLAVE_DEVICE_FAILURE;
 8003394:	2304      	movs	r3, #4
 8003396:	73fb      	strb	r3, [r7, #15]
            break;
 8003398:	bf00      	nop
    }

    return eStatus;
 800339a:	7bfb      	ldrb	r3, [r7, #15]
}
 800339c:	4618      	mov	r0, r3
 800339e:	3714      	adds	r7, #20
 80033a0:	46bd      	mov	sp, r7
 80033a2:	bc80      	pop	{r7}
 80033a4:	4770      	bx	lr
	...

080033a8 <critical_enter>:
#include "port.h"

static uint32_t lock_nesting_count = 0;

void critical_enter(void)
{
 80033a8:	b480      	push	{r7}
 80033aa:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 80033ac:	b672      	cpsid	i
}
 80033ae:	bf00      	nop
    __disable_irq();
    ++lock_nesting_count;
 80033b0:	4b04      	ldr	r3, [pc, #16]	; (80033c4 <critical_enter+0x1c>)
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	3301      	adds	r3, #1
 80033b6:	4a03      	ldr	r2, [pc, #12]	; (80033c4 <critical_enter+0x1c>)
 80033b8:	6013      	str	r3, [r2, #0]
}
 80033ba:	bf00      	nop
 80033bc:	46bd      	mov	sp, r7
 80033be:	bc80      	pop	{r7}
 80033c0:	4770      	bx	lr
 80033c2:	bf00      	nop
 80033c4:	20000304 	.word	0x20000304

080033c8 <critical_exit>:

void critical_exit(void)
{
 80033c8:	b480      	push	{r7}
 80033ca:	af00      	add	r7, sp, #0
    /* Unlock interrupts only when we are exiting the outermost nested call. */
    --lock_nesting_count;
 80033cc:	4b07      	ldr	r3, [pc, #28]	; (80033ec <critical_exit+0x24>)
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	3b01      	subs	r3, #1
 80033d2:	4a06      	ldr	r2, [pc, #24]	; (80033ec <critical_exit+0x24>)
 80033d4:	6013      	str	r3, [r2, #0]
    if (lock_nesting_count == 0) {
 80033d6:	4b05      	ldr	r3, [pc, #20]	; (80033ec <critical_exit+0x24>)
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	2b00      	cmp	r3, #0
 80033dc:	d101      	bne.n	80033e2 <critical_exit+0x1a>
  __ASM volatile ("cpsie i" : : : "memory");
 80033de:	b662      	cpsie	i
}
 80033e0:	bf00      	nop
        __enable_irq();
    }
}
 80033e2:	bf00      	nop
 80033e4:	46bd      	mov	sp, r7
 80033e6:	bc80      	pop	{r7}
 80033e8:	4770      	bx	lr
 80033ea:	bf00      	nop
 80033ec:	20000304 	.word	0x20000304

080033f0 <xMBPortEventInit>:
static BOOL     xEventInQueue;

/* ----------------------- Start implementation -----------------------------*/
BOOL
xMBPortEventInit( void )
{
 80033f0:	b480      	push	{r7}
 80033f2:	af00      	add	r7, sp, #0
    xEventInQueue = FALSE;
 80033f4:	4b03      	ldr	r3, [pc, #12]	; (8003404 <xMBPortEventInit+0x14>)
 80033f6:	2200      	movs	r2, #0
 80033f8:	701a      	strb	r2, [r3, #0]
    return TRUE;
 80033fa:	2301      	movs	r3, #1
}
 80033fc:	4618      	mov	r0, r3
 80033fe:	46bd      	mov	sp, r7
 8003400:	bc80      	pop	{r7}
 8003402:	4770      	bx	lr
 8003404:	20000309 	.word	0x20000309

08003408 <xMBPortEventPost>:

BOOL
xMBPortEventPost( eMBEventType eEvent )
{
 8003408:	b480      	push	{r7}
 800340a:	b083      	sub	sp, #12
 800340c:	af00      	add	r7, sp, #0
 800340e:	4603      	mov	r3, r0
 8003410:	71fb      	strb	r3, [r7, #7]
    xEventInQueue = TRUE;
 8003412:	4b06      	ldr	r3, [pc, #24]	; (800342c <xMBPortEventPost+0x24>)
 8003414:	2201      	movs	r2, #1
 8003416:	701a      	strb	r2, [r3, #0]
    eQueuedEvent = eEvent;
 8003418:	4a05      	ldr	r2, [pc, #20]	; (8003430 <xMBPortEventPost+0x28>)
 800341a:	79fb      	ldrb	r3, [r7, #7]
 800341c:	7013      	strb	r3, [r2, #0]
    return TRUE;
 800341e:	2301      	movs	r3, #1
}
 8003420:	4618      	mov	r0, r3
 8003422:	370c      	adds	r7, #12
 8003424:	46bd      	mov	sp, r7
 8003426:	bc80      	pop	{r7}
 8003428:	4770      	bx	lr
 800342a:	bf00      	nop
 800342c:	20000309 	.word	0x20000309
 8003430:	20000308 	.word	0x20000308

08003434 <xMBPortEventGet>:

BOOL
xMBPortEventGet( eMBEventType * eEvent )
{
 8003434:	b480      	push	{r7}
 8003436:	b085      	sub	sp, #20
 8003438:	af00      	add	r7, sp, #0
 800343a:	6078      	str	r0, [r7, #4]
    BOOL            xEventHappened = FALSE;
 800343c:	2300      	movs	r3, #0
 800343e:	73fb      	strb	r3, [r7, #15]

    if( xEventInQueue )
 8003440:	4b09      	ldr	r3, [pc, #36]	; (8003468 <xMBPortEventGet+0x34>)
 8003442:	781b      	ldrb	r3, [r3, #0]
 8003444:	2b00      	cmp	r3, #0
 8003446:	d008      	beq.n	800345a <xMBPortEventGet+0x26>
    {
        *eEvent = eQueuedEvent;
 8003448:	4b08      	ldr	r3, [pc, #32]	; (800346c <xMBPortEventGet+0x38>)
 800344a:	781a      	ldrb	r2, [r3, #0]
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	701a      	strb	r2, [r3, #0]
        xEventInQueue = FALSE;
 8003450:	4b05      	ldr	r3, [pc, #20]	; (8003468 <xMBPortEventGet+0x34>)
 8003452:	2200      	movs	r2, #0
 8003454:	701a      	strb	r2, [r3, #0]
        xEventHappened = TRUE;
 8003456:	2301      	movs	r3, #1
 8003458:	73fb      	strb	r3, [r7, #15]
    }
    return xEventHappened;
 800345a:	7bfb      	ldrb	r3, [r7, #15]
}
 800345c:	4618      	mov	r0, r3
 800345e:	3714      	adds	r7, #20
 8003460:	46bd      	mov	sp, r7
 8003462:	bc80      	pop	{r7}
 8003464:	4770      	bx	lr
 8003466:	bf00      	nop
 8003468:	20000309 	.word	0x20000309
 800346c:	20000308 	.word	0x20000308

08003470 <vMBPortSerialEnable>:
//static void prvvUARTRxISR( void );

/* ----------------------- Start implementation -----------------------------*/
void
vMBPortSerialEnable( BOOL xRxEnable, BOOL xTxEnable )
{
 8003470:	b580      	push	{r7, lr}
 8003472:	b082      	sub	sp, #8
 8003474:	af00      	add	r7, sp, #0
 8003476:	4603      	mov	r3, r0
 8003478:	460a      	mov	r2, r1
 800347a:	71fb      	strb	r3, [r7, #7]
 800347c:	4613      	mov	r3, r2
 800347e:	71bb      	strb	r3, [r7, #6]
    /* If xRxEnable enable serial receive interrupts. If xTxENable enable
     * transmitter empty interrupts.
     */
	if (xRxEnable) {
 8003480:	79fb      	ldrb	r3, [r7, #7]
 8003482:	2b00      	cmp	r3, #0
 8003484:	d00f      	beq.n	80034a6 <vMBPortSerialEnable+0x36>
		HAL_GPIO_WritePin(TX_Enable_GPIO, TX_Enable_Pin, GPIO_PIN_RESET);
 8003486:	4b16      	ldr	r3, [pc, #88]	; (80034e0 <vMBPortSerialEnable+0x70>)
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	4a16      	ldr	r2, [pc, #88]	; (80034e4 <vMBPortSerialEnable+0x74>)
 800348c:	8811      	ldrh	r1, [r2, #0]
 800348e:	2200      	movs	r2, #0
 8003490:	4618      	mov	r0, r3
 8003492:	f7fd fe48 	bl	8001126 <HAL_GPIO_WritePin>
		HAL_UART_Receive_IT(huart, &Byte_Received, 1);
 8003496:	4b14      	ldr	r3, [pc, #80]	; (80034e8 <vMBPortSerialEnable+0x78>)
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	2201      	movs	r2, #1
 800349c:	4913      	ldr	r1, [pc, #76]	; (80034ec <vMBPortSerialEnable+0x7c>)
 800349e:	4618      	mov	r0, r3
 80034a0:	f7fe fddd 	bl	800205e <HAL_UART_Receive_IT>
 80034a4:	e004      	b.n	80034b0 <vMBPortSerialEnable+0x40>
	} else {
		HAL_UART_AbortReceive(huart);
 80034a6:	4b10      	ldr	r3, [pc, #64]	; (80034e8 <vMBPortSerialEnable+0x78>)
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	4618      	mov	r0, r3
 80034ac:	f7fe fe64 	bl	8002178 <HAL_UART_AbortReceive>
	}

	if (xTxEnable) {
 80034b0:	79bb      	ldrb	r3, [r7, #6]
 80034b2:	2b00      	cmp	r3, #0
 80034b4:	d00b      	beq.n	80034ce <vMBPortSerialEnable+0x5e>
		HAL_GPIO_WritePin(TX_Enable_GPIO, TX_Enable_Pin, GPIO_PIN_SET);
 80034b6:	4b0a      	ldr	r3, [pc, #40]	; (80034e0 <vMBPortSerialEnable+0x70>)
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	4a0a      	ldr	r2, [pc, #40]	; (80034e4 <vMBPortSerialEnable+0x74>)
 80034bc:	8811      	ldrh	r1, [r2, #0]
 80034be:	2201      	movs	r2, #1
 80034c0:	4618      	mov	r0, r3
 80034c2:	f7fd fe30 	bl	8001126 <HAL_GPIO_WritePin>
	    ( void )pxMBFrameCBTransmitterEmpty(  );
 80034c6:	4b0a      	ldr	r3, [pc, #40]	; (80034f0 <vMBPortSerialEnable+0x80>)
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	4798      	blx	r3
	} else {
		HAL_UART_AbortTransmit(huart);
	}
}
 80034cc:	e004      	b.n	80034d8 <vMBPortSerialEnable+0x68>
		HAL_UART_AbortTransmit(huart);
 80034ce:	4b06      	ldr	r3, [pc, #24]	; (80034e8 <vMBPortSerialEnable+0x78>)
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	4618      	mov	r0, r3
 80034d4:	f7fe fde8 	bl	80020a8 <HAL_UART_AbortTransmit>
}
 80034d8:	bf00      	nop
 80034da:	3708      	adds	r7, #8
 80034dc:	46bd      	mov	sp, r7
 80034de:	bd80      	pop	{r7, pc}
 80034e0:	20000314 	.word	0x20000314
 80034e4:	20000310 	.word	0x20000310
 80034e8:	2000030c 	.word	0x2000030c
 80034ec:	20000318 	.word	0x20000318
 80034f0:	200001c4 	.word	0x200001c4

080034f4 <Modbus_UART_Init>:

void
Modbus_UART_Init(UART_HandleTypeDef *uart, GPIO_TypeDef *GPIOx, uint16_t Pin)
{
 80034f4:	b480      	push	{r7}
 80034f6:	b085      	sub	sp, #20
 80034f8:	af00      	add	r7, sp, #0
 80034fa:	60f8      	str	r0, [r7, #12]
 80034fc:	60b9      	str	r1, [r7, #8]
 80034fe:	4613      	mov	r3, r2
 8003500:	80fb      	strh	r3, [r7, #6]
	huart = uart;
 8003502:	4a07      	ldr	r2, [pc, #28]	; (8003520 <Modbus_UART_Init+0x2c>)
 8003504:	68fb      	ldr	r3, [r7, #12]
 8003506:	6013      	str	r3, [r2, #0]
	TX_Enable_GPIO = GPIOx;
 8003508:	4a06      	ldr	r2, [pc, #24]	; (8003524 <Modbus_UART_Init+0x30>)
 800350a:	68bb      	ldr	r3, [r7, #8]
 800350c:	6013      	str	r3, [r2, #0]
	TX_Enable_Pin = Pin;
 800350e:	4a06      	ldr	r2, [pc, #24]	; (8003528 <Modbus_UART_Init+0x34>)
 8003510:	88fb      	ldrh	r3, [r7, #6]
 8003512:	8013      	strh	r3, [r2, #0]
}
 8003514:	bf00      	nop
 8003516:	3714      	adds	r7, #20
 8003518:	46bd      	mov	sp, r7
 800351a:	bc80      	pop	{r7}
 800351c:	4770      	bx	lr
 800351e:	bf00      	nop
 8003520:	2000030c 	.word	0x2000030c
 8003524:	20000314 	.word	0x20000314
 8003528:	20000310 	.word	0x20000310

0800352c <xMBPortSerialInit>:

BOOL
xMBPortSerialInit( UCHAR ucPort, ULONG ulBaudRate, UCHAR ucDataBits, eMBParity eParity )
{
 800352c:	b480      	push	{r7}
 800352e:	b083      	sub	sp, #12
 8003530:	af00      	add	r7, sp, #0
 8003532:	6039      	str	r1, [r7, #0]
 8003534:	4611      	mov	r1, r2
 8003536:	461a      	mov	r2, r3
 8003538:	4603      	mov	r3, r0
 800353a:	71fb      	strb	r3, [r7, #7]
 800353c:	460b      	mov	r3, r1
 800353e:	71bb      	strb	r3, [r7, #6]
 8003540:	4613      	mov	r3, r2
 8003542:	717b      	strb	r3, [r7, #5]
	(void) ucPort;
	(void) ulBaudRate;
	(void) ucDataBits;
	(void) eParity;

	return TRUE;
 8003544:	2301      	movs	r3, #1
}
 8003546:	4618      	mov	r0, r3
 8003548:	370c      	adds	r7, #12
 800354a:	46bd      	mov	sp, r7
 800354c:	bc80      	pop	{r7}
 800354e:	4770      	bx	lr

08003550 <xMBPortSerialPutByte>:

BOOL
xMBPortSerialPutByte( CHAR ucByte )
{
 8003550:	b580      	push	{r7, lr}
 8003552:	b082      	sub	sp, #8
 8003554:	af00      	add	r7, sp, #0
 8003556:	4603      	mov	r3, r0
 8003558:	71fb      	strb	r3, [r7, #7]
    /* Put a byte in the UARTs transmit buffer. This function is called
     * by the protocol stack if pxMBFrameCBTransmitterEmpty( ) has been
     * called. */
	HAL_UART_Transmit_IT(huart, (uint8_t *)&ucByte, 1);
 800355a:	4b06      	ldr	r3, [pc, #24]	; (8003574 <xMBPortSerialPutByte+0x24>)
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	1df9      	adds	r1, r7, #7
 8003560:	2201      	movs	r2, #1
 8003562:	4618      	mov	r0, r3
 8003564:	f7fe fd46 	bl	8001ff4 <HAL_UART_Transmit_IT>

    return TRUE;
 8003568:	2301      	movs	r3, #1
}
 800356a:	4618      	mov	r0, r3
 800356c:	3708      	adds	r7, #8
 800356e:	46bd      	mov	sp, r7
 8003570:	bd80      	pop	{r7, pc}
 8003572:	bf00      	nop
 8003574:	2000030c 	.word	0x2000030c

08003578 <xMBPortSerialGetByte>:

BOOL
xMBPortSerialGetByte( CHAR * pucByte )
{
 8003578:	b480      	push	{r7}
 800357a:	b083      	sub	sp, #12
 800357c:	af00      	add	r7, sp, #0
 800357e:	6078      	str	r0, [r7, #4]
    /* Return the byte in the UARTs receive buffer. This function is called
     * by the protocol stack after pxMBFrameCBByteReceived( ) has been called.
     */
	*pucByte = Byte_Received;
 8003580:	4b04      	ldr	r3, [pc, #16]	; (8003594 <xMBPortSerialGetByte+0x1c>)
 8003582:	781a      	ldrb	r2, [r3, #0]
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	701a      	strb	r2, [r3, #0]

    return TRUE;
 8003588:	2301      	movs	r3, #1
}
 800358a:	4618      	mov	r0, r3
 800358c:	370c      	adds	r7, #12
 800358e:	46bd      	mov	sp, r7
 8003590:	bc80      	pop	{r7}
 8003592:	4770      	bx	lr
 8003594:	20000318 	.word	0x20000318

08003598 <Modbus_HTIM_Init>:
/* ----------------------- static functions ---------------------------------*/

/* ----------------------- Start implementation -----------------------------*/
void
Modbus_HTIM_Init(TIM_HandleTypeDef *set_htim)
{
 8003598:	b480      	push	{r7}
 800359a:	b083      	sub	sp, #12
 800359c:	af00      	add	r7, sp, #0
 800359e:	6078      	str	r0, [r7, #4]
	htim = set_htim;
 80035a0:	4a03      	ldr	r2, [pc, #12]	; (80035b0 <Modbus_HTIM_Init+0x18>)
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	6013      	str	r3, [r2, #0]
}
 80035a6:	bf00      	nop
 80035a8:	370c      	adds	r7, #12
 80035aa:	46bd      	mov	sp, r7
 80035ac:	bc80      	pop	{r7}
 80035ae:	4770      	bx	lr
 80035b0:	2000031c 	.word	0x2000031c

080035b4 <xMBPortTimersInit>:

BOOL
xMBPortTimersInit( USHORT usTim1Timerout50us )
{
 80035b4:	b480      	push	{r7}
 80035b6:	b083      	sub	sp, #12
 80035b8:	af00      	add	r7, sp, #0
 80035ba:	4603      	mov	r3, r0
 80035bc:	80fb      	strh	r3, [r7, #6]
	timeout = usTim1Timerout50us;
 80035be:	4a04      	ldr	r2, [pc, #16]	; (80035d0 <xMBPortTimersInit+0x1c>)
 80035c0:	88fb      	ldrh	r3, [r7, #6]
 80035c2:	8013      	strh	r3, [r2, #0]

    return TRUE;
 80035c4:	2301      	movs	r3, #1
}
 80035c6:	4618      	mov	r0, r3
 80035c8:	370c      	adds	r7, #12
 80035ca:	46bd      	mov	sp, r7
 80035cc:	bc80      	pop	{r7}
 80035ce:	4770      	bx	lr
 80035d0:	20000320 	.word	0x20000320

080035d4 <vMBPortTimersEnable>:


inline void
vMBPortTimersEnable(  )
{
 80035d4:	b580      	push	{r7, lr}
 80035d6:	af00      	add	r7, sp, #0
    /* Enable the timer with the timeout passed to xMBPortTimersInit( ) */
	counter = 0;
 80035d8:	4b04      	ldr	r3, [pc, #16]	; (80035ec <vMBPortTimersEnable+0x18>)
 80035da:	2200      	movs	r2, #0
 80035dc:	801a      	strh	r2, [r3, #0]
	HAL_TIM_Base_Start_IT(htim);
 80035de:	4b04      	ldr	r3, [pc, #16]	; (80035f0 <vMBPortTimersEnable+0x1c>)
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	4618      	mov	r0, r3
 80035e4:	f7fe fa18 	bl	8001a18 <HAL_TIM_Base_Start_IT>
}
 80035e8:	bf00      	nop
 80035ea:	bd80      	pop	{r7, pc}
 80035ec:	20000322 	.word	0x20000322
 80035f0:	2000031c 	.word	0x2000031c

080035f4 <vMBPortTimersDisable>:

inline void
vMBPortTimersDisable(  )
{
 80035f4:	b580      	push	{r7, lr}
 80035f6:	af00      	add	r7, sp, #0
    /* Disable any pending timers. */
	HAL_TIM_Base_Stop_IT(htim);
 80035f8:	4b03      	ldr	r3, [pc, #12]	; (8003608 <vMBPortTimersDisable+0x14>)
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	4618      	mov	r0, r3
 80035fe:	f7fe fa5d 	bl	8001abc <HAL_TIM_Base_Stop_IT>
}
 8003602:	bf00      	nop
 8003604:	bd80      	pop	{r7, pc}
 8003606:	bf00      	nop
 8003608:	2000031c 	.word	0x2000031c

0800360c <__assert_func>:
 800360c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800360e:	4614      	mov	r4, r2
 8003610:	461a      	mov	r2, r3
 8003612:	4b09      	ldr	r3, [pc, #36]	; (8003638 <__assert_func+0x2c>)
 8003614:	4605      	mov	r5, r0
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	68d8      	ldr	r0, [r3, #12]
 800361a:	b14c      	cbz	r4, 8003630 <__assert_func+0x24>
 800361c:	4b07      	ldr	r3, [pc, #28]	; (800363c <__assert_func+0x30>)
 800361e:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8003622:	9100      	str	r1, [sp, #0]
 8003624:	462b      	mov	r3, r5
 8003626:	4906      	ldr	r1, [pc, #24]	; (8003640 <__assert_func+0x34>)
 8003628:	f000 f8b2 	bl	8003790 <fiprintf>
 800362c:	f000 f9ad 	bl	800398a <abort>
 8003630:	4b04      	ldr	r3, [pc, #16]	; (8003644 <__assert_func+0x38>)
 8003632:	461c      	mov	r4, r3
 8003634:	e7f3      	b.n	800361e <__assert_func+0x12>
 8003636:	bf00      	nop
 8003638:	200000e8 	.word	0x200000e8
 800363c:	0800490a 	.word	0x0800490a
 8003640:	08004917 	.word	0x08004917
 8003644:	08004945 	.word	0x08004945

08003648 <std>:
 8003648:	2300      	movs	r3, #0
 800364a:	b510      	push	{r4, lr}
 800364c:	4604      	mov	r4, r0
 800364e:	e9c0 3300 	strd	r3, r3, [r0]
 8003652:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8003656:	6083      	str	r3, [r0, #8]
 8003658:	8181      	strh	r1, [r0, #12]
 800365a:	6643      	str	r3, [r0, #100]	; 0x64
 800365c:	81c2      	strh	r2, [r0, #14]
 800365e:	6183      	str	r3, [r0, #24]
 8003660:	4619      	mov	r1, r3
 8003662:	2208      	movs	r2, #8
 8003664:	305c      	adds	r0, #92	; 0x5c
 8003666:	f000 f906 	bl	8003876 <memset>
 800366a:	4b0d      	ldr	r3, [pc, #52]	; (80036a0 <std+0x58>)
 800366c:	6224      	str	r4, [r4, #32]
 800366e:	6263      	str	r3, [r4, #36]	; 0x24
 8003670:	4b0c      	ldr	r3, [pc, #48]	; (80036a4 <std+0x5c>)
 8003672:	62a3      	str	r3, [r4, #40]	; 0x28
 8003674:	4b0c      	ldr	r3, [pc, #48]	; (80036a8 <std+0x60>)
 8003676:	62e3      	str	r3, [r4, #44]	; 0x2c
 8003678:	4b0c      	ldr	r3, [pc, #48]	; (80036ac <std+0x64>)
 800367a:	6323      	str	r3, [r4, #48]	; 0x30
 800367c:	4b0c      	ldr	r3, [pc, #48]	; (80036b0 <std+0x68>)
 800367e:	429c      	cmp	r4, r3
 8003680:	d006      	beq.n	8003690 <std+0x48>
 8003682:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8003686:	4294      	cmp	r4, r2
 8003688:	d002      	beq.n	8003690 <std+0x48>
 800368a:	33d0      	adds	r3, #208	; 0xd0
 800368c:	429c      	cmp	r4, r3
 800368e:	d105      	bne.n	800369c <std+0x54>
 8003690:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8003694:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003698:	f000 b966 	b.w	8003968 <__retarget_lock_init_recursive>
 800369c:	bd10      	pop	{r4, pc}
 800369e:	bf00      	nop
 80036a0:	080037f1 	.word	0x080037f1
 80036a4:	08003813 	.word	0x08003813
 80036a8:	0800384b 	.word	0x0800384b
 80036ac:	0800386f 	.word	0x0800386f
 80036b0:	20000324 	.word	0x20000324

080036b4 <stdio_exit_handler>:
 80036b4:	4a02      	ldr	r2, [pc, #8]	; (80036c0 <stdio_exit_handler+0xc>)
 80036b6:	4903      	ldr	r1, [pc, #12]	; (80036c4 <stdio_exit_handler+0x10>)
 80036b8:	4803      	ldr	r0, [pc, #12]	; (80036c8 <stdio_exit_handler+0x14>)
 80036ba:	f000 b87b 	b.w	80037b4 <_fwalk_sglue>
 80036be:	bf00      	nop
 80036c0:	20000090 	.word	0x20000090
 80036c4:	08004231 	.word	0x08004231
 80036c8:	2000009c 	.word	0x2000009c

080036cc <cleanup_stdio>:
 80036cc:	6841      	ldr	r1, [r0, #4]
 80036ce:	4b0c      	ldr	r3, [pc, #48]	; (8003700 <cleanup_stdio+0x34>)
 80036d0:	b510      	push	{r4, lr}
 80036d2:	4299      	cmp	r1, r3
 80036d4:	4604      	mov	r4, r0
 80036d6:	d001      	beq.n	80036dc <cleanup_stdio+0x10>
 80036d8:	f000 fdaa 	bl	8004230 <_fflush_r>
 80036dc:	68a1      	ldr	r1, [r4, #8]
 80036de:	4b09      	ldr	r3, [pc, #36]	; (8003704 <cleanup_stdio+0x38>)
 80036e0:	4299      	cmp	r1, r3
 80036e2:	d002      	beq.n	80036ea <cleanup_stdio+0x1e>
 80036e4:	4620      	mov	r0, r4
 80036e6:	f000 fda3 	bl	8004230 <_fflush_r>
 80036ea:	68e1      	ldr	r1, [r4, #12]
 80036ec:	4b06      	ldr	r3, [pc, #24]	; (8003708 <cleanup_stdio+0x3c>)
 80036ee:	4299      	cmp	r1, r3
 80036f0:	d004      	beq.n	80036fc <cleanup_stdio+0x30>
 80036f2:	4620      	mov	r0, r4
 80036f4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80036f8:	f000 bd9a 	b.w	8004230 <_fflush_r>
 80036fc:	bd10      	pop	{r4, pc}
 80036fe:	bf00      	nop
 8003700:	20000324 	.word	0x20000324
 8003704:	2000038c 	.word	0x2000038c
 8003708:	200003f4 	.word	0x200003f4

0800370c <global_stdio_init.part.0>:
 800370c:	b510      	push	{r4, lr}
 800370e:	4b0b      	ldr	r3, [pc, #44]	; (800373c <global_stdio_init.part.0+0x30>)
 8003710:	4c0b      	ldr	r4, [pc, #44]	; (8003740 <global_stdio_init.part.0+0x34>)
 8003712:	4a0c      	ldr	r2, [pc, #48]	; (8003744 <global_stdio_init.part.0+0x38>)
 8003714:	4620      	mov	r0, r4
 8003716:	601a      	str	r2, [r3, #0]
 8003718:	2104      	movs	r1, #4
 800371a:	2200      	movs	r2, #0
 800371c:	f7ff ff94 	bl	8003648 <std>
 8003720:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8003724:	2201      	movs	r2, #1
 8003726:	2109      	movs	r1, #9
 8003728:	f7ff ff8e 	bl	8003648 <std>
 800372c:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8003730:	2202      	movs	r2, #2
 8003732:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003736:	2112      	movs	r1, #18
 8003738:	f7ff bf86 	b.w	8003648 <std>
 800373c:	2000045c 	.word	0x2000045c
 8003740:	20000324 	.word	0x20000324
 8003744:	080036b5 	.word	0x080036b5

08003748 <__sfp_lock_acquire>:
 8003748:	4801      	ldr	r0, [pc, #4]	; (8003750 <__sfp_lock_acquire+0x8>)
 800374a:	f000 b90e 	b.w	800396a <__retarget_lock_acquire_recursive>
 800374e:	bf00      	nop
 8003750:	20000465 	.word	0x20000465

08003754 <__sfp_lock_release>:
 8003754:	4801      	ldr	r0, [pc, #4]	; (800375c <__sfp_lock_release+0x8>)
 8003756:	f000 b909 	b.w	800396c <__retarget_lock_release_recursive>
 800375a:	bf00      	nop
 800375c:	20000465 	.word	0x20000465

08003760 <__sinit>:
 8003760:	b510      	push	{r4, lr}
 8003762:	4604      	mov	r4, r0
 8003764:	f7ff fff0 	bl	8003748 <__sfp_lock_acquire>
 8003768:	6a23      	ldr	r3, [r4, #32]
 800376a:	b11b      	cbz	r3, 8003774 <__sinit+0x14>
 800376c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003770:	f7ff bff0 	b.w	8003754 <__sfp_lock_release>
 8003774:	4b04      	ldr	r3, [pc, #16]	; (8003788 <__sinit+0x28>)
 8003776:	6223      	str	r3, [r4, #32]
 8003778:	4b04      	ldr	r3, [pc, #16]	; (800378c <__sinit+0x2c>)
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	2b00      	cmp	r3, #0
 800377e:	d1f5      	bne.n	800376c <__sinit+0xc>
 8003780:	f7ff ffc4 	bl	800370c <global_stdio_init.part.0>
 8003784:	e7f2      	b.n	800376c <__sinit+0xc>
 8003786:	bf00      	nop
 8003788:	080036cd 	.word	0x080036cd
 800378c:	2000045c 	.word	0x2000045c

08003790 <fiprintf>:
 8003790:	b40e      	push	{r1, r2, r3}
 8003792:	b503      	push	{r0, r1, lr}
 8003794:	4601      	mov	r1, r0
 8003796:	ab03      	add	r3, sp, #12
 8003798:	4805      	ldr	r0, [pc, #20]	; (80037b0 <fiprintf+0x20>)
 800379a:	f853 2b04 	ldr.w	r2, [r3], #4
 800379e:	6800      	ldr	r0, [r0, #0]
 80037a0:	9301      	str	r3, [sp, #4]
 80037a2:	f000 fa15 	bl	8003bd0 <_vfiprintf_r>
 80037a6:	b002      	add	sp, #8
 80037a8:	f85d eb04 	ldr.w	lr, [sp], #4
 80037ac:	b003      	add	sp, #12
 80037ae:	4770      	bx	lr
 80037b0:	200000e8 	.word	0x200000e8

080037b4 <_fwalk_sglue>:
 80037b4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80037b8:	4607      	mov	r7, r0
 80037ba:	4688      	mov	r8, r1
 80037bc:	4614      	mov	r4, r2
 80037be:	2600      	movs	r6, #0
 80037c0:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80037c4:	f1b9 0901 	subs.w	r9, r9, #1
 80037c8:	d505      	bpl.n	80037d6 <_fwalk_sglue+0x22>
 80037ca:	6824      	ldr	r4, [r4, #0]
 80037cc:	2c00      	cmp	r4, #0
 80037ce:	d1f7      	bne.n	80037c0 <_fwalk_sglue+0xc>
 80037d0:	4630      	mov	r0, r6
 80037d2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80037d6:	89ab      	ldrh	r3, [r5, #12]
 80037d8:	2b01      	cmp	r3, #1
 80037da:	d907      	bls.n	80037ec <_fwalk_sglue+0x38>
 80037dc:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80037e0:	3301      	adds	r3, #1
 80037e2:	d003      	beq.n	80037ec <_fwalk_sglue+0x38>
 80037e4:	4629      	mov	r1, r5
 80037e6:	4638      	mov	r0, r7
 80037e8:	47c0      	blx	r8
 80037ea:	4306      	orrs	r6, r0
 80037ec:	3568      	adds	r5, #104	; 0x68
 80037ee:	e7e9      	b.n	80037c4 <_fwalk_sglue+0x10>

080037f0 <__sread>:
 80037f0:	b510      	push	{r4, lr}
 80037f2:	460c      	mov	r4, r1
 80037f4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80037f8:	f000 f868 	bl	80038cc <_read_r>
 80037fc:	2800      	cmp	r0, #0
 80037fe:	bfab      	itete	ge
 8003800:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8003802:	89a3      	ldrhlt	r3, [r4, #12]
 8003804:	181b      	addge	r3, r3, r0
 8003806:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800380a:	bfac      	ite	ge
 800380c:	6563      	strge	r3, [r4, #84]	; 0x54
 800380e:	81a3      	strhlt	r3, [r4, #12]
 8003810:	bd10      	pop	{r4, pc}

08003812 <__swrite>:
 8003812:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003816:	461f      	mov	r7, r3
 8003818:	898b      	ldrh	r3, [r1, #12]
 800381a:	4605      	mov	r5, r0
 800381c:	05db      	lsls	r3, r3, #23
 800381e:	460c      	mov	r4, r1
 8003820:	4616      	mov	r6, r2
 8003822:	d505      	bpl.n	8003830 <__swrite+0x1e>
 8003824:	2302      	movs	r3, #2
 8003826:	2200      	movs	r2, #0
 8003828:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800382c:	f000 f83c 	bl	80038a8 <_lseek_r>
 8003830:	89a3      	ldrh	r3, [r4, #12]
 8003832:	4632      	mov	r2, r6
 8003834:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003838:	81a3      	strh	r3, [r4, #12]
 800383a:	4628      	mov	r0, r5
 800383c:	463b      	mov	r3, r7
 800383e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003842:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003846:	f000 b853 	b.w	80038f0 <_write_r>

0800384a <__sseek>:
 800384a:	b510      	push	{r4, lr}
 800384c:	460c      	mov	r4, r1
 800384e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003852:	f000 f829 	bl	80038a8 <_lseek_r>
 8003856:	1c43      	adds	r3, r0, #1
 8003858:	89a3      	ldrh	r3, [r4, #12]
 800385a:	bf15      	itete	ne
 800385c:	6560      	strne	r0, [r4, #84]	; 0x54
 800385e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8003862:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8003866:	81a3      	strheq	r3, [r4, #12]
 8003868:	bf18      	it	ne
 800386a:	81a3      	strhne	r3, [r4, #12]
 800386c:	bd10      	pop	{r4, pc}

0800386e <__sclose>:
 800386e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003872:	f000 b809 	b.w	8003888 <_close_r>

08003876 <memset>:
 8003876:	4603      	mov	r3, r0
 8003878:	4402      	add	r2, r0
 800387a:	4293      	cmp	r3, r2
 800387c:	d100      	bne.n	8003880 <memset+0xa>
 800387e:	4770      	bx	lr
 8003880:	f803 1b01 	strb.w	r1, [r3], #1
 8003884:	e7f9      	b.n	800387a <memset+0x4>
	...

08003888 <_close_r>:
 8003888:	b538      	push	{r3, r4, r5, lr}
 800388a:	2300      	movs	r3, #0
 800388c:	4d05      	ldr	r5, [pc, #20]	; (80038a4 <_close_r+0x1c>)
 800388e:	4604      	mov	r4, r0
 8003890:	4608      	mov	r0, r1
 8003892:	602b      	str	r3, [r5, #0]
 8003894:	f7fd f869 	bl	800096a <_close>
 8003898:	1c43      	adds	r3, r0, #1
 800389a:	d102      	bne.n	80038a2 <_close_r+0x1a>
 800389c:	682b      	ldr	r3, [r5, #0]
 800389e:	b103      	cbz	r3, 80038a2 <_close_r+0x1a>
 80038a0:	6023      	str	r3, [r4, #0]
 80038a2:	bd38      	pop	{r3, r4, r5, pc}
 80038a4:	20000460 	.word	0x20000460

080038a8 <_lseek_r>:
 80038a8:	b538      	push	{r3, r4, r5, lr}
 80038aa:	4604      	mov	r4, r0
 80038ac:	4608      	mov	r0, r1
 80038ae:	4611      	mov	r1, r2
 80038b0:	2200      	movs	r2, #0
 80038b2:	4d05      	ldr	r5, [pc, #20]	; (80038c8 <_lseek_r+0x20>)
 80038b4:	602a      	str	r2, [r5, #0]
 80038b6:	461a      	mov	r2, r3
 80038b8:	f7fd f87b 	bl	80009b2 <_lseek>
 80038bc:	1c43      	adds	r3, r0, #1
 80038be:	d102      	bne.n	80038c6 <_lseek_r+0x1e>
 80038c0:	682b      	ldr	r3, [r5, #0]
 80038c2:	b103      	cbz	r3, 80038c6 <_lseek_r+0x1e>
 80038c4:	6023      	str	r3, [r4, #0]
 80038c6:	bd38      	pop	{r3, r4, r5, pc}
 80038c8:	20000460 	.word	0x20000460

080038cc <_read_r>:
 80038cc:	b538      	push	{r3, r4, r5, lr}
 80038ce:	4604      	mov	r4, r0
 80038d0:	4608      	mov	r0, r1
 80038d2:	4611      	mov	r1, r2
 80038d4:	2200      	movs	r2, #0
 80038d6:	4d05      	ldr	r5, [pc, #20]	; (80038ec <_read_r+0x20>)
 80038d8:	602a      	str	r2, [r5, #0]
 80038da:	461a      	mov	r2, r3
 80038dc:	f7fd f80c 	bl	80008f8 <_read>
 80038e0:	1c43      	adds	r3, r0, #1
 80038e2:	d102      	bne.n	80038ea <_read_r+0x1e>
 80038e4:	682b      	ldr	r3, [r5, #0]
 80038e6:	b103      	cbz	r3, 80038ea <_read_r+0x1e>
 80038e8:	6023      	str	r3, [r4, #0]
 80038ea:	bd38      	pop	{r3, r4, r5, pc}
 80038ec:	20000460 	.word	0x20000460

080038f0 <_write_r>:
 80038f0:	b538      	push	{r3, r4, r5, lr}
 80038f2:	4604      	mov	r4, r0
 80038f4:	4608      	mov	r0, r1
 80038f6:	4611      	mov	r1, r2
 80038f8:	2200      	movs	r2, #0
 80038fa:	4d05      	ldr	r5, [pc, #20]	; (8003910 <_write_r+0x20>)
 80038fc:	602a      	str	r2, [r5, #0]
 80038fe:	461a      	mov	r2, r3
 8003900:	f7fd f817 	bl	8000932 <_write>
 8003904:	1c43      	adds	r3, r0, #1
 8003906:	d102      	bne.n	800390e <_write_r+0x1e>
 8003908:	682b      	ldr	r3, [r5, #0]
 800390a:	b103      	cbz	r3, 800390e <_write_r+0x1e>
 800390c:	6023      	str	r3, [r4, #0]
 800390e:	bd38      	pop	{r3, r4, r5, pc}
 8003910:	20000460 	.word	0x20000460

08003914 <__errno>:
 8003914:	4b01      	ldr	r3, [pc, #4]	; (800391c <__errno+0x8>)
 8003916:	6818      	ldr	r0, [r3, #0]
 8003918:	4770      	bx	lr
 800391a:	bf00      	nop
 800391c:	200000e8 	.word	0x200000e8

08003920 <__libc_init_array>:
 8003920:	b570      	push	{r4, r5, r6, lr}
 8003922:	2600      	movs	r6, #0
 8003924:	4d0c      	ldr	r5, [pc, #48]	; (8003958 <__libc_init_array+0x38>)
 8003926:	4c0d      	ldr	r4, [pc, #52]	; (800395c <__libc_init_array+0x3c>)
 8003928:	1b64      	subs	r4, r4, r5
 800392a:	10a4      	asrs	r4, r4, #2
 800392c:	42a6      	cmp	r6, r4
 800392e:	d109      	bne.n	8003944 <__libc_init_array+0x24>
 8003930:	f000 fe22 	bl	8004578 <_init>
 8003934:	2600      	movs	r6, #0
 8003936:	4d0a      	ldr	r5, [pc, #40]	; (8003960 <__libc_init_array+0x40>)
 8003938:	4c0a      	ldr	r4, [pc, #40]	; (8003964 <__libc_init_array+0x44>)
 800393a:	1b64      	subs	r4, r4, r5
 800393c:	10a4      	asrs	r4, r4, #2
 800393e:	42a6      	cmp	r6, r4
 8003940:	d105      	bne.n	800394e <__libc_init_array+0x2e>
 8003942:	bd70      	pop	{r4, r5, r6, pc}
 8003944:	f855 3b04 	ldr.w	r3, [r5], #4
 8003948:	4798      	blx	r3
 800394a:	3601      	adds	r6, #1
 800394c:	e7ee      	b.n	800392c <__libc_init_array+0xc>
 800394e:	f855 3b04 	ldr.w	r3, [r5], #4
 8003952:	4798      	blx	r3
 8003954:	3601      	adds	r6, #1
 8003956:	e7f2      	b.n	800393e <__libc_init_array+0x1e>
 8003958:	0800497c 	.word	0x0800497c
 800395c:	0800497c 	.word	0x0800497c
 8003960:	0800497c 	.word	0x0800497c
 8003964:	08004980 	.word	0x08004980

08003968 <__retarget_lock_init_recursive>:
 8003968:	4770      	bx	lr

0800396a <__retarget_lock_acquire_recursive>:
 800396a:	4770      	bx	lr

0800396c <__retarget_lock_release_recursive>:
 800396c:	4770      	bx	lr

0800396e <memcpy>:
 800396e:	440a      	add	r2, r1
 8003970:	4291      	cmp	r1, r2
 8003972:	f100 33ff 	add.w	r3, r0, #4294967295
 8003976:	d100      	bne.n	800397a <memcpy+0xc>
 8003978:	4770      	bx	lr
 800397a:	b510      	push	{r4, lr}
 800397c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003980:	4291      	cmp	r1, r2
 8003982:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003986:	d1f9      	bne.n	800397c <memcpy+0xe>
 8003988:	bd10      	pop	{r4, pc}

0800398a <abort>:
 800398a:	2006      	movs	r0, #6
 800398c:	b508      	push	{r3, lr}
 800398e:	f000 fd35 	bl	80043fc <raise>
 8003992:	2001      	movs	r0, #1
 8003994:	f7fc ffa6 	bl	80008e4 <_exit>

08003998 <_free_r>:
 8003998:	b538      	push	{r3, r4, r5, lr}
 800399a:	4605      	mov	r5, r0
 800399c:	2900      	cmp	r1, #0
 800399e:	d040      	beq.n	8003a22 <_free_r+0x8a>
 80039a0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80039a4:	1f0c      	subs	r4, r1, #4
 80039a6:	2b00      	cmp	r3, #0
 80039a8:	bfb8      	it	lt
 80039aa:	18e4      	addlt	r4, r4, r3
 80039ac:	f000 f8dc 	bl	8003b68 <__malloc_lock>
 80039b0:	4a1c      	ldr	r2, [pc, #112]	; (8003a24 <_free_r+0x8c>)
 80039b2:	6813      	ldr	r3, [r2, #0]
 80039b4:	b933      	cbnz	r3, 80039c4 <_free_r+0x2c>
 80039b6:	6063      	str	r3, [r4, #4]
 80039b8:	6014      	str	r4, [r2, #0]
 80039ba:	4628      	mov	r0, r5
 80039bc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80039c0:	f000 b8d8 	b.w	8003b74 <__malloc_unlock>
 80039c4:	42a3      	cmp	r3, r4
 80039c6:	d908      	bls.n	80039da <_free_r+0x42>
 80039c8:	6820      	ldr	r0, [r4, #0]
 80039ca:	1821      	adds	r1, r4, r0
 80039cc:	428b      	cmp	r3, r1
 80039ce:	bf01      	itttt	eq
 80039d0:	6819      	ldreq	r1, [r3, #0]
 80039d2:	685b      	ldreq	r3, [r3, #4]
 80039d4:	1809      	addeq	r1, r1, r0
 80039d6:	6021      	streq	r1, [r4, #0]
 80039d8:	e7ed      	b.n	80039b6 <_free_r+0x1e>
 80039da:	461a      	mov	r2, r3
 80039dc:	685b      	ldr	r3, [r3, #4]
 80039de:	b10b      	cbz	r3, 80039e4 <_free_r+0x4c>
 80039e0:	42a3      	cmp	r3, r4
 80039e2:	d9fa      	bls.n	80039da <_free_r+0x42>
 80039e4:	6811      	ldr	r1, [r2, #0]
 80039e6:	1850      	adds	r0, r2, r1
 80039e8:	42a0      	cmp	r0, r4
 80039ea:	d10b      	bne.n	8003a04 <_free_r+0x6c>
 80039ec:	6820      	ldr	r0, [r4, #0]
 80039ee:	4401      	add	r1, r0
 80039f0:	1850      	adds	r0, r2, r1
 80039f2:	4283      	cmp	r3, r0
 80039f4:	6011      	str	r1, [r2, #0]
 80039f6:	d1e0      	bne.n	80039ba <_free_r+0x22>
 80039f8:	6818      	ldr	r0, [r3, #0]
 80039fa:	685b      	ldr	r3, [r3, #4]
 80039fc:	4408      	add	r0, r1
 80039fe:	6010      	str	r0, [r2, #0]
 8003a00:	6053      	str	r3, [r2, #4]
 8003a02:	e7da      	b.n	80039ba <_free_r+0x22>
 8003a04:	d902      	bls.n	8003a0c <_free_r+0x74>
 8003a06:	230c      	movs	r3, #12
 8003a08:	602b      	str	r3, [r5, #0]
 8003a0a:	e7d6      	b.n	80039ba <_free_r+0x22>
 8003a0c:	6820      	ldr	r0, [r4, #0]
 8003a0e:	1821      	adds	r1, r4, r0
 8003a10:	428b      	cmp	r3, r1
 8003a12:	bf01      	itttt	eq
 8003a14:	6819      	ldreq	r1, [r3, #0]
 8003a16:	685b      	ldreq	r3, [r3, #4]
 8003a18:	1809      	addeq	r1, r1, r0
 8003a1a:	6021      	streq	r1, [r4, #0]
 8003a1c:	6063      	str	r3, [r4, #4]
 8003a1e:	6054      	str	r4, [r2, #4]
 8003a20:	e7cb      	b.n	80039ba <_free_r+0x22>
 8003a22:	bd38      	pop	{r3, r4, r5, pc}
 8003a24:	20000468 	.word	0x20000468

08003a28 <sbrk_aligned>:
 8003a28:	b570      	push	{r4, r5, r6, lr}
 8003a2a:	4e0e      	ldr	r6, [pc, #56]	; (8003a64 <sbrk_aligned+0x3c>)
 8003a2c:	460c      	mov	r4, r1
 8003a2e:	6831      	ldr	r1, [r6, #0]
 8003a30:	4605      	mov	r5, r0
 8003a32:	b911      	cbnz	r1, 8003a3a <sbrk_aligned+0x12>
 8003a34:	f000 fcfe 	bl	8004434 <_sbrk_r>
 8003a38:	6030      	str	r0, [r6, #0]
 8003a3a:	4621      	mov	r1, r4
 8003a3c:	4628      	mov	r0, r5
 8003a3e:	f000 fcf9 	bl	8004434 <_sbrk_r>
 8003a42:	1c43      	adds	r3, r0, #1
 8003a44:	d00a      	beq.n	8003a5c <sbrk_aligned+0x34>
 8003a46:	1cc4      	adds	r4, r0, #3
 8003a48:	f024 0403 	bic.w	r4, r4, #3
 8003a4c:	42a0      	cmp	r0, r4
 8003a4e:	d007      	beq.n	8003a60 <sbrk_aligned+0x38>
 8003a50:	1a21      	subs	r1, r4, r0
 8003a52:	4628      	mov	r0, r5
 8003a54:	f000 fcee 	bl	8004434 <_sbrk_r>
 8003a58:	3001      	adds	r0, #1
 8003a5a:	d101      	bne.n	8003a60 <sbrk_aligned+0x38>
 8003a5c:	f04f 34ff 	mov.w	r4, #4294967295
 8003a60:	4620      	mov	r0, r4
 8003a62:	bd70      	pop	{r4, r5, r6, pc}
 8003a64:	2000046c 	.word	0x2000046c

08003a68 <_malloc_r>:
 8003a68:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003a6c:	1ccd      	adds	r5, r1, #3
 8003a6e:	f025 0503 	bic.w	r5, r5, #3
 8003a72:	3508      	adds	r5, #8
 8003a74:	2d0c      	cmp	r5, #12
 8003a76:	bf38      	it	cc
 8003a78:	250c      	movcc	r5, #12
 8003a7a:	2d00      	cmp	r5, #0
 8003a7c:	4607      	mov	r7, r0
 8003a7e:	db01      	blt.n	8003a84 <_malloc_r+0x1c>
 8003a80:	42a9      	cmp	r1, r5
 8003a82:	d905      	bls.n	8003a90 <_malloc_r+0x28>
 8003a84:	230c      	movs	r3, #12
 8003a86:	2600      	movs	r6, #0
 8003a88:	603b      	str	r3, [r7, #0]
 8003a8a:	4630      	mov	r0, r6
 8003a8c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003a90:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8003b64 <_malloc_r+0xfc>
 8003a94:	f000 f868 	bl	8003b68 <__malloc_lock>
 8003a98:	f8d8 3000 	ldr.w	r3, [r8]
 8003a9c:	461c      	mov	r4, r3
 8003a9e:	bb5c      	cbnz	r4, 8003af8 <_malloc_r+0x90>
 8003aa0:	4629      	mov	r1, r5
 8003aa2:	4638      	mov	r0, r7
 8003aa4:	f7ff ffc0 	bl	8003a28 <sbrk_aligned>
 8003aa8:	1c43      	adds	r3, r0, #1
 8003aaa:	4604      	mov	r4, r0
 8003aac:	d155      	bne.n	8003b5a <_malloc_r+0xf2>
 8003aae:	f8d8 4000 	ldr.w	r4, [r8]
 8003ab2:	4626      	mov	r6, r4
 8003ab4:	2e00      	cmp	r6, #0
 8003ab6:	d145      	bne.n	8003b44 <_malloc_r+0xdc>
 8003ab8:	2c00      	cmp	r4, #0
 8003aba:	d048      	beq.n	8003b4e <_malloc_r+0xe6>
 8003abc:	6823      	ldr	r3, [r4, #0]
 8003abe:	4631      	mov	r1, r6
 8003ac0:	4638      	mov	r0, r7
 8003ac2:	eb04 0903 	add.w	r9, r4, r3
 8003ac6:	f000 fcb5 	bl	8004434 <_sbrk_r>
 8003aca:	4581      	cmp	r9, r0
 8003acc:	d13f      	bne.n	8003b4e <_malloc_r+0xe6>
 8003ace:	6821      	ldr	r1, [r4, #0]
 8003ad0:	4638      	mov	r0, r7
 8003ad2:	1a6d      	subs	r5, r5, r1
 8003ad4:	4629      	mov	r1, r5
 8003ad6:	f7ff ffa7 	bl	8003a28 <sbrk_aligned>
 8003ada:	3001      	adds	r0, #1
 8003adc:	d037      	beq.n	8003b4e <_malloc_r+0xe6>
 8003ade:	6823      	ldr	r3, [r4, #0]
 8003ae0:	442b      	add	r3, r5
 8003ae2:	6023      	str	r3, [r4, #0]
 8003ae4:	f8d8 3000 	ldr.w	r3, [r8]
 8003ae8:	2b00      	cmp	r3, #0
 8003aea:	d038      	beq.n	8003b5e <_malloc_r+0xf6>
 8003aec:	685a      	ldr	r2, [r3, #4]
 8003aee:	42a2      	cmp	r2, r4
 8003af0:	d12b      	bne.n	8003b4a <_malloc_r+0xe2>
 8003af2:	2200      	movs	r2, #0
 8003af4:	605a      	str	r2, [r3, #4]
 8003af6:	e00f      	b.n	8003b18 <_malloc_r+0xb0>
 8003af8:	6822      	ldr	r2, [r4, #0]
 8003afa:	1b52      	subs	r2, r2, r5
 8003afc:	d41f      	bmi.n	8003b3e <_malloc_r+0xd6>
 8003afe:	2a0b      	cmp	r2, #11
 8003b00:	d917      	bls.n	8003b32 <_malloc_r+0xca>
 8003b02:	1961      	adds	r1, r4, r5
 8003b04:	42a3      	cmp	r3, r4
 8003b06:	6025      	str	r5, [r4, #0]
 8003b08:	bf18      	it	ne
 8003b0a:	6059      	strne	r1, [r3, #4]
 8003b0c:	6863      	ldr	r3, [r4, #4]
 8003b0e:	bf08      	it	eq
 8003b10:	f8c8 1000 	streq.w	r1, [r8]
 8003b14:	5162      	str	r2, [r4, r5]
 8003b16:	604b      	str	r3, [r1, #4]
 8003b18:	4638      	mov	r0, r7
 8003b1a:	f104 060b 	add.w	r6, r4, #11
 8003b1e:	f000 f829 	bl	8003b74 <__malloc_unlock>
 8003b22:	f026 0607 	bic.w	r6, r6, #7
 8003b26:	1d23      	adds	r3, r4, #4
 8003b28:	1af2      	subs	r2, r6, r3
 8003b2a:	d0ae      	beq.n	8003a8a <_malloc_r+0x22>
 8003b2c:	1b9b      	subs	r3, r3, r6
 8003b2e:	50a3      	str	r3, [r4, r2]
 8003b30:	e7ab      	b.n	8003a8a <_malloc_r+0x22>
 8003b32:	42a3      	cmp	r3, r4
 8003b34:	6862      	ldr	r2, [r4, #4]
 8003b36:	d1dd      	bne.n	8003af4 <_malloc_r+0x8c>
 8003b38:	f8c8 2000 	str.w	r2, [r8]
 8003b3c:	e7ec      	b.n	8003b18 <_malloc_r+0xb0>
 8003b3e:	4623      	mov	r3, r4
 8003b40:	6864      	ldr	r4, [r4, #4]
 8003b42:	e7ac      	b.n	8003a9e <_malloc_r+0x36>
 8003b44:	4634      	mov	r4, r6
 8003b46:	6876      	ldr	r6, [r6, #4]
 8003b48:	e7b4      	b.n	8003ab4 <_malloc_r+0x4c>
 8003b4a:	4613      	mov	r3, r2
 8003b4c:	e7cc      	b.n	8003ae8 <_malloc_r+0x80>
 8003b4e:	230c      	movs	r3, #12
 8003b50:	4638      	mov	r0, r7
 8003b52:	603b      	str	r3, [r7, #0]
 8003b54:	f000 f80e 	bl	8003b74 <__malloc_unlock>
 8003b58:	e797      	b.n	8003a8a <_malloc_r+0x22>
 8003b5a:	6025      	str	r5, [r4, #0]
 8003b5c:	e7dc      	b.n	8003b18 <_malloc_r+0xb0>
 8003b5e:	605b      	str	r3, [r3, #4]
 8003b60:	deff      	udf	#255	; 0xff
 8003b62:	bf00      	nop
 8003b64:	20000468 	.word	0x20000468

08003b68 <__malloc_lock>:
 8003b68:	4801      	ldr	r0, [pc, #4]	; (8003b70 <__malloc_lock+0x8>)
 8003b6a:	f7ff befe 	b.w	800396a <__retarget_lock_acquire_recursive>
 8003b6e:	bf00      	nop
 8003b70:	20000464 	.word	0x20000464

08003b74 <__malloc_unlock>:
 8003b74:	4801      	ldr	r0, [pc, #4]	; (8003b7c <__malloc_unlock+0x8>)
 8003b76:	f7ff bef9 	b.w	800396c <__retarget_lock_release_recursive>
 8003b7a:	bf00      	nop
 8003b7c:	20000464 	.word	0x20000464

08003b80 <__sfputc_r>:
 8003b80:	6893      	ldr	r3, [r2, #8]
 8003b82:	b410      	push	{r4}
 8003b84:	3b01      	subs	r3, #1
 8003b86:	2b00      	cmp	r3, #0
 8003b88:	6093      	str	r3, [r2, #8]
 8003b8a:	da07      	bge.n	8003b9c <__sfputc_r+0x1c>
 8003b8c:	6994      	ldr	r4, [r2, #24]
 8003b8e:	42a3      	cmp	r3, r4
 8003b90:	db01      	blt.n	8003b96 <__sfputc_r+0x16>
 8003b92:	290a      	cmp	r1, #10
 8003b94:	d102      	bne.n	8003b9c <__sfputc_r+0x1c>
 8003b96:	bc10      	pop	{r4}
 8003b98:	f000 bb72 	b.w	8004280 <__swbuf_r>
 8003b9c:	6813      	ldr	r3, [r2, #0]
 8003b9e:	1c58      	adds	r0, r3, #1
 8003ba0:	6010      	str	r0, [r2, #0]
 8003ba2:	7019      	strb	r1, [r3, #0]
 8003ba4:	4608      	mov	r0, r1
 8003ba6:	bc10      	pop	{r4}
 8003ba8:	4770      	bx	lr

08003baa <__sfputs_r>:
 8003baa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003bac:	4606      	mov	r6, r0
 8003bae:	460f      	mov	r7, r1
 8003bb0:	4614      	mov	r4, r2
 8003bb2:	18d5      	adds	r5, r2, r3
 8003bb4:	42ac      	cmp	r4, r5
 8003bb6:	d101      	bne.n	8003bbc <__sfputs_r+0x12>
 8003bb8:	2000      	movs	r0, #0
 8003bba:	e007      	b.n	8003bcc <__sfputs_r+0x22>
 8003bbc:	463a      	mov	r2, r7
 8003bbe:	4630      	mov	r0, r6
 8003bc0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003bc4:	f7ff ffdc 	bl	8003b80 <__sfputc_r>
 8003bc8:	1c43      	adds	r3, r0, #1
 8003bca:	d1f3      	bne.n	8003bb4 <__sfputs_r+0xa>
 8003bcc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08003bd0 <_vfiprintf_r>:
 8003bd0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003bd4:	460d      	mov	r5, r1
 8003bd6:	4614      	mov	r4, r2
 8003bd8:	4698      	mov	r8, r3
 8003bda:	4606      	mov	r6, r0
 8003bdc:	b09d      	sub	sp, #116	; 0x74
 8003bde:	b118      	cbz	r0, 8003be8 <_vfiprintf_r+0x18>
 8003be0:	6a03      	ldr	r3, [r0, #32]
 8003be2:	b90b      	cbnz	r3, 8003be8 <_vfiprintf_r+0x18>
 8003be4:	f7ff fdbc 	bl	8003760 <__sinit>
 8003be8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8003bea:	07d9      	lsls	r1, r3, #31
 8003bec:	d405      	bmi.n	8003bfa <_vfiprintf_r+0x2a>
 8003bee:	89ab      	ldrh	r3, [r5, #12]
 8003bf0:	059a      	lsls	r2, r3, #22
 8003bf2:	d402      	bmi.n	8003bfa <_vfiprintf_r+0x2a>
 8003bf4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8003bf6:	f7ff feb8 	bl	800396a <__retarget_lock_acquire_recursive>
 8003bfa:	89ab      	ldrh	r3, [r5, #12]
 8003bfc:	071b      	lsls	r3, r3, #28
 8003bfe:	d501      	bpl.n	8003c04 <_vfiprintf_r+0x34>
 8003c00:	692b      	ldr	r3, [r5, #16]
 8003c02:	b99b      	cbnz	r3, 8003c2c <_vfiprintf_r+0x5c>
 8003c04:	4629      	mov	r1, r5
 8003c06:	4630      	mov	r0, r6
 8003c08:	f000 fb78 	bl	80042fc <__swsetup_r>
 8003c0c:	b170      	cbz	r0, 8003c2c <_vfiprintf_r+0x5c>
 8003c0e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8003c10:	07dc      	lsls	r4, r3, #31
 8003c12:	d504      	bpl.n	8003c1e <_vfiprintf_r+0x4e>
 8003c14:	f04f 30ff 	mov.w	r0, #4294967295
 8003c18:	b01d      	add	sp, #116	; 0x74
 8003c1a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003c1e:	89ab      	ldrh	r3, [r5, #12]
 8003c20:	0598      	lsls	r0, r3, #22
 8003c22:	d4f7      	bmi.n	8003c14 <_vfiprintf_r+0x44>
 8003c24:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8003c26:	f7ff fea1 	bl	800396c <__retarget_lock_release_recursive>
 8003c2a:	e7f3      	b.n	8003c14 <_vfiprintf_r+0x44>
 8003c2c:	2300      	movs	r3, #0
 8003c2e:	9309      	str	r3, [sp, #36]	; 0x24
 8003c30:	2320      	movs	r3, #32
 8003c32:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8003c36:	2330      	movs	r3, #48	; 0x30
 8003c38:	f04f 0901 	mov.w	r9, #1
 8003c3c:	f8cd 800c 	str.w	r8, [sp, #12]
 8003c40:	f8df 81ac 	ldr.w	r8, [pc, #428]	; 8003df0 <_vfiprintf_r+0x220>
 8003c44:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8003c48:	4623      	mov	r3, r4
 8003c4a:	469a      	mov	sl, r3
 8003c4c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003c50:	b10a      	cbz	r2, 8003c56 <_vfiprintf_r+0x86>
 8003c52:	2a25      	cmp	r2, #37	; 0x25
 8003c54:	d1f9      	bne.n	8003c4a <_vfiprintf_r+0x7a>
 8003c56:	ebba 0b04 	subs.w	fp, sl, r4
 8003c5a:	d00b      	beq.n	8003c74 <_vfiprintf_r+0xa4>
 8003c5c:	465b      	mov	r3, fp
 8003c5e:	4622      	mov	r2, r4
 8003c60:	4629      	mov	r1, r5
 8003c62:	4630      	mov	r0, r6
 8003c64:	f7ff ffa1 	bl	8003baa <__sfputs_r>
 8003c68:	3001      	adds	r0, #1
 8003c6a:	f000 80a9 	beq.w	8003dc0 <_vfiprintf_r+0x1f0>
 8003c6e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8003c70:	445a      	add	r2, fp
 8003c72:	9209      	str	r2, [sp, #36]	; 0x24
 8003c74:	f89a 3000 	ldrb.w	r3, [sl]
 8003c78:	2b00      	cmp	r3, #0
 8003c7a:	f000 80a1 	beq.w	8003dc0 <_vfiprintf_r+0x1f0>
 8003c7e:	2300      	movs	r3, #0
 8003c80:	f04f 32ff 	mov.w	r2, #4294967295
 8003c84:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003c88:	f10a 0a01 	add.w	sl, sl, #1
 8003c8c:	9304      	str	r3, [sp, #16]
 8003c8e:	9307      	str	r3, [sp, #28]
 8003c90:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8003c94:	931a      	str	r3, [sp, #104]	; 0x68
 8003c96:	4654      	mov	r4, sl
 8003c98:	2205      	movs	r2, #5
 8003c9a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003c9e:	4854      	ldr	r0, [pc, #336]	; (8003df0 <_vfiprintf_r+0x220>)
 8003ca0:	f000 fbd8 	bl	8004454 <memchr>
 8003ca4:	9a04      	ldr	r2, [sp, #16]
 8003ca6:	b9d8      	cbnz	r0, 8003ce0 <_vfiprintf_r+0x110>
 8003ca8:	06d1      	lsls	r1, r2, #27
 8003caa:	bf44      	itt	mi
 8003cac:	2320      	movmi	r3, #32
 8003cae:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003cb2:	0713      	lsls	r3, r2, #28
 8003cb4:	bf44      	itt	mi
 8003cb6:	232b      	movmi	r3, #43	; 0x2b
 8003cb8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003cbc:	f89a 3000 	ldrb.w	r3, [sl]
 8003cc0:	2b2a      	cmp	r3, #42	; 0x2a
 8003cc2:	d015      	beq.n	8003cf0 <_vfiprintf_r+0x120>
 8003cc4:	4654      	mov	r4, sl
 8003cc6:	2000      	movs	r0, #0
 8003cc8:	f04f 0c0a 	mov.w	ip, #10
 8003ccc:	9a07      	ldr	r2, [sp, #28]
 8003cce:	4621      	mov	r1, r4
 8003cd0:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003cd4:	3b30      	subs	r3, #48	; 0x30
 8003cd6:	2b09      	cmp	r3, #9
 8003cd8:	d94d      	bls.n	8003d76 <_vfiprintf_r+0x1a6>
 8003cda:	b1b0      	cbz	r0, 8003d0a <_vfiprintf_r+0x13a>
 8003cdc:	9207      	str	r2, [sp, #28]
 8003cde:	e014      	b.n	8003d0a <_vfiprintf_r+0x13a>
 8003ce0:	eba0 0308 	sub.w	r3, r0, r8
 8003ce4:	fa09 f303 	lsl.w	r3, r9, r3
 8003ce8:	4313      	orrs	r3, r2
 8003cea:	46a2      	mov	sl, r4
 8003cec:	9304      	str	r3, [sp, #16]
 8003cee:	e7d2      	b.n	8003c96 <_vfiprintf_r+0xc6>
 8003cf0:	9b03      	ldr	r3, [sp, #12]
 8003cf2:	1d19      	adds	r1, r3, #4
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	9103      	str	r1, [sp, #12]
 8003cf8:	2b00      	cmp	r3, #0
 8003cfa:	bfbb      	ittet	lt
 8003cfc:	425b      	neglt	r3, r3
 8003cfe:	f042 0202 	orrlt.w	r2, r2, #2
 8003d02:	9307      	strge	r3, [sp, #28]
 8003d04:	9307      	strlt	r3, [sp, #28]
 8003d06:	bfb8      	it	lt
 8003d08:	9204      	strlt	r2, [sp, #16]
 8003d0a:	7823      	ldrb	r3, [r4, #0]
 8003d0c:	2b2e      	cmp	r3, #46	; 0x2e
 8003d0e:	d10c      	bne.n	8003d2a <_vfiprintf_r+0x15a>
 8003d10:	7863      	ldrb	r3, [r4, #1]
 8003d12:	2b2a      	cmp	r3, #42	; 0x2a
 8003d14:	d134      	bne.n	8003d80 <_vfiprintf_r+0x1b0>
 8003d16:	9b03      	ldr	r3, [sp, #12]
 8003d18:	3402      	adds	r4, #2
 8003d1a:	1d1a      	adds	r2, r3, #4
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	9203      	str	r2, [sp, #12]
 8003d20:	2b00      	cmp	r3, #0
 8003d22:	bfb8      	it	lt
 8003d24:	f04f 33ff 	movlt.w	r3, #4294967295
 8003d28:	9305      	str	r3, [sp, #20]
 8003d2a:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8003df4 <_vfiprintf_r+0x224>
 8003d2e:	2203      	movs	r2, #3
 8003d30:	4650      	mov	r0, sl
 8003d32:	7821      	ldrb	r1, [r4, #0]
 8003d34:	f000 fb8e 	bl	8004454 <memchr>
 8003d38:	b138      	cbz	r0, 8003d4a <_vfiprintf_r+0x17a>
 8003d3a:	2240      	movs	r2, #64	; 0x40
 8003d3c:	9b04      	ldr	r3, [sp, #16]
 8003d3e:	eba0 000a 	sub.w	r0, r0, sl
 8003d42:	4082      	lsls	r2, r0
 8003d44:	4313      	orrs	r3, r2
 8003d46:	3401      	adds	r4, #1
 8003d48:	9304      	str	r3, [sp, #16]
 8003d4a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003d4e:	2206      	movs	r2, #6
 8003d50:	4829      	ldr	r0, [pc, #164]	; (8003df8 <_vfiprintf_r+0x228>)
 8003d52:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8003d56:	f000 fb7d 	bl	8004454 <memchr>
 8003d5a:	2800      	cmp	r0, #0
 8003d5c:	d03f      	beq.n	8003dde <_vfiprintf_r+0x20e>
 8003d5e:	4b27      	ldr	r3, [pc, #156]	; (8003dfc <_vfiprintf_r+0x22c>)
 8003d60:	bb1b      	cbnz	r3, 8003daa <_vfiprintf_r+0x1da>
 8003d62:	9b03      	ldr	r3, [sp, #12]
 8003d64:	3307      	adds	r3, #7
 8003d66:	f023 0307 	bic.w	r3, r3, #7
 8003d6a:	3308      	adds	r3, #8
 8003d6c:	9303      	str	r3, [sp, #12]
 8003d6e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003d70:	443b      	add	r3, r7
 8003d72:	9309      	str	r3, [sp, #36]	; 0x24
 8003d74:	e768      	b.n	8003c48 <_vfiprintf_r+0x78>
 8003d76:	460c      	mov	r4, r1
 8003d78:	2001      	movs	r0, #1
 8003d7a:	fb0c 3202 	mla	r2, ip, r2, r3
 8003d7e:	e7a6      	b.n	8003cce <_vfiprintf_r+0xfe>
 8003d80:	2300      	movs	r3, #0
 8003d82:	f04f 0c0a 	mov.w	ip, #10
 8003d86:	4619      	mov	r1, r3
 8003d88:	3401      	adds	r4, #1
 8003d8a:	9305      	str	r3, [sp, #20]
 8003d8c:	4620      	mov	r0, r4
 8003d8e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003d92:	3a30      	subs	r2, #48	; 0x30
 8003d94:	2a09      	cmp	r2, #9
 8003d96:	d903      	bls.n	8003da0 <_vfiprintf_r+0x1d0>
 8003d98:	2b00      	cmp	r3, #0
 8003d9a:	d0c6      	beq.n	8003d2a <_vfiprintf_r+0x15a>
 8003d9c:	9105      	str	r1, [sp, #20]
 8003d9e:	e7c4      	b.n	8003d2a <_vfiprintf_r+0x15a>
 8003da0:	4604      	mov	r4, r0
 8003da2:	2301      	movs	r3, #1
 8003da4:	fb0c 2101 	mla	r1, ip, r1, r2
 8003da8:	e7f0      	b.n	8003d8c <_vfiprintf_r+0x1bc>
 8003daa:	ab03      	add	r3, sp, #12
 8003dac:	9300      	str	r3, [sp, #0]
 8003dae:	462a      	mov	r2, r5
 8003db0:	4630      	mov	r0, r6
 8003db2:	4b13      	ldr	r3, [pc, #76]	; (8003e00 <_vfiprintf_r+0x230>)
 8003db4:	a904      	add	r1, sp, #16
 8003db6:	f3af 8000 	nop.w
 8003dba:	4607      	mov	r7, r0
 8003dbc:	1c78      	adds	r0, r7, #1
 8003dbe:	d1d6      	bne.n	8003d6e <_vfiprintf_r+0x19e>
 8003dc0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8003dc2:	07d9      	lsls	r1, r3, #31
 8003dc4:	d405      	bmi.n	8003dd2 <_vfiprintf_r+0x202>
 8003dc6:	89ab      	ldrh	r3, [r5, #12]
 8003dc8:	059a      	lsls	r2, r3, #22
 8003dca:	d402      	bmi.n	8003dd2 <_vfiprintf_r+0x202>
 8003dcc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8003dce:	f7ff fdcd 	bl	800396c <__retarget_lock_release_recursive>
 8003dd2:	89ab      	ldrh	r3, [r5, #12]
 8003dd4:	065b      	lsls	r3, r3, #25
 8003dd6:	f53f af1d 	bmi.w	8003c14 <_vfiprintf_r+0x44>
 8003dda:	9809      	ldr	r0, [sp, #36]	; 0x24
 8003ddc:	e71c      	b.n	8003c18 <_vfiprintf_r+0x48>
 8003dde:	ab03      	add	r3, sp, #12
 8003de0:	9300      	str	r3, [sp, #0]
 8003de2:	462a      	mov	r2, r5
 8003de4:	4630      	mov	r0, r6
 8003de6:	4b06      	ldr	r3, [pc, #24]	; (8003e00 <_vfiprintf_r+0x230>)
 8003de8:	a904      	add	r1, sp, #16
 8003dea:	f000 f87d 	bl	8003ee8 <_printf_i>
 8003dee:	e7e4      	b.n	8003dba <_vfiprintf_r+0x1ea>
 8003df0:	08004946 	.word	0x08004946
 8003df4:	0800494c 	.word	0x0800494c
 8003df8:	08004950 	.word	0x08004950
 8003dfc:	00000000 	.word	0x00000000
 8003e00:	08003bab 	.word	0x08003bab

08003e04 <_printf_common>:
 8003e04:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003e08:	4616      	mov	r6, r2
 8003e0a:	4699      	mov	r9, r3
 8003e0c:	688a      	ldr	r2, [r1, #8]
 8003e0e:	690b      	ldr	r3, [r1, #16]
 8003e10:	4607      	mov	r7, r0
 8003e12:	4293      	cmp	r3, r2
 8003e14:	bfb8      	it	lt
 8003e16:	4613      	movlt	r3, r2
 8003e18:	6033      	str	r3, [r6, #0]
 8003e1a:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8003e1e:	460c      	mov	r4, r1
 8003e20:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003e24:	b10a      	cbz	r2, 8003e2a <_printf_common+0x26>
 8003e26:	3301      	adds	r3, #1
 8003e28:	6033      	str	r3, [r6, #0]
 8003e2a:	6823      	ldr	r3, [r4, #0]
 8003e2c:	0699      	lsls	r1, r3, #26
 8003e2e:	bf42      	ittt	mi
 8003e30:	6833      	ldrmi	r3, [r6, #0]
 8003e32:	3302      	addmi	r3, #2
 8003e34:	6033      	strmi	r3, [r6, #0]
 8003e36:	6825      	ldr	r5, [r4, #0]
 8003e38:	f015 0506 	ands.w	r5, r5, #6
 8003e3c:	d106      	bne.n	8003e4c <_printf_common+0x48>
 8003e3e:	f104 0a19 	add.w	sl, r4, #25
 8003e42:	68e3      	ldr	r3, [r4, #12]
 8003e44:	6832      	ldr	r2, [r6, #0]
 8003e46:	1a9b      	subs	r3, r3, r2
 8003e48:	42ab      	cmp	r3, r5
 8003e4a:	dc2b      	bgt.n	8003ea4 <_printf_common+0xa0>
 8003e4c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8003e50:	1e13      	subs	r3, r2, #0
 8003e52:	6822      	ldr	r2, [r4, #0]
 8003e54:	bf18      	it	ne
 8003e56:	2301      	movne	r3, #1
 8003e58:	0692      	lsls	r2, r2, #26
 8003e5a:	d430      	bmi.n	8003ebe <_printf_common+0xba>
 8003e5c:	4649      	mov	r1, r9
 8003e5e:	4638      	mov	r0, r7
 8003e60:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003e64:	47c0      	blx	r8
 8003e66:	3001      	adds	r0, #1
 8003e68:	d023      	beq.n	8003eb2 <_printf_common+0xae>
 8003e6a:	6823      	ldr	r3, [r4, #0]
 8003e6c:	6922      	ldr	r2, [r4, #16]
 8003e6e:	f003 0306 	and.w	r3, r3, #6
 8003e72:	2b04      	cmp	r3, #4
 8003e74:	bf14      	ite	ne
 8003e76:	2500      	movne	r5, #0
 8003e78:	6833      	ldreq	r3, [r6, #0]
 8003e7a:	f04f 0600 	mov.w	r6, #0
 8003e7e:	bf08      	it	eq
 8003e80:	68e5      	ldreq	r5, [r4, #12]
 8003e82:	f104 041a 	add.w	r4, r4, #26
 8003e86:	bf08      	it	eq
 8003e88:	1aed      	subeq	r5, r5, r3
 8003e8a:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8003e8e:	bf08      	it	eq
 8003e90:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003e94:	4293      	cmp	r3, r2
 8003e96:	bfc4      	itt	gt
 8003e98:	1a9b      	subgt	r3, r3, r2
 8003e9a:	18ed      	addgt	r5, r5, r3
 8003e9c:	42b5      	cmp	r5, r6
 8003e9e:	d11a      	bne.n	8003ed6 <_printf_common+0xd2>
 8003ea0:	2000      	movs	r0, #0
 8003ea2:	e008      	b.n	8003eb6 <_printf_common+0xb2>
 8003ea4:	2301      	movs	r3, #1
 8003ea6:	4652      	mov	r2, sl
 8003ea8:	4649      	mov	r1, r9
 8003eaa:	4638      	mov	r0, r7
 8003eac:	47c0      	blx	r8
 8003eae:	3001      	adds	r0, #1
 8003eb0:	d103      	bne.n	8003eba <_printf_common+0xb6>
 8003eb2:	f04f 30ff 	mov.w	r0, #4294967295
 8003eb6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003eba:	3501      	adds	r5, #1
 8003ebc:	e7c1      	b.n	8003e42 <_printf_common+0x3e>
 8003ebe:	2030      	movs	r0, #48	; 0x30
 8003ec0:	18e1      	adds	r1, r4, r3
 8003ec2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8003ec6:	1c5a      	adds	r2, r3, #1
 8003ec8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8003ecc:	4422      	add	r2, r4
 8003ece:	3302      	adds	r3, #2
 8003ed0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8003ed4:	e7c2      	b.n	8003e5c <_printf_common+0x58>
 8003ed6:	2301      	movs	r3, #1
 8003ed8:	4622      	mov	r2, r4
 8003eda:	4649      	mov	r1, r9
 8003edc:	4638      	mov	r0, r7
 8003ede:	47c0      	blx	r8
 8003ee0:	3001      	adds	r0, #1
 8003ee2:	d0e6      	beq.n	8003eb2 <_printf_common+0xae>
 8003ee4:	3601      	adds	r6, #1
 8003ee6:	e7d9      	b.n	8003e9c <_printf_common+0x98>

08003ee8 <_printf_i>:
 8003ee8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003eec:	7e0f      	ldrb	r7, [r1, #24]
 8003eee:	4691      	mov	r9, r2
 8003ef0:	2f78      	cmp	r7, #120	; 0x78
 8003ef2:	4680      	mov	r8, r0
 8003ef4:	460c      	mov	r4, r1
 8003ef6:	469a      	mov	sl, r3
 8003ef8:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8003efa:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8003efe:	d807      	bhi.n	8003f10 <_printf_i+0x28>
 8003f00:	2f62      	cmp	r7, #98	; 0x62
 8003f02:	d80a      	bhi.n	8003f1a <_printf_i+0x32>
 8003f04:	2f00      	cmp	r7, #0
 8003f06:	f000 80d5 	beq.w	80040b4 <_printf_i+0x1cc>
 8003f0a:	2f58      	cmp	r7, #88	; 0x58
 8003f0c:	f000 80c1 	beq.w	8004092 <_printf_i+0x1aa>
 8003f10:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003f14:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8003f18:	e03a      	b.n	8003f90 <_printf_i+0xa8>
 8003f1a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8003f1e:	2b15      	cmp	r3, #21
 8003f20:	d8f6      	bhi.n	8003f10 <_printf_i+0x28>
 8003f22:	a101      	add	r1, pc, #4	; (adr r1, 8003f28 <_printf_i+0x40>)
 8003f24:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8003f28:	08003f81 	.word	0x08003f81
 8003f2c:	08003f95 	.word	0x08003f95
 8003f30:	08003f11 	.word	0x08003f11
 8003f34:	08003f11 	.word	0x08003f11
 8003f38:	08003f11 	.word	0x08003f11
 8003f3c:	08003f11 	.word	0x08003f11
 8003f40:	08003f95 	.word	0x08003f95
 8003f44:	08003f11 	.word	0x08003f11
 8003f48:	08003f11 	.word	0x08003f11
 8003f4c:	08003f11 	.word	0x08003f11
 8003f50:	08003f11 	.word	0x08003f11
 8003f54:	0800409b 	.word	0x0800409b
 8003f58:	08003fc1 	.word	0x08003fc1
 8003f5c:	08004055 	.word	0x08004055
 8003f60:	08003f11 	.word	0x08003f11
 8003f64:	08003f11 	.word	0x08003f11
 8003f68:	080040bd 	.word	0x080040bd
 8003f6c:	08003f11 	.word	0x08003f11
 8003f70:	08003fc1 	.word	0x08003fc1
 8003f74:	08003f11 	.word	0x08003f11
 8003f78:	08003f11 	.word	0x08003f11
 8003f7c:	0800405d 	.word	0x0800405d
 8003f80:	682b      	ldr	r3, [r5, #0]
 8003f82:	1d1a      	adds	r2, r3, #4
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	602a      	str	r2, [r5, #0]
 8003f88:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003f8c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003f90:	2301      	movs	r3, #1
 8003f92:	e0a0      	b.n	80040d6 <_printf_i+0x1ee>
 8003f94:	6820      	ldr	r0, [r4, #0]
 8003f96:	682b      	ldr	r3, [r5, #0]
 8003f98:	0607      	lsls	r7, r0, #24
 8003f9a:	f103 0104 	add.w	r1, r3, #4
 8003f9e:	6029      	str	r1, [r5, #0]
 8003fa0:	d501      	bpl.n	8003fa6 <_printf_i+0xbe>
 8003fa2:	681e      	ldr	r6, [r3, #0]
 8003fa4:	e003      	b.n	8003fae <_printf_i+0xc6>
 8003fa6:	0646      	lsls	r6, r0, #25
 8003fa8:	d5fb      	bpl.n	8003fa2 <_printf_i+0xba>
 8003faa:	f9b3 6000 	ldrsh.w	r6, [r3]
 8003fae:	2e00      	cmp	r6, #0
 8003fb0:	da03      	bge.n	8003fba <_printf_i+0xd2>
 8003fb2:	232d      	movs	r3, #45	; 0x2d
 8003fb4:	4276      	negs	r6, r6
 8003fb6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003fba:	230a      	movs	r3, #10
 8003fbc:	4859      	ldr	r0, [pc, #356]	; (8004124 <_printf_i+0x23c>)
 8003fbe:	e012      	b.n	8003fe6 <_printf_i+0xfe>
 8003fc0:	682b      	ldr	r3, [r5, #0]
 8003fc2:	6820      	ldr	r0, [r4, #0]
 8003fc4:	1d19      	adds	r1, r3, #4
 8003fc6:	6029      	str	r1, [r5, #0]
 8003fc8:	0605      	lsls	r5, r0, #24
 8003fca:	d501      	bpl.n	8003fd0 <_printf_i+0xe8>
 8003fcc:	681e      	ldr	r6, [r3, #0]
 8003fce:	e002      	b.n	8003fd6 <_printf_i+0xee>
 8003fd0:	0641      	lsls	r1, r0, #25
 8003fd2:	d5fb      	bpl.n	8003fcc <_printf_i+0xe4>
 8003fd4:	881e      	ldrh	r6, [r3, #0]
 8003fd6:	2f6f      	cmp	r7, #111	; 0x6f
 8003fd8:	bf0c      	ite	eq
 8003fda:	2308      	moveq	r3, #8
 8003fdc:	230a      	movne	r3, #10
 8003fde:	4851      	ldr	r0, [pc, #324]	; (8004124 <_printf_i+0x23c>)
 8003fe0:	2100      	movs	r1, #0
 8003fe2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8003fe6:	6865      	ldr	r5, [r4, #4]
 8003fe8:	2d00      	cmp	r5, #0
 8003fea:	bfa8      	it	ge
 8003fec:	6821      	ldrge	r1, [r4, #0]
 8003fee:	60a5      	str	r5, [r4, #8]
 8003ff0:	bfa4      	itt	ge
 8003ff2:	f021 0104 	bicge.w	r1, r1, #4
 8003ff6:	6021      	strge	r1, [r4, #0]
 8003ff8:	b90e      	cbnz	r6, 8003ffe <_printf_i+0x116>
 8003ffa:	2d00      	cmp	r5, #0
 8003ffc:	d04b      	beq.n	8004096 <_printf_i+0x1ae>
 8003ffe:	4615      	mov	r5, r2
 8004000:	fbb6 f1f3 	udiv	r1, r6, r3
 8004004:	fb03 6711 	mls	r7, r3, r1, r6
 8004008:	5dc7      	ldrb	r7, [r0, r7]
 800400a:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800400e:	4637      	mov	r7, r6
 8004010:	42bb      	cmp	r3, r7
 8004012:	460e      	mov	r6, r1
 8004014:	d9f4      	bls.n	8004000 <_printf_i+0x118>
 8004016:	2b08      	cmp	r3, #8
 8004018:	d10b      	bne.n	8004032 <_printf_i+0x14a>
 800401a:	6823      	ldr	r3, [r4, #0]
 800401c:	07de      	lsls	r6, r3, #31
 800401e:	d508      	bpl.n	8004032 <_printf_i+0x14a>
 8004020:	6923      	ldr	r3, [r4, #16]
 8004022:	6861      	ldr	r1, [r4, #4]
 8004024:	4299      	cmp	r1, r3
 8004026:	bfde      	ittt	le
 8004028:	2330      	movle	r3, #48	; 0x30
 800402a:	f805 3c01 	strble.w	r3, [r5, #-1]
 800402e:	f105 35ff 	addle.w	r5, r5, #4294967295
 8004032:	1b52      	subs	r2, r2, r5
 8004034:	6122      	str	r2, [r4, #16]
 8004036:	464b      	mov	r3, r9
 8004038:	4621      	mov	r1, r4
 800403a:	4640      	mov	r0, r8
 800403c:	f8cd a000 	str.w	sl, [sp]
 8004040:	aa03      	add	r2, sp, #12
 8004042:	f7ff fedf 	bl	8003e04 <_printf_common>
 8004046:	3001      	adds	r0, #1
 8004048:	d14a      	bne.n	80040e0 <_printf_i+0x1f8>
 800404a:	f04f 30ff 	mov.w	r0, #4294967295
 800404e:	b004      	add	sp, #16
 8004050:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004054:	6823      	ldr	r3, [r4, #0]
 8004056:	f043 0320 	orr.w	r3, r3, #32
 800405a:	6023      	str	r3, [r4, #0]
 800405c:	2778      	movs	r7, #120	; 0x78
 800405e:	4832      	ldr	r0, [pc, #200]	; (8004128 <_printf_i+0x240>)
 8004060:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8004064:	6823      	ldr	r3, [r4, #0]
 8004066:	6829      	ldr	r1, [r5, #0]
 8004068:	061f      	lsls	r7, r3, #24
 800406a:	f851 6b04 	ldr.w	r6, [r1], #4
 800406e:	d402      	bmi.n	8004076 <_printf_i+0x18e>
 8004070:	065f      	lsls	r7, r3, #25
 8004072:	bf48      	it	mi
 8004074:	b2b6      	uxthmi	r6, r6
 8004076:	07df      	lsls	r7, r3, #31
 8004078:	bf48      	it	mi
 800407a:	f043 0320 	orrmi.w	r3, r3, #32
 800407e:	6029      	str	r1, [r5, #0]
 8004080:	bf48      	it	mi
 8004082:	6023      	strmi	r3, [r4, #0]
 8004084:	b91e      	cbnz	r6, 800408e <_printf_i+0x1a6>
 8004086:	6823      	ldr	r3, [r4, #0]
 8004088:	f023 0320 	bic.w	r3, r3, #32
 800408c:	6023      	str	r3, [r4, #0]
 800408e:	2310      	movs	r3, #16
 8004090:	e7a6      	b.n	8003fe0 <_printf_i+0xf8>
 8004092:	4824      	ldr	r0, [pc, #144]	; (8004124 <_printf_i+0x23c>)
 8004094:	e7e4      	b.n	8004060 <_printf_i+0x178>
 8004096:	4615      	mov	r5, r2
 8004098:	e7bd      	b.n	8004016 <_printf_i+0x12e>
 800409a:	682b      	ldr	r3, [r5, #0]
 800409c:	6826      	ldr	r6, [r4, #0]
 800409e:	1d18      	adds	r0, r3, #4
 80040a0:	6961      	ldr	r1, [r4, #20]
 80040a2:	6028      	str	r0, [r5, #0]
 80040a4:	0635      	lsls	r5, r6, #24
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	d501      	bpl.n	80040ae <_printf_i+0x1c6>
 80040aa:	6019      	str	r1, [r3, #0]
 80040ac:	e002      	b.n	80040b4 <_printf_i+0x1cc>
 80040ae:	0670      	lsls	r0, r6, #25
 80040b0:	d5fb      	bpl.n	80040aa <_printf_i+0x1c2>
 80040b2:	8019      	strh	r1, [r3, #0]
 80040b4:	2300      	movs	r3, #0
 80040b6:	4615      	mov	r5, r2
 80040b8:	6123      	str	r3, [r4, #16]
 80040ba:	e7bc      	b.n	8004036 <_printf_i+0x14e>
 80040bc:	682b      	ldr	r3, [r5, #0]
 80040be:	2100      	movs	r1, #0
 80040c0:	1d1a      	adds	r2, r3, #4
 80040c2:	602a      	str	r2, [r5, #0]
 80040c4:	681d      	ldr	r5, [r3, #0]
 80040c6:	6862      	ldr	r2, [r4, #4]
 80040c8:	4628      	mov	r0, r5
 80040ca:	f000 f9c3 	bl	8004454 <memchr>
 80040ce:	b108      	cbz	r0, 80040d4 <_printf_i+0x1ec>
 80040d0:	1b40      	subs	r0, r0, r5
 80040d2:	6060      	str	r0, [r4, #4]
 80040d4:	6863      	ldr	r3, [r4, #4]
 80040d6:	6123      	str	r3, [r4, #16]
 80040d8:	2300      	movs	r3, #0
 80040da:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80040de:	e7aa      	b.n	8004036 <_printf_i+0x14e>
 80040e0:	462a      	mov	r2, r5
 80040e2:	4649      	mov	r1, r9
 80040e4:	4640      	mov	r0, r8
 80040e6:	6923      	ldr	r3, [r4, #16]
 80040e8:	47d0      	blx	sl
 80040ea:	3001      	adds	r0, #1
 80040ec:	d0ad      	beq.n	800404a <_printf_i+0x162>
 80040ee:	6823      	ldr	r3, [r4, #0]
 80040f0:	079b      	lsls	r3, r3, #30
 80040f2:	d413      	bmi.n	800411c <_printf_i+0x234>
 80040f4:	68e0      	ldr	r0, [r4, #12]
 80040f6:	9b03      	ldr	r3, [sp, #12]
 80040f8:	4298      	cmp	r0, r3
 80040fa:	bfb8      	it	lt
 80040fc:	4618      	movlt	r0, r3
 80040fe:	e7a6      	b.n	800404e <_printf_i+0x166>
 8004100:	2301      	movs	r3, #1
 8004102:	4632      	mov	r2, r6
 8004104:	4649      	mov	r1, r9
 8004106:	4640      	mov	r0, r8
 8004108:	47d0      	blx	sl
 800410a:	3001      	adds	r0, #1
 800410c:	d09d      	beq.n	800404a <_printf_i+0x162>
 800410e:	3501      	adds	r5, #1
 8004110:	68e3      	ldr	r3, [r4, #12]
 8004112:	9903      	ldr	r1, [sp, #12]
 8004114:	1a5b      	subs	r3, r3, r1
 8004116:	42ab      	cmp	r3, r5
 8004118:	dcf2      	bgt.n	8004100 <_printf_i+0x218>
 800411a:	e7eb      	b.n	80040f4 <_printf_i+0x20c>
 800411c:	2500      	movs	r5, #0
 800411e:	f104 0619 	add.w	r6, r4, #25
 8004122:	e7f5      	b.n	8004110 <_printf_i+0x228>
 8004124:	08004957 	.word	0x08004957
 8004128:	08004968 	.word	0x08004968

0800412c <__sflush_r>:
 800412c:	898a      	ldrh	r2, [r1, #12]
 800412e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004130:	4605      	mov	r5, r0
 8004132:	0710      	lsls	r0, r2, #28
 8004134:	460c      	mov	r4, r1
 8004136:	d457      	bmi.n	80041e8 <__sflush_r+0xbc>
 8004138:	684b      	ldr	r3, [r1, #4]
 800413a:	2b00      	cmp	r3, #0
 800413c:	dc04      	bgt.n	8004148 <__sflush_r+0x1c>
 800413e:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8004140:	2b00      	cmp	r3, #0
 8004142:	dc01      	bgt.n	8004148 <__sflush_r+0x1c>
 8004144:	2000      	movs	r0, #0
 8004146:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004148:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800414a:	2e00      	cmp	r6, #0
 800414c:	d0fa      	beq.n	8004144 <__sflush_r+0x18>
 800414e:	2300      	movs	r3, #0
 8004150:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8004154:	682f      	ldr	r7, [r5, #0]
 8004156:	6a21      	ldr	r1, [r4, #32]
 8004158:	602b      	str	r3, [r5, #0]
 800415a:	d032      	beq.n	80041c2 <__sflush_r+0x96>
 800415c:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800415e:	89a3      	ldrh	r3, [r4, #12]
 8004160:	075a      	lsls	r2, r3, #29
 8004162:	d505      	bpl.n	8004170 <__sflush_r+0x44>
 8004164:	6863      	ldr	r3, [r4, #4]
 8004166:	1ac0      	subs	r0, r0, r3
 8004168:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800416a:	b10b      	cbz	r3, 8004170 <__sflush_r+0x44>
 800416c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800416e:	1ac0      	subs	r0, r0, r3
 8004170:	2300      	movs	r3, #0
 8004172:	4602      	mov	r2, r0
 8004174:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8004176:	4628      	mov	r0, r5
 8004178:	6a21      	ldr	r1, [r4, #32]
 800417a:	47b0      	blx	r6
 800417c:	1c43      	adds	r3, r0, #1
 800417e:	89a3      	ldrh	r3, [r4, #12]
 8004180:	d106      	bne.n	8004190 <__sflush_r+0x64>
 8004182:	6829      	ldr	r1, [r5, #0]
 8004184:	291d      	cmp	r1, #29
 8004186:	d82b      	bhi.n	80041e0 <__sflush_r+0xb4>
 8004188:	4a28      	ldr	r2, [pc, #160]	; (800422c <__sflush_r+0x100>)
 800418a:	410a      	asrs	r2, r1
 800418c:	07d6      	lsls	r6, r2, #31
 800418e:	d427      	bmi.n	80041e0 <__sflush_r+0xb4>
 8004190:	2200      	movs	r2, #0
 8004192:	6062      	str	r2, [r4, #4]
 8004194:	6922      	ldr	r2, [r4, #16]
 8004196:	04d9      	lsls	r1, r3, #19
 8004198:	6022      	str	r2, [r4, #0]
 800419a:	d504      	bpl.n	80041a6 <__sflush_r+0x7a>
 800419c:	1c42      	adds	r2, r0, #1
 800419e:	d101      	bne.n	80041a4 <__sflush_r+0x78>
 80041a0:	682b      	ldr	r3, [r5, #0]
 80041a2:	b903      	cbnz	r3, 80041a6 <__sflush_r+0x7a>
 80041a4:	6560      	str	r0, [r4, #84]	; 0x54
 80041a6:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80041a8:	602f      	str	r7, [r5, #0]
 80041aa:	2900      	cmp	r1, #0
 80041ac:	d0ca      	beq.n	8004144 <__sflush_r+0x18>
 80041ae:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80041b2:	4299      	cmp	r1, r3
 80041b4:	d002      	beq.n	80041bc <__sflush_r+0x90>
 80041b6:	4628      	mov	r0, r5
 80041b8:	f7ff fbee 	bl	8003998 <_free_r>
 80041bc:	2000      	movs	r0, #0
 80041be:	6360      	str	r0, [r4, #52]	; 0x34
 80041c0:	e7c1      	b.n	8004146 <__sflush_r+0x1a>
 80041c2:	2301      	movs	r3, #1
 80041c4:	4628      	mov	r0, r5
 80041c6:	47b0      	blx	r6
 80041c8:	1c41      	adds	r1, r0, #1
 80041ca:	d1c8      	bne.n	800415e <__sflush_r+0x32>
 80041cc:	682b      	ldr	r3, [r5, #0]
 80041ce:	2b00      	cmp	r3, #0
 80041d0:	d0c5      	beq.n	800415e <__sflush_r+0x32>
 80041d2:	2b1d      	cmp	r3, #29
 80041d4:	d001      	beq.n	80041da <__sflush_r+0xae>
 80041d6:	2b16      	cmp	r3, #22
 80041d8:	d101      	bne.n	80041de <__sflush_r+0xb2>
 80041da:	602f      	str	r7, [r5, #0]
 80041dc:	e7b2      	b.n	8004144 <__sflush_r+0x18>
 80041de:	89a3      	ldrh	r3, [r4, #12]
 80041e0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80041e4:	81a3      	strh	r3, [r4, #12]
 80041e6:	e7ae      	b.n	8004146 <__sflush_r+0x1a>
 80041e8:	690f      	ldr	r7, [r1, #16]
 80041ea:	2f00      	cmp	r7, #0
 80041ec:	d0aa      	beq.n	8004144 <__sflush_r+0x18>
 80041ee:	0793      	lsls	r3, r2, #30
 80041f0:	bf18      	it	ne
 80041f2:	2300      	movne	r3, #0
 80041f4:	680e      	ldr	r6, [r1, #0]
 80041f6:	bf08      	it	eq
 80041f8:	694b      	ldreq	r3, [r1, #20]
 80041fa:	1bf6      	subs	r6, r6, r7
 80041fc:	600f      	str	r7, [r1, #0]
 80041fe:	608b      	str	r3, [r1, #8]
 8004200:	2e00      	cmp	r6, #0
 8004202:	dd9f      	ble.n	8004144 <__sflush_r+0x18>
 8004204:	4633      	mov	r3, r6
 8004206:	463a      	mov	r2, r7
 8004208:	4628      	mov	r0, r5
 800420a:	6a21      	ldr	r1, [r4, #32]
 800420c:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 8004210:	47e0      	blx	ip
 8004212:	2800      	cmp	r0, #0
 8004214:	dc06      	bgt.n	8004224 <__sflush_r+0xf8>
 8004216:	89a3      	ldrh	r3, [r4, #12]
 8004218:	f04f 30ff 	mov.w	r0, #4294967295
 800421c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004220:	81a3      	strh	r3, [r4, #12]
 8004222:	e790      	b.n	8004146 <__sflush_r+0x1a>
 8004224:	4407      	add	r7, r0
 8004226:	1a36      	subs	r6, r6, r0
 8004228:	e7ea      	b.n	8004200 <__sflush_r+0xd4>
 800422a:	bf00      	nop
 800422c:	dfbffffe 	.word	0xdfbffffe

08004230 <_fflush_r>:
 8004230:	b538      	push	{r3, r4, r5, lr}
 8004232:	690b      	ldr	r3, [r1, #16]
 8004234:	4605      	mov	r5, r0
 8004236:	460c      	mov	r4, r1
 8004238:	b913      	cbnz	r3, 8004240 <_fflush_r+0x10>
 800423a:	2500      	movs	r5, #0
 800423c:	4628      	mov	r0, r5
 800423e:	bd38      	pop	{r3, r4, r5, pc}
 8004240:	b118      	cbz	r0, 800424a <_fflush_r+0x1a>
 8004242:	6a03      	ldr	r3, [r0, #32]
 8004244:	b90b      	cbnz	r3, 800424a <_fflush_r+0x1a>
 8004246:	f7ff fa8b 	bl	8003760 <__sinit>
 800424a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800424e:	2b00      	cmp	r3, #0
 8004250:	d0f3      	beq.n	800423a <_fflush_r+0xa>
 8004252:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8004254:	07d0      	lsls	r0, r2, #31
 8004256:	d404      	bmi.n	8004262 <_fflush_r+0x32>
 8004258:	0599      	lsls	r1, r3, #22
 800425a:	d402      	bmi.n	8004262 <_fflush_r+0x32>
 800425c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800425e:	f7ff fb84 	bl	800396a <__retarget_lock_acquire_recursive>
 8004262:	4628      	mov	r0, r5
 8004264:	4621      	mov	r1, r4
 8004266:	f7ff ff61 	bl	800412c <__sflush_r>
 800426a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800426c:	4605      	mov	r5, r0
 800426e:	07da      	lsls	r2, r3, #31
 8004270:	d4e4      	bmi.n	800423c <_fflush_r+0xc>
 8004272:	89a3      	ldrh	r3, [r4, #12]
 8004274:	059b      	lsls	r3, r3, #22
 8004276:	d4e1      	bmi.n	800423c <_fflush_r+0xc>
 8004278:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800427a:	f7ff fb77 	bl	800396c <__retarget_lock_release_recursive>
 800427e:	e7dd      	b.n	800423c <_fflush_r+0xc>

08004280 <__swbuf_r>:
 8004280:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004282:	460e      	mov	r6, r1
 8004284:	4614      	mov	r4, r2
 8004286:	4605      	mov	r5, r0
 8004288:	b118      	cbz	r0, 8004292 <__swbuf_r+0x12>
 800428a:	6a03      	ldr	r3, [r0, #32]
 800428c:	b90b      	cbnz	r3, 8004292 <__swbuf_r+0x12>
 800428e:	f7ff fa67 	bl	8003760 <__sinit>
 8004292:	69a3      	ldr	r3, [r4, #24]
 8004294:	60a3      	str	r3, [r4, #8]
 8004296:	89a3      	ldrh	r3, [r4, #12]
 8004298:	071a      	lsls	r2, r3, #28
 800429a:	d525      	bpl.n	80042e8 <__swbuf_r+0x68>
 800429c:	6923      	ldr	r3, [r4, #16]
 800429e:	b31b      	cbz	r3, 80042e8 <__swbuf_r+0x68>
 80042a0:	6823      	ldr	r3, [r4, #0]
 80042a2:	6922      	ldr	r2, [r4, #16]
 80042a4:	b2f6      	uxtb	r6, r6
 80042a6:	1a98      	subs	r0, r3, r2
 80042a8:	6963      	ldr	r3, [r4, #20]
 80042aa:	4637      	mov	r7, r6
 80042ac:	4283      	cmp	r3, r0
 80042ae:	dc04      	bgt.n	80042ba <__swbuf_r+0x3a>
 80042b0:	4621      	mov	r1, r4
 80042b2:	4628      	mov	r0, r5
 80042b4:	f7ff ffbc 	bl	8004230 <_fflush_r>
 80042b8:	b9e0      	cbnz	r0, 80042f4 <__swbuf_r+0x74>
 80042ba:	68a3      	ldr	r3, [r4, #8]
 80042bc:	3b01      	subs	r3, #1
 80042be:	60a3      	str	r3, [r4, #8]
 80042c0:	6823      	ldr	r3, [r4, #0]
 80042c2:	1c5a      	adds	r2, r3, #1
 80042c4:	6022      	str	r2, [r4, #0]
 80042c6:	701e      	strb	r6, [r3, #0]
 80042c8:	6962      	ldr	r2, [r4, #20]
 80042ca:	1c43      	adds	r3, r0, #1
 80042cc:	429a      	cmp	r2, r3
 80042ce:	d004      	beq.n	80042da <__swbuf_r+0x5a>
 80042d0:	89a3      	ldrh	r3, [r4, #12]
 80042d2:	07db      	lsls	r3, r3, #31
 80042d4:	d506      	bpl.n	80042e4 <__swbuf_r+0x64>
 80042d6:	2e0a      	cmp	r6, #10
 80042d8:	d104      	bne.n	80042e4 <__swbuf_r+0x64>
 80042da:	4621      	mov	r1, r4
 80042dc:	4628      	mov	r0, r5
 80042de:	f7ff ffa7 	bl	8004230 <_fflush_r>
 80042e2:	b938      	cbnz	r0, 80042f4 <__swbuf_r+0x74>
 80042e4:	4638      	mov	r0, r7
 80042e6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80042e8:	4621      	mov	r1, r4
 80042ea:	4628      	mov	r0, r5
 80042ec:	f000 f806 	bl	80042fc <__swsetup_r>
 80042f0:	2800      	cmp	r0, #0
 80042f2:	d0d5      	beq.n	80042a0 <__swbuf_r+0x20>
 80042f4:	f04f 37ff 	mov.w	r7, #4294967295
 80042f8:	e7f4      	b.n	80042e4 <__swbuf_r+0x64>
	...

080042fc <__swsetup_r>:
 80042fc:	b538      	push	{r3, r4, r5, lr}
 80042fe:	4b2a      	ldr	r3, [pc, #168]	; (80043a8 <__swsetup_r+0xac>)
 8004300:	4605      	mov	r5, r0
 8004302:	6818      	ldr	r0, [r3, #0]
 8004304:	460c      	mov	r4, r1
 8004306:	b118      	cbz	r0, 8004310 <__swsetup_r+0x14>
 8004308:	6a03      	ldr	r3, [r0, #32]
 800430a:	b90b      	cbnz	r3, 8004310 <__swsetup_r+0x14>
 800430c:	f7ff fa28 	bl	8003760 <__sinit>
 8004310:	89a3      	ldrh	r3, [r4, #12]
 8004312:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8004316:	0718      	lsls	r0, r3, #28
 8004318:	d422      	bmi.n	8004360 <__swsetup_r+0x64>
 800431a:	06d9      	lsls	r1, r3, #27
 800431c:	d407      	bmi.n	800432e <__swsetup_r+0x32>
 800431e:	2309      	movs	r3, #9
 8004320:	602b      	str	r3, [r5, #0]
 8004322:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8004326:	f04f 30ff 	mov.w	r0, #4294967295
 800432a:	81a3      	strh	r3, [r4, #12]
 800432c:	e034      	b.n	8004398 <__swsetup_r+0x9c>
 800432e:	0758      	lsls	r0, r3, #29
 8004330:	d512      	bpl.n	8004358 <__swsetup_r+0x5c>
 8004332:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004334:	b141      	cbz	r1, 8004348 <__swsetup_r+0x4c>
 8004336:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800433a:	4299      	cmp	r1, r3
 800433c:	d002      	beq.n	8004344 <__swsetup_r+0x48>
 800433e:	4628      	mov	r0, r5
 8004340:	f7ff fb2a 	bl	8003998 <_free_r>
 8004344:	2300      	movs	r3, #0
 8004346:	6363      	str	r3, [r4, #52]	; 0x34
 8004348:	89a3      	ldrh	r3, [r4, #12]
 800434a:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800434e:	81a3      	strh	r3, [r4, #12]
 8004350:	2300      	movs	r3, #0
 8004352:	6063      	str	r3, [r4, #4]
 8004354:	6923      	ldr	r3, [r4, #16]
 8004356:	6023      	str	r3, [r4, #0]
 8004358:	89a3      	ldrh	r3, [r4, #12]
 800435a:	f043 0308 	orr.w	r3, r3, #8
 800435e:	81a3      	strh	r3, [r4, #12]
 8004360:	6923      	ldr	r3, [r4, #16]
 8004362:	b94b      	cbnz	r3, 8004378 <__swsetup_r+0x7c>
 8004364:	89a3      	ldrh	r3, [r4, #12]
 8004366:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800436a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800436e:	d003      	beq.n	8004378 <__swsetup_r+0x7c>
 8004370:	4621      	mov	r1, r4
 8004372:	4628      	mov	r0, r5
 8004374:	f000 f8a1 	bl	80044ba <__smakebuf_r>
 8004378:	89a0      	ldrh	r0, [r4, #12]
 800437a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800437e:	f010 0301 	ands.w	r3, r0, #1
 8004382:	d00a      	beq.n	800439a <__swsetup_r+0x9e>
 8004384:	2300      	movs	r3, #0
 8004386:	60a3      	str	r3, [r4, #8]
 8004388:	6963      	ldr	r3, [r4, #20]
 800438a:	425b      	negs	r3, r3
 800438c:	61a3      	str	r3, [r4, #24]
 800438e:	6923      	ldr	r3, [r4, #16]
 8004390:	b943      	cbnz	r3, 80043a4 <__swsetup_r+0xa8>
 8004392:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8004396:	d1c4      	bne.n	8004322 <__swsetup_r+0x26>
 8004398:	bd38      	pop	{r3, r4, r5, pc}
 800439a:	0781      	lsls	r1, r0, #30
 800439c:	bf58      	it	pl
 800439e:	6963      	ldrpl	r3, [r4, #20]
 80043a0:	60a3      	str	r3, [r4, #8]
 80043a2:	e7f4      	b.n	800438e <__swsetup_r+0x92>
 80043a4:	2000      	movs	r0, #0
 80043a6:	e7f7      	b.n	8004398 <__swsetup_r+0x9c>
 80043a8:	200000e8 	.word	0x200000e8

080043ac <_raise_r>:
 80043ac:	291f      	cmp	r1, #31
 80043ae:	b538      	push	{r3, r4, r5, lr}
 80043b0:	4604      	mov	r4, r0
 80043b2:	460d      	mov	r5, r1
 80043b4:	d904      	bls.n	80043c0 <_raise_r+0x14>
 80043b6:	2316      	movs	r3, #22
 80043b8:	6003      	str	r3, [r0, #0]
 80043ba:	f04f 30ff 	mov.w	r0, #4294967295
 80043be:	bd38      	pop	{r3, r4, r5, pc}
 80043c0:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 80043c2:	b112      	cbz	r2, 80043ca <_raise_r+0x1e>
 80043c4:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80043c8:	b94b      	cbnz	r3, 80043de <_raise_r+0x32>
 80043ca:	4620      	mov	r0, r4
 80043cc:	f000 f830 	bl	8004430 <_getpid_r>
 80043d0:	462a      	mov	r2, r5
 80043d2:	4601      	mov	r1, r0
 80043d4:	4620      	mov	r0, r4
 80043d6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80043da:	f000 b817 	b.w	800440c <_kill_r>
 80043de:	2b01      	cmp	r3, #1
 80043e0:	d00a      	beq.n	80043f8 <_raise_r+0x4c>
 80043e2:	1c59      	adds	r1, r3, #1
 80043e4:	d103      	bne.n	80043ee <_raise_r+0x42>
 80043e6:	2316      	movs	r3, #22
 80043e8:	6003      	str	r3, [r0, #0]
 80043ea:	2001      	movs	r0, #1
 80043ec:	e7e7      	b.n	80043be <_raise_r+0x12>
 80043ee:	2400      	movs	r4, #0
 80043f0:	4628      	mov	r0, r5
 80043f2:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80043f6:	4798      	blx	r3
 80043f8:	2000      	movs	r0, #0
 80043fa:	e7e0      	b.n	80043be <_raise_r+0x12>

080043fc <raise>:
 80043fc:	4b02      	ldr	r3, [pc, #8]	; (8004408 <raise+0xc>)
 80043fe:	4601      	mov	r1, r0
 8004400:	6818      	ldr	r0, [r3, #0]
 8004402:	f7ff bfd3 	b.w	80043ac <_raise_r>
 8004406:	bf00      	nop
 8004408:	200000e8 	.word	0x200000e8

0800440c <_kill_r>:
 800440c:	b538      	push	{r3, r4, r5, lr}
 800440e:	2300      	movs	r3, #0
 8004410:	4d06      	ldr	r5, [pc, #24]	; (800442c <_kill_r+0x20>)
 8004412:	4604      	mov	r4, r0
 8004414:	4608      	mov	r0, r1
 8004416:	4611      	mov	r1, r2
 8004418:	602b      	str	r3, [r5, #0]
 800441a:	f7fc fa53 	bl	80008c4 <_kill>
 800441e:	1c43      	adds	r3, r0, #1
 8004420:	d102      	bne.n	8004428 <_kill_r+0x1c>
 8004422:	682b      	ldr	r3, [r5, #0]
 8004424:	b103      	cbz	r3, 8004428 <_kill_r+0x1c>
 8004426:	6023      	str	r3, [r4, #0]
 8004428:	bd38      	pop	{r3, r4, r5, pc}
 800442a:	bf00      	nop
 800442c:	20000460 	.word	0x20000460

08004430 <_getpid_r>:
 8004430:	f7fc ba41 	b.w	80008b6 <_getpid>

08004434 <_sbrk_r>:
 8004434:	b538      	push	{r3, r4, r5, lr}
 8004436:	2300      	movs	r3, #0
 8004438:	4d05      	ldr	r5, [pc, #20]	; (8004450 <_sbrk_r+0x1c>)
 800443a:	4604      	mov	r4, r0
 800443c:	4608      	mov	r0, r1
 800443e:	602b      	str	r3, [r5, #0]
 8004440:	f7fc fac4 	bl	80009cc <_sbrk>
 8004444:	1c43      	adds	r3, r0, #1
 8004446:	d102      	bne.n	800444e <_sbrk_r+0x1a>
 8004448:	682b      	ldr	r3, [r5, #0]
 800444a:	b103      	cbz	r3, 800444e <_sbrk_r+0x1a>
 800444c:	6023      	str	r3, [r4, #0]
 800444e:	bd38      	pop	{r3, r4, r5, pc}
 8004450:	20000460 	.word	0x20000460

08004454 <memchr>:
 8004454:	4603      	mov	r3, r0
 8004456:	b510      	push	{r4, lr}
 8004458:	b2c9      	uxtb	r1, r1
 800445a:	4402      	add	r2, r0
 800445c:	4293      	cmp	r3, r2
 800445e:	4618      	mov	r0, r3
 8004460:	d101      	bne.n	8004466 <memchr+0x12>
 8004462:	2000      	movs	r0, #0
 8004464:	e003      	b.n	800446e <memchr+0x1a>
 8004466:	7804      	ldrb	r4, [r0, #0]
 8004468:	3301      	adds	r3, #1
 800446a:	428c      	cmp	r4, r1
 800446c:	d1f6      	bne.n	800445c <memchr+0x8>
 800446e:	bd10      	pop	{r4, pc}

08004470 <__swhatbuf_r>:
 8004470:	b570      	push	{r4, r5, r6, lr}
 8004472:	460c      	mov	r4, r1
 8004474:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004478:	4615      	mov	r5, r2
 800447a:	2900      	cmp	r1, #0
 800447c:	461e      	mov	r6, r3
 800447e:	b096      	sub	sp, #88	; 0x58
 8004480:	da0c      	bge.n	800449c <__swhatbuf_r+0x2c>
 8004482:	89a3      	ldrh	r3, [r4, #12]
 8004484:	2100      	movs	r1, #0
 8004486:	f013 0f80 	tst.w	r3, #128	; 0x80
 800448a:	bf0c      	ite	eq
 800448c:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8004490:	2340      	movne	r3, #64	; 0x40
 8004492:	2000      	movs	r0, #0
 8004494:	6031      	str	r1, [r6, #0]
 8004496:	602b      	str	r3, [r5, #0]
 8004498:	b016      	add	sp, #88	; 0x58
 800449a:	bd70      	pop	{r4, r5, r6, pc}
 800449c:	466a      	mov	r2, sp
 800449e:	f000 f849 	bl	8004534 <_fstat_r>
 80044a2:	2800      	cmp	r0, #0
 80044a4:	dbed      	blt.n	8004482 <__swhatbuf_r+0x12>
 80044a6:	9901      	ldr	r1, [sp, #4]
 80044a8:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 80044ac:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 80044b0:	4259      	negs	r1, r3
 80044b2:	4159      	adcs	r1, r3
 80044b4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80044b8:	e7eb      	b.n	8004492 <__swhatbuf_r+0x22>

080044ba <__smakebuf_r>:
 80044ba:	898b      	ldrh	r3, [r1, #12]
 80044bc:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80044be:	079d      	lsls	r5, r3, #30
 80044c0:	4606      	mov	r6, r0
 80044c2:	460c      	mov	r4, r1
 80044c4:	d507      	bpl.n	80044d6 <__smakebuf_r+0x1c>
 80044c6:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80044ca:	6023      	str	r3, [r4, #0]
 80044cc:	6123      	str	r3, [r4, #16]
 80044ce:	2301      	movs	r3, #1
 80044d0:	6163      	str	r3, [r4, #20]
 80044d2:	b002      	add	sp, #8
 80044d4:	bd70      	pop	{r4, r5, r6, pc}
 80044d6:	466a      	mov	r2, sp
 80044d8:	ab01      	add	r3, sp, #4
 80044da:	f7ff ffc9 	bl	8004470 <__swhatbuf_r>
 80044de:	9900      	ldr	r1, [sp, #0]
 80044e0:	4605      	mov	r5, r0
 80044e2:	4630      	mov	r0, r6
 80044e4:	f7ff fac0 	bl	8003a68 <_malloc_r>
 80044e8:	b948      	cbnz	r0, 80044fe <__smakebuf_r+0x44>
 80044ea:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80044ee:	059a      	lsls	r2, r3, #22
 80044f0:	d4ef      	bmi.n	80044d2 <__smakebuf_r+0x18>
 80044f2:	f023 0303 	bic.w	r3, r3, #3
 80044f6:	f043 0302 	orr.w	r3, r3, #2
 80044fa:	81a3      	strh	r3, [r4, #12]
 80044fc:	e7e3      	b.n	80044c6 <__smakebuf_r+0xc>
 80044fe:	89a3      	ldrh	r3, [r4, #12]
 8004500:	6020      	str	r0, [r4, #0]
 8004502:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004506:	81a3      	strh	r3, [r4, #12]
 8004508:	9b00      	ldr	r3, [sp, #0]
 800450a:	6120      	str	r0, [r4, #16]
 800450c:	6163      	str	r3, [r4, #20]
 800450e:	9b01      	ldr	r3, [sp, #4]
 8004510:	b15b      	cbz	r3, 800452a <__smakebuf_r+0x70>
 8004512:	4630      	mov	r0, r6
 8004514:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004518:	f000 f81e 	bl	8004558 <_isatty_r>
 800451c:	b128      	cbz	r0, 800452a <__smakebuf_r+0x70>
 800451e:	89a3      	ldrh	r3, [r4, #12]
 8004520:	f023 0303 	bic.w	r3, r3, #3
 8004524:	f043 0301 	orr.w	r3, r3, #1
 8004528:	81a3      	strh	r3, [r4, #12]
 800452a:	89a3      	ldrh	r3, [r4, #12]
 800452c:	431d      	orrs	r5, r3
 800452e:	81a5      	strh	r5, [r4, #12]
 8004530:	e7cf      	b.n	80044d2 <__smakebuf_r+0x18>
	...

08004534 <_fstat_r>:
 8004534:	b538      	push	{r3, r4, r5, lr}
 8004536:	2300      	movs	r3, #0
 8004538:	4d06      	ldr	r5, [pc, #24]	; (8004554 <_fstat_r+0x20>)
 800453a:	4604      	mov	r4, r0
 800453c:	4608      	mov	r0, r1
 800453e:	4611      	mov	r1, r2
 8004540:	602b      	str	r3, [r5, #0]
 8004542:	f7fc fa1d 	bl	8000980 <_fstat>
 8004546:	1c43      	adds	r3, r0, #1
 8004548:	d102      	bne.n	8004550 <_fstat_r+0x1c>
 800454a:	682b      	ldr	r3, [r5, #0]
 800454c:	b103      	cbz	r3, 8004550 <_fstat_r+0x1c>
 800454e:	6023      	str	r3, [r4, #0]
 8004550:	bd38      	pop	{r3, r4, r5, pc}
 8004552:	bf00      	nop
 8004554:	20000460 	.word	0x20000460

08004558 <_isatty_r>:
 8004558:	b538      	push	{r3, r4, r5, lr}
 800455a:	2300      	movs	r3, #0
 800455c:	4d05      	ldr	r5, [pc, #20]	; (8004574 <_isatty_r+0x1c>)
 800455e:	4604      	mov	r4, r0
 8004560:	4608      	mov	r0, r1
 8004562:	602b      	str	r3, [r5, #0]
 8004564:	f7fc fa1b 	bl	800099e <_isatty>
 8004568:	1c43      	adds	r3, r0, #1
 800456a:	d102      	bne.n	8004572 <_isatty_r+0x1a>
 800456c:	682b      	ldr	r3, [r5, #0]
 800456e:	b103      	cbz	r3, 8004572 <_isatty_r+0x1a>
 8004570:	6023      	str	r3, [r4, #0]
 8004572:	bd38      	pop	{r3, r4, r5, pc}
 8004574:	20000460 	.word	0x20000460

08004578 <_init>:
 8004578:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800457a:	bf00      	nop
 800457c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800457e:	bc08      	pop	{r3}
 8004580:	469e      	mov	lr, r3
 8004582:	4770      	bx	lr

08004584 <_fini>:
 8004584:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004586:	bf00      	nop
 8004588:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800458a:	bc08      	pop	{r3}
 800458c:	469e      	mov	lr, r3
 800458e:	4770      	bx	lr
