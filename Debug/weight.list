
weight.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004208  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003ec  08004314  08004314  00014314  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004700  08004700  000200ec  2**0
                  CONTENTS
  4 .ARM          00000000  08004700  08004700  000200ec  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004700  08004700  000200ec  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004700  08004700  00014700  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004704  08004704  00014704  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000ec  20000000  08004708  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000384  200000ec  080047f4  000200ec  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000470  080047f4  00020470  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000200ec  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020115  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000ecf2  00000000  00000000  00020158  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002b80  00000000  00000000  0002ee4a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000f50  00000000  00000000  000319d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000bb2  00000000  00000000  00032920  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00005a43  00000000  00000000  000334d2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000163c4  00000000  00000000  00038f15  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0008eb48  00000000  00000000  0004f2d9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00004550  00000000  00000000  000dde24  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000062  00000000  00000000  000e2374  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	200000ec 	.word	0x200000ec
 8000128:	00000000 	.word	0x00000000
 800012c:	080042fc 	.word	0x080042fc

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	200000f0 	.word	0x200000f0
 8000148:	080042fc 	.word	0x080042fc

0800014c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	b082      	sub	sp, #8
 8000150:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000152:	f000 fb9b 	bl	800088c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000156:	f000 f823 	bl	80001a0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800015a:	f000 f8d3 	bl	8000304 <MX_GPIO_Init>
  MX_TIM3_Init();
 800015e:	f000 f85b 	bl	8000218 <MX_TIM3_Init>
  MX_USART1_UART_Init();
 8000162:	f000 f8a5 	bl	80002b0 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  eMBInit( MB_RTU, 0x20, 0, 115200, MB_PAR_NONE );
 8000166:	2300      	movs	r3, #0
 8000168:	9300      	str	r3, [sp, #0]
 800016a:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 800016e:	2200      	movs	r2, #0
 8000170:	2120      	movs	r1, #32
 8000172:	2000      	movs	r0, #0
 8000174:	f002 f82c 	bl	80021d0 <eMBInit>
  Modbus_HTIM_Init(&htim3);
 8000178:	4806      	ldr	r0, [pc, #24]	; (8000194 <main+0x48>)
 800017a:	f003 f8cf 	bl	800331c <Modbus_HTIM_Init>
  Modbus_UART_Init(&huart1, TX_ENABLE_GPIO_Port, TX_ENABLE_Pin);
 800017e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000182:	4905      	ldr	r1, [pc, #20]	; (8000198 <main+0x4c>)
 8000184:	4805      	ldr	r0, [pc, #20]	; (800019c <main+0x50>)
 8000186:	f003 f877 	bl	8003278 <Modbus_UART_Init>
  eMBEnable(  );
 800018a:	f002 f89d 	bl	80022c8 <eMBEnable>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  (void)eMBPoll();
 800018e:	f002 f8b7 	bl	8002300 <eMBPoll>
 8000192:	e7fc      	b.n	800018e <main+0x42>
 8000194:	20000108 	.word	0x20000108
 8000198:	40010800 	.word	0x40010800
 800019c:	20000150 	.word	0x20000150

080001a0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80001a0:	b580      	push	{r7, lr}
 80001a2:	b090      	sub	sp, #64	; 0x40
 80001a4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80001a6:	f107 0318 	add.w	r3, r7, #24
 80001aa:	2228      	movs	r2, #40	; 0x28
 80001ac:	2100      	movs	r1, #0
 80001ae:	4618      	mov	r0, r3
 80001b0:	f003 fa23 	bl	80035fa <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80001b4:	1d3b      	adds	r3, r7, #4
 80001b6:	2200      	movs	r2, #0
 80001b8:	601a      	str	r2, [r3, #0]
 80001ba:	605a      	str	r2, [r3, #4]
 80001bc:	609a      	str	r2, [r3, #8]
 80001be:	60da      	str	r2, [r3, #12]
 80001c0:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80001c2:	2302      	movs	r3, #2
 80001c4:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80001c6:	2301      	movs	r3, #1
 80001c8:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80001ca:	2310      	movs	r3, #16
 80001cc:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80001ce:	2300      	movs	r3, #0
 80001d0:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80001d2:	f107 0318 	add.w	r3, r7, #24
 80001d6:	4618      	mov	r0, r3
 80001d8:	f000 fe80 	bl	8000edc <HAL_RCC_OscConfig>
 80001dc:	4603      	mov	r3, r0
 80001de:	2b00      	cmp	r3, #0
 80001e0:	d001      	beq.n	80001e6 <SystemClock_Config+0x46>
  {
    Error_Handler();
 80001e2:	f000 f99e 	bl	8000522 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80001e6:	230f      	movs	r3, #15
 80001e8:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80001ea:	2300      	movs	r3, #0
 80001ec:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80001ee:	2300      	movs	r3, #0
 80001f0:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80001f2:	2300      	movs	r3, #0
 80001f4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80001f6:	2300      	movs	r3, #0
 80001f8:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80001fa:	1d3b      	adds	r3, r7, #4
 80001fc:	2100      	movs	r1, #0
 80001fe:	4618      	mov	r0, r3
 8000200:	f001 f8ee 	bl	80013e0 <HAL_RCC_ClockConfig>
 8000204:	4603      	mov	r3, r0
 8000206:	2b00      	cmp	r3, #0
 8000208:	d001      	beq.n	800020e <SystemClock_Config+0x6e>
  {
    Error_Handler();
 800020a:	f000 f98a 	bl	8000522 <Error_Handler>
  }
}
 800020e:	bf00      	nop
 8000210:	3740      	adds	r7, #64	; 0x40
 8000212:	46bd      	mov	sp, r7
 8000214:	bd80      	pop	{r7, pc}
	...

08000218 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000218:	b580      	push	{r7, lr}
 800021a:	b086      	sub	sp, #24
 800021c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800021e:	f107 0308 	add.w	r3, r7, #8
 8000222:	2200      	movs	r2, #0
 8000224:	601a      	str	r2, [r3, #0]
 8000226:	605a      	str	r2, [r3, #4]
 8000228:	609a      	str	r2, [r3, #8]
 800022a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800022c:	463b      	mov	r3, r7
 800022e:	2200      	movs	r2, #0
 8000230:	601a      	str	r2, [r3, #0]
 8000232:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000234:	4b1c      	ldr	r3, [pc, #112]	; (80002a8 <MX_TIM3_Init+0x90>)
 8000236:	4a1d      	ldr	r2, [pc, #116]	; (80002ac <MX_TIM3_Init+0x94>)
 8000238:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 72-1;
 800023a:	4b1b      	ldr	r3, [pc, #108]	; (80002a8 <MX_TIM3_Init+0x90>)
 800023c:	2247      	movs	r2, #71	; 0x47
 800023e:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000240:	4b19      	ldr	r3, [pc, #100]	; (80002a8 <MX_TIM3_Init+0x90>)
 8000242:	2200      	movs	r2, #0
 8000244:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 49;
 8000246:	4b18      	ldr	r3, [pc, #96]	; (80002a8 <MX_TIM3_Init+0x90>)
 8000248:	2231      	movs	r2, #49	; 0x31
 800024a:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800024c:	4b16      	ldr	r3, [pc, #88]	; (80002a8 <MX_TIM3_Init+0x90>)
 800024e:	2200      	movs	r2, #0
 8000250:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000252:	4b15      	ldr	r3, [pc, #84]	; (80002a8 <MX_TIM3_Init+0x90>)
 8000254:	2200      	movs	r2, #0
 8000256:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000258:	4813      	ldr	r0, [pc, #76]	; (80002a8 <MX_TIM3_Init+0x90>)
 800025a:	f001 fa4f 	bl	80016fc <HAL_TIM_Base_Init>
 800025e:	4603      	mov	r3, r0
 8000260:	2b00      	cmp	r3, #0
 8000262:	d001      	beq.n	8000268 <MX_TIM3_Init+0x50>
  {
    Error_Handler();
 8000264:	f000 f95d 	bl	8000522 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000268:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800026c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800026e:	f107 0308 	add.w	r3, r7, #8
 8000272:	4619      	mov	r1, r3
 8000274:	480c      	ldr	r0, [pc, #48]	; (80002a8 <MX_TIM3_Init+0x90>)
 8000276:	f001 fb11 	bl	800189c <HAL_TIM_ConfigClockSource>
 800027a:	4603      	mov	r3, r0
 800027c:	2b00      	cmp	r3, #0
 800027e:	d001      	beq.n	8000284 <MX_TIM3_Init+0x6c>
  {
    Error_Handler();
 8000280:	f000 f94f 	bl	8000522 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000284:	2300      	movs	r3, #0
 8000286:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000288:	2300      	movs	r3, #0
 800028a:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800028c:	463b      	mov	r3, r7
 800028e:	4619      	mov	r1, r3
 8000290:	4805      	ldr	r0, [pc, #20]	; (80002a8 <MX_TIM3_Init+0x90>)
 8000292:	f001 fcc3 	bl	8001c1c <HAL_TIMEx_MasterConfigSynchronization>
 8000296:	4603      	mov	r3, r0
 8000298:	2b00      	cmp	r3, #0
 800029a:	d001      	beq.n	80002a0 <MX_TIM3_Init+0x88>
  {
    Error_Handler();
 800029c:	f000 f941 	bl	8000522 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80002a0:	bf00      	nop
 80002a2:	3718      	adds	r7, #24
 80002a4:	46bd      	mov	sp, r7
 80002a6:	bd80      	pop	{r7, pc}
 80002a8:	20000108 	.word	0x20000108
 80002ac:	40000400 	.word	0x40000400

080002b0 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80002b0:	b580      	push	{r7, lr}
 80002b2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80002b4:	4b11      	ldr	r3, [pc, #68]	; (80002fc <MX_USART1_UART_Init+0x4c>)
 80002b6:	4a12      	ldr	r2, [pc, #72]	; (8000300 <MX_USART1_UART_Init+0x50>)
 80002b8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80002ba:	4b10      	ldr	r3, [pc, #64]	; (80002fc <MX_USART1_UART_Init+0x4c>)
 80002bc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80002c0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80002c2:	4b0e      	ldr	r3, [pc, #56]	; (80002fc <MX_USART1_UART_Init+0x4c>)
 80002c4:	2200      	movs	r2, #0
 80002c6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80002c8:	4b0c      	ldr	r3, [pc, #48]	; (80002fc <MX_USART1_UART_Init+0x4c>)
 80002ca:	2200      	movs	r2, #0
 80002cc:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80002ce:	4b0b      	ldr	r3, [pc, #44]	; (80002fc <MX_USART1_UART_Init+0x4c>)
 80002d0:	2200      	movs	r2, #0
 80002d2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80002d4:	4b09      	ldr	r3, [pc, #36]	; (80002fc <MX_USART1_UART_Init+0x4c>)
 80002d6:	220c      	movs	r2, #12
 80002d8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80002da:	4b08      	ldr	r3, [pc, #32]	; (80002fc <MX_USART1_UART_Init+0x4c>)
 80002dc:	2200      	movs	r2, #0
 80002de:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80002e0:	4b06      	ldr	r3, [pc, #24]	; (80002fc <MX_USART1_UART_Init+0x4c>)
 80002e2:	2200      	movs	r2, #0
 80002e4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80002e6:	4805      	ldr	r0, [pc, #20]	; (80002fc <MX_USART1_UART_Init+0x4c>)
 80002e8:	f001 fcf6 	bl	8001cd8 <HAL_UART_Init>
 80002ec:	4603      	mov	r3, r0
 80002ee:	2b00      	cmp	r3, #0
 80002f0:	d001      	beq.n	80002f6 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80002f2:	f000 f916 	bl	8000522 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80002f6:	bf00      	nop
 80002f8:	bd80      	pop	{r7, pc}
 80002fa:	bf00      	nop
 80002fc:	20000150 	.word	0x20000150
 8000300:	40013800 	.word	0x40013800

08000304 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000304:	b580      	push	{r7, lr}
 8000306:	b086      	sub	sp, #24
 8000308:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800030a:	f107 0308 	add.w	r3, r7, #8
 800030e:	2200      	movs	r2, #0
 8000310:	601a      	str	r2, [r3, #0]
 8000312:	605a      	str	r2, [r3, #4]
 8000314:	609a      	str	r2, [r3, #8]
 8000316:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000318:	4b12      	ldr	r3, [pc, #72]	; (8000364 <MX_GPIO_Init+0x60>)
 800031a:	699b      	ldr	r3, [r3, #24]
 800031c:	4a11      	ldr	r2, [pc, #68]	; (8000364 <MX_GPIO_Init+0x60>)
 800031e:	f043 0304 	orr.w	r3, r3, #4
 8000322:	6193      	str	r3, [r2, #24]
 8000324:	4b0f      	ldr	r3, [pc, #60]	; (8000364 <MX_GPIO_Init+0x60>)
 8000326:	699b      	ldr	r3, [r3, #24]
 8000328:	f003 0304 	and.w	r3, r3, #4
 800032c:	607b      	str	r3, [r7, #4]
 800032e:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(TX_ENABLE_GPIO_Port, TX_ENABLE_Pin, GPIO_PIN_RESET);
 8000330:	2200      	movs	r2, #0
 8000332:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000336:	480c      	ldr	r0, [pc, #48]	; (8000368 <MX_GPIO_Init+0x64>)
 8000338:	f000 fdb8 	bl	8000eac <HAL_GPIO_WritePin>

  /*Configure GPIO pin : TX_ENABLE_Pin */
  GPIO_InitStruct.Pin = TX_ENABLE_Pin;
 800033c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000340:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000342:	2301      	movs	r3, #1
 8000344:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000346:	2300      	movs	r3, #0
 8000348:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800034a:	2302      	movs	r3, #2
 800034c:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(TX_ENABLE_GPIO_Port, &GPIO_InitStruct);
 800034e:	f107 0308 	add.w	r3, r7, #8
 8000352:	4619      	mov	r1, r3
 8000354:	4804      	ldr	r0, [pc, #16]	; (8000368 <MX_GPIO_Init+0x64>)
 8000356:	f000 fc25 	bl	8000ba4 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800035a:	bf00      	nop
 800035c:	3718      	adds	r7, #24
 800035e:	46bd      	mov	sp, r7
 8000360:	bd80      	pop	{r7, pc}
 8000362:	bf00      	nop
 8000364:	40021000 	.word	0x40021000
 8000368:	40010800 	.word	0x40010800

0800036c <eMBRegInputCB>:

/* USER CODE BEGIN 4 */
eMBErrorCode
eMBRegInputCB( UCHAR * pucRegBuffer, USHORT usAddress, USHORT usNRegs )
{
 800036c:	b480      	push	{r7}
 800036e:	b085      	sub	sp, #20
 8000370:	af00      	add	r7, sp, #0
 8000372:	6078      	str	r0, [r7, #4]
 8000374:	460b      	mov	r3, r1
 8000376:	807b      	strh	r3, [r7, #2]
 8000378:	4613      	mov	r3, r2
 800037a:	803b      	strh	r3, [r7, #0]
    eMBErrorCode    eStatus = MB_ENOERR;
 800037c:	2300      	movs	r3, #0
 800037e:	73fb      	strb	r3, [r7, #15]
    int             iRegIndex;

    if( ( usAddress >= REG_INPUT_START )
 8000380:	887b      	ldrh	r3, [r7, #2]
 8000382:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000386:	d32a      	bcc.n	80003de <eMBRegInputCB+0x72>
        && ( usAddress + usNRegs <= REG_INPUT_START + REG_INPUT_NREGS ) )
 8000388:	887a      	ldrh	r2, [r7, #2]
 800038a:	883b      	ldrh	r3, [r7, #0]
 800038c:	4413      	add	r3, r2
 800038e:	f240 32ea 	movw	r2, #1002	; 0x3ea
 8000392:	4293      	cmp	r3, r2
 8000394:	dc23      	bgt.n	80003de <eMBRegInputCB+0x72>
    {
        iRegIndex = ( int )( usAddress - usRegInputStart );
 8000396:	887b      	ldrh	r3, [r7, #2]
 8000398:	4a15      	ldr	r2, [pc, #84]	; (80003f0 <eMBRegInputCB+0x84>)
 800039a:	8812      	ldrh	r2, [r2, #0]
 800039c:	1a9b      	subs	r3, r3, r2
 800039e:	60bb      	str	r3, [r7, #8]
        while( usNRegs > 0 )
 80003a0:	e019      	b.n	80003d6 <eMBRegInputCB+0x6a>
        {
            *pucRegBuffer++ = ( unsigned char )( usRegInputBuf[iRegIndex] >> 8 );
 80003a2:	4a14      	ldr	r2, [pc, #80]	; (80003f4 <eMBRegInputCB+0x88>)
 80003a4:	68bb      	ldr	r3, [r7, #8]
 80003a6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80003aa:	0a1b      	lsrs	r3, r3, #8
 80003ac:	b299      	uxth	r1, r3
 80003ae:	687b      	ldr	r3, [r7, #4]
 80003b0:	1c5a      	adds	r2, r3, #1
 80003b2:	607a      	str	r2, [r7, #4]
 80003b4:	b2ca      	uxtb	r2, r1
 80003b6:	701a      	strb	r2, [r3, #0]
            *pucRegBuffer++ = ( unsigned char )( usRegInputBuf[iRegIndex] & 0xFF );
 80003b8:	4a0e      	ldr	r2, [pc, #56]	; (80003f4 <eMBRegInputCB+0x88>)
 80003ba:	68bb      	ldr	r3, [r7, #8]
 80003bc:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 80003c0:	687b      	ldr	r3, [r7, #4]
 80003c2:	1c5a      	adds	r2, r3, #1
 80003c4:	607a      	str	r2, [r7, #4]
 80003c6:	b2ca      	uxtb	r2, r1
 80003c8:	701a      	strb	r2, [r3, #0]
            iRegIndex++;
 80003ca:	68bb      	ldr	r3, [r7, #8]
 80003cc:	3301      	adds	r3, #1
 80003ce:	60bb      	str	r3, [r7, #8]
            usNRegs--;
 80003d0:	883b      	ldrh	r3, [r7, #0]
 80003d2:	3b01      	subs	r3, #1
 80003d4:	803b      	strh	r3, [r7, #0]
        while( usNRegs > 0 )
 80003d6:	883b      	ldrh	r3, [r7, #0]
 80003d8:	2b00      	cmp	r3, #0
 80003da:	d1e2      	bne.n	80003a2 <eMBRegInputCB+0x36>
    if( ( usAddress >= REG_INPUT_START )
 80003dc:	e001      	b.n	80003e2 <eMBRegInputCB+0x76>
        }
    }
    else
    {
        eStatus = MB_ENOREG;
 80003de:	2301      	movs	r3, #1
 80003e0:	73fb      	strb	r3, [r7, #15]
    }

    return eStatus;
 80003e2:	7bfb      	ldrb	r3, [r7, #15]
}
 80003e4:	4618      	mov	r0, r3
 80003e6:	3714      	adds	r7, #20
 80003e8:	46bd      	mov	sp, r7
 80003ea:	bc80      	pop	{r7}
 80003ec:	4770      	bx	lr
 80003ee:	bf00      	nop
 80003f0:	20000000 	.word	0x20000000
 80003f4:	20000198 	.word	0x20000198

080003f8 <eMBRegHoldingCB>:

eMBErrorCode
eMBRegHoldingCB( UCHAR * pucRegBuffer, USHORT usAddress, USHORT usNRegs, eMBRegisterMode eMode )
{
 80003f8:	b480      	push	{r7}
 80003fa:	b087      	sub	sp, #28
 80003fc:	af00      	add	r7, sp, #0
 80003fe:	60f8      	str	r0, [r7, #12]
 8000400:	4608      	mov	r0, r1
 8000402:	4611      	mov	r1, r2
 8000404:	461a      	mov	r2, r3
 8000406:	4603      	mov	r3, r0
 8000408:	817b      	strh	r3, [r7, #10]
 800040a:	460b      	mov	r3, r1
 800040c:	813b      	strh	r3, [r7, #8]
 800040e:	4613      	mov	r3, r2
 8000410:	71fb      	strb	r3, [r7, #7]
    eMBErrorCode    eStatus = MB_ENOERR;
 8000412:	2300      	movs	r3, #0
 8000414:	75fb      	strb	r3, [r7, #23]
    int             iRegIndex;

    if( ( usAddress >= REG_HOLDING_START ) &&
 8000416:	897b      	ldrh	r3, [r7, #10]
 8000418:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 800041c:	d354      	bcc.n	80004c8 <eMBRegHoldingCB+0xd0>
        ( usAddress + usNRegs <= REG_HOLDING_START + REG_HOLDING_NREGS ) )
 800041e:	897a      	ldrh	r2, [r7, #10]
 8000420:	893b      	ldrh	r3, [r7, #8]
 8000422:	4413      	add	r3, r2
    if( ( usAddress >= REG_HOLDING_START ) &&
 8000424:	f240 72d2 	movw	r2, #2002	; 0x7d2
 8000428:	4293      	cmp	r3, r2
 800042a:	dc4d      	bgt.n	80004c8 <eMBRegHoldingCB+0xd0>
    {
        iRegIndex = ( int )( usAddress - usRegHoldingStart );
 800042c:	897b      	ldrh	r3, [r7, #10]
 800042e:	4a2a      	ldr	r2, [pc, #168]	; (80004d8 <eMBRegHoldingCB+0xe0>)
 8000430:	8812      	ldrh	r2, [r2, #0]
 8000432:	1a9b      	subs	r3, r3, r2
 8000434:	613b      	str	r3, [r7, #16]
        switch ( eMode )
 8000436:	79fb      	ldrb	r3, [r7, #7]
 8000438:	2b00      	cmp	r3, #0
 800043a:	d01c      	beq.n	8000476 <eMBRegHoldingCB+0x7e>
 800043c:	2b01      	cmp	r3, #1
 800043e:	d03e      	beq.n	80004be <eMBRegHoldingCB+0xc6>
 8000440:	e044      	b.n	80004cc <eMBRegHoldingCB+0xd4>
        {
            /* Pass current register values to the protocol stack. */
        case MB_REG_READ:
            while( usNRegs > 0 )
            {
                *pucRegBuffer++ = ( UCHAR ) ( usRegHoldingBuf[iRegIndex] >> 8 );
 8000442:	4a26      	ldr	r2, [pc, #152]	; (80004dc <eMBRegHoldingCB+0xe4>)
 8000444:	693b      	ldr	r3, [r7, #16]
 8000446:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800044a:	0a1b      	lsrs	r3, r3, #8
 800044c:	b299      	uxth	r1, r3
 800044e:	68fb      	ldr	r3, [r7, #12]
 8000450:	1c5a      	adds	r2, r3, #1
 8000452:	60fa      	str	r2, [r7, #12]
 8000454:	b2ca      	uxtb	r2, r1
 8000456:	701a      	strb	r2, [r3, #0]
                *pucRegBuffer++ = ( UCHAR ) ( usRegHoldingBuf[iRegIndex] & 0xFF );
 8000458:	4a20      	ldr	r2, [pc, #128]	; (80004dc <eMBRegHoldingCB+0xe4>)
 800045a:	693b      	ldr	r3, [r7, #16]
 800045c:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 8000460:	68fb      	ldr	r3, [r7, #12]
 8000462:	1c5a      	adds	r2, r3, #1
 8000464:	60fa      	str	r2, [r7, #12]
 8000466:	b2ca      	uxtb	r2, r1
 8000468:	701a      	strb	r2, [r3, #0]
                iRegIndex++;
 800046a:	693b      	ldr	r3, [r7, #16]
 800046c:	3301      	adds	r3, #1
 800046e:	613b      	str	r3, [r7, #16]
                usNRegs--;
 8000470:	893b      	ldrh	r3, [r7, #8]
 8000472:	3b01      	subs	r3, #1
 8000474:	813b      	strh	r3, [r7, #8]
            while( usNRegs > 0 )
 8000476:	893b      	ldrh	r3, [r7, #8]
 8000478:	2b00      	cmp	r3, #0
 800047a:	d1e2      	bne.n	8000442 <eMBRegHoldingCB+0x4a>
            }
            break;
 800047c:	e023      	b.n	80004c6 <eMBRegHoldingCB+0xce>
            /* Update current register values with new values from the
             * protocol stack. */
        case MB_REG_WRITE:
            while( usNRegs > 0 )
            {
                usRegHoldingBuf[iRegIndex] = *pucRegBuffer++ << 8;
 800047e:	68fb      	ldr	r3, [r7, #12]
 8000480:	1c5a      	adds	r2, r3, #1
 8000482:	60fa      	str	r2, [r7, #12]
 8000484:	781b      	ldrb	r3, [r3, #0]
 8000486:	b29b      	uxth	r3, r3
 8000488:	021b      	lsls	r3, r3, #8
 800048a:	b299      	uxth	r1, r3
 800048c:	4a13      	ldr	r2, [pc, #76]	; (80004dc <eMBRegHoldingCB+0xe4>)
 800048e:	693b      	ldr	r3, [r7, #16]
 8000490:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
                usRegHoldingBuf[iRegIndex] |= *pucRegBuffer++;
 8000494:	68fb      	ldr	r3, [r7, #12]
 8000496:	1c5a      	adds	r2, r3, #1
 8000498:	60fa      	str	r2, [r7, #12]
 800049a:	7819      	ldrb	r1, [r3, #0]
 800049c:	4a0f      	ldr	r2, [pc, #60]	; (80004dc <eMBRegHoldingCB+0xe4>)
 800049e:	693b      	ldr	r3, [r7, #16]
 80004a0:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 80004a4:	b28b      	uxth	r3, r1
 80004a6:	4313      	orrs	r3, r2
 80004a8:	b299      	uxth	r1, r3
 80004aa:	4a0c      	ldr	r2, [pc, #48]	; (80004dc <eMBRegHoldingCB+0xe4>)
 80004ac:	693b      	ldr	r3, [r7, #16]
 80004ae:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
                iRegIndex++;
 80004b2:	693b      	ldr	r3, [r7, #16]
 80004b4:	3301      	adds	r3, #1
 80004b6:	613b      	str	r3, [r7, #16]
                usNRegs--;
 80004b8:	893b      	ldrh	r3, [r7, #8]
 80004ba:	3b01      	subs	r3, #1
 80004bc:	813b      	strh	r3, [r7, #8]
            while( usNRegs > 0 )
 80004be:	893b      	ldrh	r3, [r7, #8]
 80004c0:	2b00      	cmp	r3, #0
 80004c2:	d1dc      	bne.n	800047e <eMBRegHoldingCB+0x86>
        switch ( eMode )
 80004c4:	e002      	b.n	80004cc <eMBRegHoldingCB+0xd4>
 80004c6:	e001      	b.n	80004cc <eMBRegHoldingCB+0xd4>
            }
        }
    }
    else
    {
        eStatus = MB_ENOREG;
 80004c8:	2301      	movs	r3, #1
 80004ca:	75fb      	strb	r3, [r7, #23]
    }
    return eStatus;
 80004cc:	7dfb      	ldrb	r3, [r7, #23]
}
 80004ce:	4618      	mov	r0, r3
 80004d0:	371c      	adds	r7, #28
 80004d2:	46bd      	mov	sp, r7
 80004d4:	bc80      	pop	{r7}
 80004d6:	4770      	bx	lr
 80004d8:	20000002 	.word	0x20000002
 80004dc:	2000019c 	.word	0x2000019c

080004e0 <eMBRegCoilsCB>:


eMBErrorCode
eMBRegCoilsCB( UCHAR * pucRegBuffer, USHORT usAddress, USHORT usNCoils, eMBRegisterMode eMode )
{
 80004e0:	b480      	push	{r7}
 80004e2:	b085      	sub	sp, #20
 80004e4:	af00      	add	r7, sp, #0
 80004e6:	60f8      	str	r0, [r7, #12]
 80004e8:	4608      	mov	r0, r1
 80004ea:	4611      	mov	r1, r2
 80004ec:	461a      	mov	r2, r3
 80004ee:	4603      	mov	r3, r0
 80004f0:	817b      	strh	r3, [r7, #10]
 80004f2:	460b      	mov	r3, r1
 80004f4:	813b      	strh	r3, [r7, #8]
 80004f6:	4613      	mov	r3, r2
 80004f8:	71fb      	strb	r3, [r7, #7]
    return MB_ENOREG;
 80004fa:	2301      	movs	r3, #1
}
 80004fc:	4618      	mov	r0, r3
 80004fe:	3714      	adds	r7, #20
 8000500:	46bd      	mov	sp, r7
 8000502:	bc80      	pop	{r7}
 8000504:	4770      	bx	lr

08000506 <eMBRegDiscreteCB>:

eMBErrorCode
eMBRegDiscreteCB( UCHAR * pucRegBuffer, USHORT usAddress, USHORT usNDiscrete )
{
 8000506:	b480      	push	{r7}
 8000508:	b083      	sub	sp, #12
 800050a:	af00      	add	r7, sp, #0
 800050c:	6078      	str	r0, [r7, #4]
 800050e:	460b      	mov	r3, r1
 8000510:	807b      	strh	r3, [r7, #2]
 8000512:	4613      	mov	r3, r2
 8000514:	803b      	strh	r3, [r7, #0]
    return MB_ENOREG;
 8000516:	2301      	movs	r3, #1
}
 8000518:	4618      	mov	r0, r3
 800051a:	370c      	adds	r7, #12
 800051c:	46bd      	mov	sp, r7
 800051e:	bc80      	pop	{r7}
 8000520:	4770      	bx	lr

08000522 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000522:	b480      	push	{r7}
 8000524:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000526:	b672      	cpsid	i
}
 8000528:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800052a:	e7fe      	b.n	800052a <Error_Handler+0x8>

0800052c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800052c:	b480      	push	{r7}
 800052e:	b085      	sub	sp, #20
 8000530:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000532:	4b15      	ldr	r3, [pc, #84]	; (8000588 <HAL_MspInit+0x5c>)
 8000534:	699b      	ldr	r3, [r3, #24]
 8000536:	4a14      	ldr	r2, [pc, #80]	; (8000588 <HAL_MspInit+0x5c>)
 8000538:	f043 0301 	orr.w	r3, r3, #1
 800053c:	6193      	str	r3, [r2, #24]
 800053e:	4b12      	ldr	r3, [pc, #72]	; (8000588 <HAL_MspInit+0x5c>)
 8000540:	699b      	ldr	r3, [r3, #24]
 8000542:	f003 0301 	and.w	r3, r3, #1
 8000546:	60bb      	str	r3, [r7, #8]
 8000548:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800054a:	4b0f      	ldr	r3, [pc, #60]	; (8000588 <HAL_MspInit+0x5c>)
 800054c:	69db      	ldr	r3, [r3, #28]
 800054e:	4a0e      	ldr	r2, [pc, #56]	; (8000588 <HAL_MspInit+0x5c>)
 8000550:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000554:	61d3      	str	r3, [r2, #28]
 8000556:	4b0c      	ldr	r3, [pc, #48]	; (8000588 <HAL_MspInit+0x5c>)
 8000558:	69db      	ldr	r3, [r3, #28]
 800055a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800055e:	607b      	str	r3, [r7, #4]
 8000560:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** DISABLE: JTAG-DP Disabled and SW-DP Disabled
  */
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 8000562:	4b0a      	ldr	r3, [pc, #40]	; (800058c <HAL_MspInit+0x60>)
 8000564:	685b      	ldr	r3, [r3, #4]
 8000566:	60fb      	str	r3, [r7, #12]
 8000568:	68fb      	ldr	r3, [r7, #12]
 800056a:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800056e:	60fb      	str	r3, [r7, #12]
 8000570:	68fb      	ldr	r3, [r7, #12]
 8000572:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8000576:	60fb      	str	r3, [r7, #12]
 8000578:	4a04      	ldr	r2, [pc, #16]	; (800058c <HAL_MspInit+0x60>)
 800057a:	68fb      	ldr	r3, [r7, #12]
 800057c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800057e:	bf00      	nop
 8000580:	3714      	adds	r7, #20
 8000582:	46bd      	mov	sp, r7
 8000584:	bc80      	pop	{r7}
 8000586:	4770      	bx	lr
 8000588:	40021000 	.word	0x40021000
 800058c:	40010000 	.word	0x40010000

08000590 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000590:	b480      	push	{r7}
 8000592:	b085      	sub	sp, #20
 8000594:	af00      	add	r7, sp, #0
 8000596:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8000598:	687b      	ldr	r3, [r7, #4]
 800059a:	681b      	ldr	r3, [r3, #0]
 800059c:	4a09      	ldr	r2, [pc, #36]	; (80005c4 <HAL_TIM_Base_MspInit+0x34>)
 800059e:	4293      	cmp	r3, r2
 80005a0:	d10b      	bne.n	80005ba <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 80005a2:	4b09      	ldr	r3, [pc, #36]	; (80005c8 <HAL_TIM_Base_MspInit+0x38>)
 80005a4:	69db      	ldr	r3, [r3, #28]
 80005a6:	4a08      	ldr	r2, [pc, #32]	; (80005c8 <HAL_TIM_Base_MspInit+0x38>)
 80005a8:	f043 0302 	orr.w	r3, r3, #2
 80005ac:	61d3      	str	r3, [r2, #28]
 80005ae:	4b06      	ldr	r3, [pc, #24]	; (80005c8 <HAL_TIM_Base_MspInit+0x38>)
 80005b0:	69db      	ldr	r3, [r3, #28]
 80005b2:	f003 0302 	and.w	r3, r3, #2
 80005b6:	60fb      	str	r3, [r7, #12]
 80005b8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 80005ba:	bf00      	nop
 80005bc:	3714      	adds	r7, #20
 80005be:	46bd      	mov	sp, r7
 80005c0:	bc80      	pop	{r7}
 80005c2:	4770      	bx	lr
 80005c4:	40000400 	.word	0x40000400
 80005c8:	40021000 	.word	0x40021000

080005cc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80005cc:	b580      	push	{r7, lr}
 80005ce:	b088      	sub	sp, #32
 80005d0:	af00      	add	r7, sp, #0
 80005d2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005d4:	f107 0310 	add.w	r3, r7, #16
 80005d8:	2200      	movs	r2, #0
 80005da:	601a      	str	r2, [r3, #0]
 80005dc:	605a      	str	r2, [r3, #4]
 80005de:	609a      	str	r2, [r3, #8]
 80005e0:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 80005e2:	687b      	ldr	r3, [r7, #4]
 80005e4:	681b      	ldr	r3, [r3, #0]
 80005e6:	4a1c      	ldr	r2, [pc, #112]	; (8000658 <HAL_UART_MspInit+0x8c>)
 80005e8:	4293      	cmp	r3, r2
 80005ea:	d131      	bne.n	8000650 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80005ec:	4b1b      	ldr	r3, [pc, #108]	; (800065c <HAL_UART_MspInit+0x90>)
 80005ee:	699b      	ldr	r3, [r3, #24]
 80005f0:	4a1a      	ldr	r2, [pc, #104]	; (800065c <HAL_UART_MspInit+0x90>)
 80005f2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80005f6:	6193      	str	r3, [r2, #24]
 80005f8:	4b18      	ldr	r3, [pc, #96]	; (800065c <HAL_UART_MspInit+0x90>)
 80005fa:	699b      	ldr	r3, [r3, #24]
 80005fc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000600:	60fb      	str	r3, [r7, #12]
 8000602:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000604:	4b15      	ldr	r3, [pc, #84]	; (800065c <HAL_UART_MspInit+0x90>)
 8000606:	699b      	ldr	r3, [r3, #24]
 8000608:	4a14      	ldr	r2, [pc, #80]	; (800065c <HAL_UART_MspInit+0x90>)
 800060a:	f043 0304 	orr.w	r3, r3, #4
 800060e:	6193      	str	r3, [r2, #24]
 8000610:	4b12      	ldr	r3, [pc, #72]	; (800065c <HAL_UART_MspInit+0x90>)
 8000612:	699b      	ldr	r3, [r3, #24]
 8000614:	f003 0304 	and.w	r3, r3, #4
 8000618:	60bb      	str	r3, [r7, #8]
 800061a:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800061c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000620:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000622:	2302      	movs	r3, #2
 8000624:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000626:	2303      	movs	r3, #3
 8000628:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800062a:	f107 0310 	add.w	r3, r7, #16
 800062e:	4619      	mov	r1, r3
 8000630:	480b      	ldr	r0, [pc, #44]	; (8000660 <HAL_UART_MspInit+0x94>)
 8000632:	f000 fab7 	bl	8000ba4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000636:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800063a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800063c:	2300      	movs	r3, #0
 800063e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000640:	2300      	movs	r3, #0
 8000642:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000644:	f107 0310 	add.w	r3, r7, #16
 8000648:	4619      	mov	r1, r3
 800064a:	4805      	ldr	r0, [pc, #20]	; (8000660 <HAL_UART_MspInit+0x94>)
 800064c:	f000 faaa 	bl	8000ba4 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8000650:	bf00      	nop
 8000652:	3720      	adds	r7, #32
 8000654:	46bd      	mov	sp, r7
 8000656:	bd80      	pop	{r7, pc}
 8000658:	40013800 	.word	0x40013800
 800065c:	40021000 	.word	0x40021000
 8000660:	40010800 	.word	0x40010800

08000664 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000664:	b480      	push	{r7}
 8000666:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000668:	e7fe      	b.n	8000668 <NMI_Handler+0x4>

0800066a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800066a:	b480      	push	{r7}
 800066c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800066e:	e7fe      	b.n	800066e <HardFault_Handler+0x4>

08000670 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000670:	b480      	push	{r7}
 8000672:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000674:	e7fe      	b.n	8000674 <MemManage_Handler+0x4>

08000676 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000676:	b480      	push	{r7}
 8000678:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800067a:	e7fe      	b.n	800067a <BusFault_Handler+0x4>

0800067c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800067c:	b480      	push	{r7}
 800067e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000680:	e7fe      	b.n	8000680 <UsageFault_Handler+0x4>

08000682 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000682:	b480      	push	{r7}
 8000684:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000686:	bf00      	nop
 8000688:	46bd      	mov	sp, r7
 800068a:	bc80      	pop	{r7}
 800068c:	4770      	bx	lr

0800068e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800068e:	b480      	push	{r7}
 8000690:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000692:	bf00      	nop
 8000694:	46bd      	mov	sp, r7
 8000696:	bc80      	pop	{r7}
 8000698:	4770      	bx	lr

0800069a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800069a:	b480      	push	{r7}
 800069c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800069e:	bf00      	nop
 80006a0:	46bd      	mov	sp, r7
 80006a2:	bc80      	pop	{r7}
 80006a4:	4770      	bx	lr

080006a6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80006a6:	b580      	push	{r7, lr}
 80006a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80006aa:	f000 f935 	bl	8000918 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80006ae:	bf00      	nop
 80006b0:	bd80      	pop	{r7, pc}

080006b2 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80006b2:	b480      	push	{r7}
 80006b4:	af00      	add	r7, sp, #0
  return 1;
 80006b6:	2301      	movs	r3, #1
}
 80006b8:	4618      	mov	r0, r3
 80006ba:	46bd      	mov	sp, r7
 80006bc:	bc80      	pop	{r7}
 80006be:	4770      	bx	lr

080006c0 <_kill>:

int _kill(int pid, int sig)
{
 80006c0:	b580      	push	{r7, lr}
 80006c2:	b082      	sub	sp, #8
 80006c4:	af00      	add	r7, sp, #0
 80006c6:	6078      	str	r0, [r7, #4]
 80006c8:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80006ca:	f002 ffe5 	bl	8003698 <__errno>
 80006ce:	4603      	mov	r3, r0
 80006d0:	2216      	movs	r2, #22
 80006d2:	601a      	str	r2, [r3, #0]
  return -1;
 80006d4:	f04f 33ff 	mov.w	r3, #4294967295
}
 80006d8:	4618      	mov	r0, r3
 80006da:	3708      	adds	r7, #8
 80006dc:	46bd      	mov	sp, r7
 80006de:	bd80      	pop	{r7, pc}

080006e0 <_exit>:

void _exit (int status)
{
 80006e0:	b580      	push	{r7, lr}
 80006e2:	b082      	sub	sp, #8
 80006e4:	af00      	add	r7, sp, #0
 80006e6:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80006e8:	f04f 31ff 	mov.w	r1, #4294967295
 80006ec:	6878      	ldr	r0, [r7, #4]
 80006ee:	f7ff ffe7 	bl	80006c0 <_kill>
  while (1) {}    /* Make sure we hang here */
 80006f2:	e7fe      	b.n	80006f2 <_exit+0x12>

080006f4 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80006f4:	b580      	push	{r7, lr}
 80006f6:	b086      	sub	sp, #24
 80006f8:	af00      	add	r7, sp, #0
 80006fa:	60f8      	str	r0, [r7, #12]
 80006fc:	60b9      	str	r1, [r7, #8]
 80006fe:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000700:	2300      	movs	r3, #0
 8000702:	617b      	str	r3, [r7, #20]
 8000704:	e00a      	b.n	800071c <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000706:	f3af 8000 	nop.w
 800070a:	4601      	mov	r1, r0
 800070c:	68bb      	ldr	r3, [r7, #8]
 800070e:	1c5a      	adds	r2, r3, #1
 8000710:	60ba      	str	r2, [r7, #8]
 8000712:	b2ca      	uxtb	r2, r1
 8000714:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000716:	697b      	ldr	r3, [r7, #20]
 8000718:	3301      	adds	r3, #1
 800071a:	617b      	str	r3, [r7, #20]
 800071c:	697a      	ldr	r2, [r7, #20]
 800071e:	687b      	ldr	r3, [r7, #4]
 8000720:	429a      	cmp	r2, r3
 8000722:	dbf0      	blt.n	8000706 <_read+0x12>
  }

  return len;
 8000724:	687b      	ldr	r3, [r7, #4]
}
 8000726:	4618      	mov	r0, r3
 8000728:	3718      	adds	r7, #24
 800072a:	46bd      	mov	sp, r7
 800072c:	bd80      	pop	{r7, pc}

0800072e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800072e:	b580      	push	{r7, lr}
 8000730:	b086      	sub	sp, #24
 8000732:	af00      	add	r7, sp, #0
 8000734:	60f8      	str	r0, [r7, #12]
 8000736:	60b9      	str	r1, [r7, #8]
 8000738:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800073a:	2300      	movs	r3, #0
 800073c:	617b      	str	r3, [r7, #20]
 800073e:	e009      	b.n	8000754 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000740:	68bb      	ldr	r3, [r7, #8]
 8000742:	1c5a      	adds	r2, r3, #1
 8000744:	60ba      	str	r2, [r7, #8]
 8000746:	781b      	ldrb	r3, [r3, #0]
 8000748:	4618      	mov	r0, r3
 800074a:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800074e:	697b      	ldr	r3, [r7, #20]
 8000750:	3301      	adds	r3, #1
 8000752:	617b      	str	r3, [r7, #20]
 8000754:	697a      	ldr	r2, [r7, #20]
 8000756:	687b      	ldr	r3, [r7, #4]
 8000758:	429a      	cmp	r2, r3
 800075a:	dbf1      	blt.n	8000740 <_write+0x12>
  }
  return len;
 800075c:	687b      	ldr	r3, [r7, #4]
}
 800075e:	4618      	mov	r0, r3
 8000760:	3718      	adds	r7, #24
 8000762:	46bd      	mov	sp, r7
 8000764:	bd80      	pop	{r7, pc}

08000766 <_close>:

int _close(int file)
{
 8000766:	b480      	push	{r7}
 8000768:	b083      	sub	sp, #12
 800076a:	af00      	add	r7, sp, #0
 800076c:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800076e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000772:	4618      	mov	r0, r3
 8000774:	370c      	adds	r7, #12
 8000776:	46bd      	mov	sp, r7
 8000778:	bc80      	pop	{r7}
 800077a:	4770      	bx	lr

0800077c <_fstat>:


int _fstat(int file, struct stat *st)
{
 800077c:	b480      	push	{r7}
 800077e:	b083      	sub	sp, #12
 8000780:	af00      	add	r7, sp, #0
 8000782:	6078      	str	r0, [r7, #4]
 8000784:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000786:	683b      	ldr	r3, [r7, #0]
 8000788:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800078c:	605a      	str	r2, [r3, #4]
  return 0;
 800078e:	2300      	movs	r3, #0
}
 8000790:	4618      	mov	r0, r3
 8000792:	370c      	adds	r7, #12
 8000794:	46bd      	mov	sp, r7
 8000796:	bc80      	pop	{r7}
 8000798:	4770      	bx	lr

0800079a <_isatty>:

int _isatty(int file)
{
 800079a:	b480      	push	{r7}
 800079c:	b083      	sub	sp, #12
 800079e:	af00      	add	r7, sp, #0
 80007a0:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80007a2:	2301      	movs	r3, #1
}
 80007a4:	4618      	mov	r0, r3
 80007a6:	370c      	adds	r7, #12
 80007a8:	46bd      	mov	sp, r7
 80007aa:	bc80      	pop	{r7}
 80007ac:	4770      	bx	lr

080007ae <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80007ae:	b480      	push	{r7}
 80007b0:	b085      	sub	sp, #20
 80007b2:	af00      	add	r7, sp, #0
 80007b4:	60f8      	str	r0, [r7, #12]
 80007b6:	60b9      	str	r1, [r7, #8]
 80007b8:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80007ba:	2300      	movs	r3, #0
}
 80007bc:	4618      	mov	r0, r3
 80007be:	3714      	adds	r7, #20
 80007c0:	46bd      	mov	sp, r7
 80007c2:	bc80      	pop	{r7}
 80007c4:	4770      	bx	lr
	...

080007c8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80007c8:	b580      	push	{r7, lr}
 80007ca:	b086      	sub	sp, #24
 80007cc:	af00      	add	r7, sp, #0
 80007ce:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80007d0:	4a14      	ldr	r2, [pc, #80]	; (8000824 <_sbrk+0x5c>)
 80007d2:	4b15      	ldr	r3, [pc, #84]	; (8000828 <_sbrk+0x60>)
 80007d4:	1ad3      	subs	r3, r2, r3
 80007d6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80007d8:	697b      	ldr	r3, [r7, #20]
 80007da:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80007dc:	4b13      	ldr	r3, [pc, #76]	; (800082c <_sbrk+0x64>)
 80007de:	681b      	ldr	r3, [r3, #0]
 80007e0:	2b00      	cmp	r3, #0
 80007e2:	d102      	bne.n	80007ea <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80007e4:	4b11      	ldr	r3, [pc, #68]	; (800082c <_sbrk+0x64>)
 80007e6:	4a12      	ldr	r2, [pc, #72]	; (8000830 <_sbrk+0x68>)
 80007e8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80007ea:	4b10      	ldr	r3, [pc, #64]	; (800082c <_sbrk+0x64>)
 80007ec:	681a      	ldr	r2, [r3, #0]
 80007ee:	687b      	ldr	r3, [r7, #4]
 80007f0:	4413      	add	r3, r2
 80007f2:	693a      	ldr	r2, [r7, #16]
 80007f4:	429a      	cmp	r2, r3
 80007f6:	d207      	bcs.n	8000808 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80007f8:	f002 ff4e 	bl	8003698 <__errno>
 80007fc:	4603      	mov	r3, r0
 80007fe:	220c      	movs	r2, #12
 8000800:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000802:	f04f 33ff 	mov.w	r3, #4294967295
 8000806:	e009      	b.n	800081c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000808:	4b08      	ldr	r3, [pc, #32]	; (800082c <_sbrk+0x64>)
 800080a:	681b      	ldr	r3, [r3, #0]
 800080c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800080e:	4b07      	ldr	r3, [pc, #28]	; (800082c <_sbrk+0x64>)
 8000810:	681a      	ldr	r2, [r3, #0]
 8000812:	687b      	ldr	r3, [r7, #4]
 8000814:	4413      	add	r3, r2
 8000816:	4a05      	ldr	r2, [pc, #20]	; (800082c <_sbrk+0x64>)
 8000818:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800081a:	68fb      	ldr	r3, [r7, #12]
}
 800081c:	4618      	mov	r0, r3
 800081e:	3718      	adds	r7, #24
 8000820:	46bd      	mov	sp, r7
 8000822:	bd80      	pop	{r7, pc}
 8000824:	20005000 	.word	0x20005000
 8000828:	00000400 	.word	0x00000400
 800082c:	200001a0 	.word	0x200001a0
 8000830:	20000470 	.word	0x20000470

08000834 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000834:	b480      	push	{r7}
 8000836:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000838:	bf00      	nop
 800083a:	46bd      	mov	sp, r7
 800083c:	bc80      	pop	{r7}
 800083e:	4770      	bx	lr

08000840 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000840:	f7ff fff8 	bl	8000834 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000844:	480b      	ldr	r0, [pc, #44]	; (8000874 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8000846:	490c      	ldr	r1, [pc, #48]	; (8000878 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000848:	4a0c      	ldr	r2, [pc, #48]	; (800087c <LoopFillZerobss+0x16>)
  movs r3, #0
 800084a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800084c:	e002      	b.n	8000854 <LoopCopyDataInit>

0800084e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800084e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000850:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000852:	3304      	adds	r3, #4

08000854 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000854:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000856:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000858:	d3f9      	bcc.n	800084e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800085a:	4a09      	ldr	r2, [pc, #36]	; (8000880 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 800085c:	4c09      	ldr	r4, [pc, #36]	; (8000884 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800085e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000860:	e001      	b.n	8000866 <LoopFillZerobss>

08000862 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000862:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000864:	3204      	adds	r2, #4

08000866 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000866:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000868:	d3fb      	bcc.n	8000862 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800086a:	f002 ff1b 	bl	80036a4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800086e:	f7ff fc6d 	bl	800014c <main>
  bx lr
 8000872:	4770      	bx	lr
  ldr r0, =_sdata
 8000874:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000878:	200000ec 	.word	0x200000ec
  ldr r2, =_sidata
 800087c:	08004708 	.word	0x08004708
  ldr r2, =_sbss
 8000880:	200000ec 	.word	0x200000ec
  ldr r4, =_ebss
 8000884:	20000470 	.word	0x20000470

08000888 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000888:	e7fe      	b.n	8000888 <ADC1_2_IRQHandler>
	...

0800088c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800088c:	b580      	push	{r7, lr}
 800088e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000890:	4b08      	ldr	r3, [pc, #32]	; (80008b4 <HAL_Init+0x28>)
 8000892:	681b      	ldr	r3, [r3, #0]
 8000894:	4a07      	ldr	r2, [pc, #28]	; (80008b4 <HAL_Init+0x28>)
 8000896:	f043 0310 	orr.w	r3, r3, #16
 800089a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800089c:	2003      	movs	r0, #3
 800089e:	f000 f907 	bl	8000ab0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80008a2:	200f      	movs	r0, #15
 80008a4:	f000 f808 	bl	80008b8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80008a8:	f7ff fe40 	bl	800052c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80008ac:	2300      	movs	r3, #0
}
 80008ae:	4618      	mov	r0, r3
 80008b0:	bd80      	pop	{r7, pc}
 80008b2:	bf00      	nop
 80008b4:	40022000 	.word	0x40022000

080008b8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80008b8:	b580      	push	{r7, lr}
 80008ba:	b082      	sub	sp, #8
 80008bc:	af00      	add	r7, sp, #0
 80008be:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80008c0:	4b12      	ldr	r3, [pc, #72]	; (800090c <HAL_InitTick+0x54>)
 80008c2:	681a      	ldr	r2, [r3, #0]
 80008c4:	4b12      	ldr	r3, [pc, #72]	; (8000910 <HAL_InitTick+0x58>)
 80008c6:	781b      	ldrb	r3, [r3, #0]
 80008c8:	4619      	mov	r1, r3
 80008ca:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80008ce:	fbb3 f3f1 	udiv	r3, r3, r1
 80008d2:	fbb2 f3f3 	udiv	r3, r2, r3
 80008d6:	4618      	mov	r0, r3
 80008d8:	f000 f911 	bl	8000afe <HAL_SYSTICK_Config>
 80008dc:	4603      	mov	r3, r0
 80008de:	2b00      	cmp	r3, #0
 80008e0:	d001      	beq.n	80008e6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80008e2:	2301      	movs	r3, #1
 80008e4:	e00e      	b.n	8000904 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80008e6:	687b      	ldr	r3, [r7, #4]
 80008e8:	2b0f      	cmp	r3, #15
 80008ea:	d80a      	bhi.n	8000902 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80008ec:	2200      	movs	r2, #0
 80008ee:	6879      	ldr	r1, [r7, #4]
 80008f0:	f04f 30ff 	mov.w	r0, #4294967295
 80008f4:	f000 f8e7 	bl	8000ac6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80008f8:	4a06      	ldr	r2, [pc, #24]	; (8000914 <HAL_InitTick+0x5c>)
 80008fa:	687b      	ldr	r3, [r7, #4]
 80008fc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80008fe:	2300      	movs	r3, #0
 8000900:	e000      	b.n	8000904 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000902:	2301      	movs	r3, #1
}
 8000904:	4618      	mov	r0, r3
 8000906:	3708      	adds	r7, #8
 8000908:	46bd      	mov	sp, r7
 800090a:	bd80      	pop	{r7, pc}
 800090c:	20000004 	.word	0x20000004
 8000910:	2000000c 	.word	0x2000000c
 8000914:	20000008 	.word	0x20000008

08000918 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000918:	b480      	push	{r7}
 800091a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800091c:	4b05      	ldr	r3, [pc, #20]	; (8000934 <HAL_IncTick+0x1c>)
 800091e:	781b      	ldrb	r3, [r3, #0]
 8000920:	461a      	mov	r2, r3
 8000922:	4b05      	ldr	r3, [pc, #20]	; (8000938 <HAL_IncTick+0x20>)
 8000924:	681b      	ldr	r3, [r3, #0]
 8000926:	4413      	add	r3, r2
 8000928:	4a03      	ldr	r2, [pc, #12]	; (8000938 <HAL_IncTick+0x20>)
 800092a:	6013      	str	r3, [r2, #0]
}
 800092c:	bf00      	nop
 800092e:	46bd      	mov	sp, r7
 8000930:	bc80      	pop	{r7}
 8000932:	4770      	bx	lr
 8000934:	2000000c 	.word	0x2000000c
 8000938:	200001a4 	.word	0x200001a4

0800093c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800093c:	b480      	push	{r7}
 800093e:	af00      	add	r7, sp, #0
  return uwTick;
 8000940:	4b02      	ldr	r3, [pc, #8]	; (800094c <HAL_GetTick+0x10>)
 8000942:	681b      	ldr	r3, [r3, #0]
}
 8000944:	4618      	mov	r0, r3
 8000946:	46bd      	mov	sp, r7
 8000948:	bc80      	pop	{r7}
 800094a:	4770      	bx	lr
 800094c:	200001a4 	.word	0x200001a4

08000950 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000950:	b480      	push	{r7}
 8000952:	b085      	sub	sp, #20
 8000954:	af00      	add	r7, sp, #0
 8000956:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000958:	687b      	ldr	r3, [r7, #4]
 800095a:	f003 0307 	and.w	r3, r3, #7
 800095e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000960:	4b0c      	ldr	r3, [pc, #48]	; (8000994 <__NVIC_SetPriorityGrouping+0x44>)
 8000962:	68db      	ldr	r3, [r3, #12]
 8000964:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000966:	68ba      	ldr	r2, [r7, #8]
 8000968:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800096c:	4013      	ands	r3, r2
 800096e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000970:	68fb      	ldr	r3, [r7, #12]
 8000972:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000974:	68bb      	ldr	r3, [r7, #8]
 8000976:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000978:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800097c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000980:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000982:	4a04      	ldr	r2, [pc, #16]	; (8000994 <__NVIC_SetPriorityGrouping+0x44>)
 8000984:	68bb      	ldr	r3, [r7, #8]
 8000986:	60d3      	str	r3, [r2, #12]
}
 8000988:	bf00      	nop
 800098a:	3714      	adds	r7, #20
 800098c:	46bd      	mov	sp, r7
 800098e:	bc80      	pop	{r7}
 8000990:	4770      	bx	lr
 8000992:	bf00      	nop
 8000994:	e000ed00 	.word	0xe000ed00

08000998 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000998:	b480      	push	{r7}
 800099a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800099c:	4b04      	ldr	r3, [pc, #16]	; (80009b0 <__NVIC_GetPriorityGrouping+0x18>)
 800099e:	68db      	ldr	r3, [r3, #12]
 80009a0:	0a1b      	lsrs	r3, r3, #8
 80009a2:	f003 0307 	and.w	r3, r3, #7
}
 80009a6:	4618      	mov	r0, r3
 80009a8:	46bd      	mov	sp, r7
 80009aa:	bc80      	pop	{r7}
 80009ac:	4770      	bx	lr
 80009ae:	bf00      	nop
 80009b0:	e000ed00 	.word	0xe000ed00

080009b4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80009b4:	b480      	push	{r7}
 80009b6:	b083      	sub	sp, #12
 80009b8:	af00      	add	r7, sp, #0
 80009ba:	4603      	mov	r3, r0
 80009bc:	6039      	str	r1, [r7, #0]
 80009be:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80009c0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80009c4:	2b00      	cmp	r3, #0
 80009c6:	db0a      	blt.n	80009de <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80009c8:	683b      	ldr	r3, [r7, #0]
 80009ca:	b2da      	uxtb	r2, r3
 80009cc:	490c      	ldr	r1, [pc, #48]	; (8000a00 <__NVIC_SetPriority+0x4c>)
 80009ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80009d2:	0112      	lsls	r2, r2, #4
 80009d4:	b2d2      	uxtb	r2, r2
 80009d6:	440b      	add	r3, r1
 80009d8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80009dc:	e00a      	b.n	80009f4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80009de:	683b      	ldr	r3, [r7, #0]
 80009e0:	b2da      	uxtb	r2, r3
 80009e2:	4908      	ldr	r1, [pc, #32]	; (8000a04 <__NVIC_SetPriority+0x50>)
 80009e4:	79fb      	ldrb	r3, [r7, #7]
 80009e6:	f003 030f 	and.w	r3, r3, #15
 80009ea:	3b04      	subs	r3, #4
 80009ec:	0112      	lsls	r2, r2, #4
 80009ee:	b2d2      	uxtb	r2, r2
 80009f0:	440b      	add	r3, r1
 80009f2:	761a      	strb	r2, [r3, #24]
}
 80009f4:	bf00      	nop
 80009f6:	370c      	adds	r7, #12
 80009f8:	46bd      	mov	sp, r7
 80009fa:	bc80      	pop	{r7}
 80009fc:	4770      	bx	lr
 80009fe:	bf00      	nop
 8000a00:	e000e100 	.word	0xe000e100
 8000a04:	e000ed00 	.word	0xe000ed00

08000a08 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000a08:	b480      	push	{r7}
 8000a0a:	b089      	sub	sp, #36	; 0x24
 8000a0c:	af00      	add	r7, sp, #0
 8000a0e:	60f8      	str	r0, [r7, #12]
 8000a10:	60b9      	str	r1, [r7, #8]
 8000a12:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000a14:	68fb      	ldr	r3, [r7, #12]
 8000a16:	f003 0307 	and.w	r3, r3, #7
 8000a1a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000a1c:	69fb      	ldr	r3, [r7, #28]
 8000a1e:	f1c3 0307 	rsb	r3, r3, #7
 8000a22:	2b04      	cmp	r3, #4
 8000a24:	bf28      	it	cs
 8000a26:	2304      	movcs	r3, #4
 8000a28:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000a2a:	69fb      	ldr	r3, [r7, #28]
 8000a2c:	3304      	adds	r3, #4
 8000a2e:	2b06      	cmp	r3, #6
 8000a30:	d902      	bls.n	8000a38 <NVIC_EncodePriority+0x30>
 8000a32:	69fb      	ldr	r3, [r7, #28]
 8000a34:	3b03      	subs	r3, #3
 8000a36:	e000      	b.n	8000a3a <NVIC_EncodePriority+0x32>
 8000a38:	2300      	movs	r3, #0
 8000a3a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000a3c:	f04f 32ff 	mov.w	r2, #4294967295
 8000a40:	69bb      	ldr	r3, [r7, #24]
 8000a42:	fa02 f303 	lsl.w	r3, r2, r3
 8000a46:	43da      	mvns	r2, r3
 8000a48:	68bb      	ldr	r3, [r7, #8]
 8000a4a:	401a      	ands	r2, r3
 8000a4c:	697b      	ldr	r3, [r7, #20]
 8000a4e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000a50:	f04f 31ff 	mov.w	r1, #4294967295
 8000a54:	697b      	ldr	r3, [r7, #20]
 8000a56:	fa01 f303 	lsl.w	r3, r1, r3
 8000a5a:	43d9      	mvns	r1, r3
 8000a5c:	687b      	ldr	r3, [r7, #4]
 8000a5e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000a60:	4313      	orrs	r3, r2
         );
}
 8000a62:	4618      	mov	r0, r3
 8000a64:	3724      	adds	r7, #36	; 0x24
 8000a66:	46bd      	mov	sp, r7
 8000a68:	bc80      	pop	{r7}
 8000a6a:	4770      	bx	lr

08000a6c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000a6c:	b580      	push	{r7, lr}
 8000a6e:	b082      	sub	sp, #8
 8000a70:	af00      	add	r7, sp, #0
 8000a72:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000a74:	687b      	ldr	r3, [r7, #4]
 8000a76:	3b01      	subs	r3, #1
 8000a78:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000a7c:	d301      	bcc.n	8000a82 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000a7e:	2301      	movs	r3, #1
 8000a80:	e00f      	b.n	8000aa2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000a82:	4a0a      	ldr	r2, [pc, #40]	; (8000aac <SysTick_Config+0x40>)
 8000a84:	687b      	ldr	r3, [r7, #4]
 8000a86:	3b01      	subs	r3, #1
 8000a88:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000a8a:	210f      	movs	r1, #15
 8000a8c:	f04f 30ff 	mov.w	r0, #4294967295
 8000a90:	f7ff ff90 	bl	80009b4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000a94:	4b05      	ldr	r3, [pc, #20]	; (8000aac <SysTick_Config+0x40>)
 8000a96:	2200      	movs	r2, #0
 8000a98:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000a9a:	4b04      	ldr	r3, [pc, #16]	; (8000aac <SysTick_Config+0x40>)
 8000a9c:	2207      	movs	r2, #7
 8000a9e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000aa0:	2300      	movs	r3, #0
}
 8000aa2:	4618      	mov	r0, r3
 8000aa4:	3708      	adds	r7, #8
 8000aa6:	46bd      	mov	sp, r7
 8000aa8:	bd80      	pop	{r7, pc}
 8000aaa:	bf00      	nop
 8000aac:	e000e010 	.word	0xe000e010

08000ab0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ab0:	b580      	push	{r7, lr}
 8000ab2:	b082      	sub	sp, #8
 8000ab4:	af00      	add	r7, sp, #0
 8000ab6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000ab8:	6878      	ldr	r0, [r7, #4]
 8000aba:	f7ff ff49 	bl	8000950 <__NVIC_SetPriorityGrouping>
}
 8000abe:	bf00      	nop
 8000ac0:	3708      	adds	r7, #8
 8000ac2:	46bd      	mov	sp, r7
 8000ac4:	bd80      	pop	{r7, pc}

08000ac6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000ac6:	b580      	push	{r7, lr}
 8000ac8:	b086      	sub	sp, #24
 8000aca:	af00      	add	r7, sp, #0
 8000acc:	4603      	mov	r3, r0
 8000ace:	60b9      	str	r1, [r7, #8]
 8000ad0:	607a      	str	r2, [r7, #4]
 8000ad2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000ad4:	2300      	movs	r3, #0
 8000ad6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000ad8:	f7ff ff5e 	bl	8000998 <__NVIC_GetPriorityGrouping>
 8000adc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000ade:	687a      	ldr	r2, [r7, #4]
 8000ae0:	68b9      	ldr	r1, [r7, #8]
 8000ae2:	6978      	ldr	r0, [r7, #20]
 8000ae4:	f7ff ff90 	bl	8000a08 <NVIC_EncodePriority>
 8000ae8:	4602      	mov	r2, r0
 8000aea:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000aee:	4611      	mov	r1, r2
 8000af0:	4618      	mov	r0, r3
 8000af2:	f7ff ff5f 	bl	80009b4 <__NVIC_SetPriority>
}
 8000af6:	bf00      	nop
 8000af8:	3718      	adds	r7, #24
 8000afa:	46bd      	mov	sp, r7
 8000afc:	bd80      	pop	{r7, pc}

08000afe <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000afe:	b580      	push	{r7, lr}
 8000b00:	b082      	sub	sp, #8
 8000b02:	af00      	add	r7, sp, #0
 8000b04:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000b06:	6878      	ldr	r0, [r7, #4]
 8000b08:	f7ff ffb0 	bl	8000a6c <SysTick_Config>
 8000b0c:	4603      	mov	r3, r0
}
 8000b0e:	4618      	mov	r0, r3
 8000b10:	3708      	adds	r7, #8
 8000b12:	46bd      	mov	sp, r7
 8000b14:	bd80      	pop	{r7, pc}

08000b16 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8000b16:	b480      	push	{r7}
 8000b18:	b085      	sub	sp, #20
 8000b1a:	af00      	add	r7, sp, #0
 8000b1c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000b1e:	2300      	movs	r3, #0
 8000b20:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000b22:	687b      	ldr	r3, [r7, #4]
 8000b24:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8000b28:	b2db      	uxtb	r3, r3
 8000b2a:	2b02      	cmp	r3, #2
 8000b2c:	d008      	beq.n	8000b40 <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000b2e:	687b      	ldr	r3, [r7, #4]
 8000b30:	2204      	movs	r2, #4
 8000b32:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000b34:	687b      	ldr	r3, [r7, #4]
 8000b36:	2200      	movs	r2, #0
 8000b38:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8000b3c:	2301      	movs	r3, #1
 8000b3e:	e020      	b.n	8000b82 <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000b40:	687b      	ldr	r3, [r7, #4]
 8000b42:	681b      	ldr	r3, [r3, #0]
 8000b44:	681a      	ldr	r2, [r3, #0]
 8000b46:	687b      	ldr	r3, [r7, #4]
 8000b48:	681b      	ldr	r3, [r3, #0]
 8000b4a:	f022 020e 	bic.w	r2, r2, #14
 8000b4e:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000b50:	687b      	ldr	r3, [r7, #4]
 8000b52:	681b      	ldr	r3, [r3, #0]
 8000b54:	681a      	ldr	r2, [r3, #0]
 8000b56:	687b      	ldr	r3, [r7, #4]
 8000b58:	681b      	ldr	r3, [r3, #0]
 8000b5a:	f022 0201 	bic.w	r2, r2, #1
 8000b5e:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8000b60:	687b      	ldr	r3, [r7, #4]
 8000b62:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000b64:	687b      	ldr	r3, [r7, #4]
 8000b66:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000b68:	2101      	movs	r1, #1
 8000b6a:	fa01 f202 	lsl.w	r2, r1, r2
 8000b6e:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8000b70:	687b      	ldr	r3, [r7, #4]
 8000b72:	2201      	movs	r2, #1
 8000b74:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8000b78:	687b      	ldr	r3, [r7, #4]
 8000b7a:	2200      	movs	r2, #0
 8000b7c:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8000b80:	7bfb      	ldrb	r3, [r7, #15]
}
 8000b82:	4618      	mov	r0, r3
 8000b84:	3714      	adds	r7, #20
 8000b86:	46bd      	mov	sp, r7
 8000b88:	bc80      	pop	{r7}
 8000b8a:	4770      	bx	lr

08000b8c <HAL_DMA_GetError>:
  * @param  hdma : pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8000b8c:	b480      	push	{r7}
 8000b8e:	b083      	sub	sp, #12
 8000b90:	af00      	add	r7, sp, #0
 8000b92:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8000b94:	687b      	ldr	r3, [r7, #4]
 8000b96:	6b9b      	ldr	r3, [r3, #56]	; 0x38
}
 8000b98:	4618      	mov	r0, r3
 8000b9a:	370c      	adds	r7, #12
 8000b9c:	46bd      	mov	sp, r7
 8000b9e:	bc80      	pop	{r7}
 8000ba0:	4770      	bx	lr
	...

08000ba4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000ba4:	b480      	push	{r7}
 8000ba6:	b08b      	sub	sp, #44	; 0x2c
 8000ba8:	af00      	add	r7, sp, #0
 8000baa:	6078      	str	r0, [r7, #4]
 8000bac:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000bae:	2300      	movs	r3, #0
 8000bb0:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000bb2:	2300      	movs	r3, #0
 8000bb4:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000bb6:	e169      	b.n	8000e8c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000bb8:	2201      	movs	r2, #1
 8000bba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000bbc:	fa02 f303 	lsl.w	r3, r2, r3
 8000bc0:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000bc2:	683b      	ldr	r3, [r7, #0]
 8000bc4:	681b      	ldr	r3, [r3, #0]
 8000bc6:	69fa      	ldr	r2, [r7, #28]
 8000bc8:	4013      	ands	r3, r2
 8000bca:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000bcc:	69ba      	ldr	r2, [r7, #24]
 8000bce:	69fb      	ldr	r3, [r7, #28]
 8000bd0:	429a      	cmp	r2, r3
 8000bd2:	f040 8158 	bne.w	8000e86 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000bd6:	683b      	ldr	r3, [r7, #0]
 8000bd8:	685b      	ldr	r3, [r3, #4]
 8000bda:	4a9a      	ldr	r2, [pc, #616]	; (8000e44 <HAL_GPIO_Init+0x2a0>)
 8000bdc:	4293      	cmp	r3, r2
 8000bde:	d05e      	beq.n	8000c9e <HAL_GPIO_Init+0xfa>
 8000be0:	4a98      	ldr	r2, [pc, #608]	; (8000e44 <HAL_GPIO_Init+0x2a0>)
 8000be2:	4293      	cmp	r3, r2
 8000be4:	d875      	bhi.n	8000cd2 <HAL_GPIO_Init+0x12e>
 8000be6:	4a98      	ldr	r2, [pc, #608]	; (8000e48 <HAL_GPIO_Init+0x2a4>)
 8000be8:	4293      	cmp	r3, r2
 8000bea:	d058      	beq.n	8000c9e <HAL_GPIO_Init+0xfa>
 8000bec:	4a96      	ldr	r2, [pc, #600]	; (8000e48 <HAL_GPIO_Init+0x2a4>)
 8000bee:	4293      	cmp	r3, r2
 8000bf0:	d86f      	bhi.n	8000cd2 <HAL_GPIO_Init+0x12e>
 8000bf2:	4a96      	ldr	r2, [pc, #600]	; (8000e4c <HAL_GPIO_Init+0x2a8>)
 8000bf4:	4293      	cmp	r3, r2
 8000bf6:	d052      	beq.n	8000c9e <HAL_GPIO_Init+0xfa>
 8000bf8:	4a94      	ldr	r2, [pc, #592]	; (8000e4c <HAL_GPIO_Init+0x2a8>)
 8000bfa:	4293      	cmp	r3, r2
 8000bfc:	d869      	bhi.n	8000cd2 <HAL_GPIO_Init+0x12e>
 8000bfe:	4a94      	ldr	r2, [pc, #592]	; (8000e50 <HAL_GPIO_Init+0x2ac>)
 8000c00:	4293      	cmp	r3, r2
 8000c02:	d04c      	beq.n	8000c9e <HAL_GPIO_Init+0xfa>
 8000c04:	4a92      	ldr	r2, [pc, #584]	; (8000e50 <HAL_GPIO_Init+0x2ac>)
 8000c06:	4293      	cmp	r3, r2
 8000c08:	d863      	bhi.n	8000cd2 <HAL_GPIO_Init+0x12e>
 8000c0a:	4a92      	ldr	r2, [pc, #584]	; (8000e54 <HAL_GPIO_Init+0x2b0>)
 8000c0c:	4293      	cmp	r3, r2
 8000c0e:	d046      	beq.n	8000c9e <HAL_GPIO_Init+0xfa>
 8000c10:	4a90      	ldr	r2, [pc, #576]	; (8000e54 <HAL_GPIO_Init+0x2b0>)
 8000c12:	4293      	cmp	r3, r2
 8000c14:	d85d      	bhi.n	8000cd2 <HAL_GPIO_Init+0x12e>
 8000c16:	2b12      	cmp	r3, #18
 8000c18:	d82a      	bhi.n	8000c70 <HAL_GPIO_Init+0xcc>
 8000c1a:	2b12      	cmp	r3, #18
 8000c1c:	d859      	bhi.n	8000cd2 <HAL_GPIO_Init+0x12e>
 8000c1e:	a201      	add	r2, pc, #4	; (adr r2, 8000c24 <HAL_GPIO_Init+0x80>)
 8000c20:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000c24:	08000c9f 	.word	0x08000c9f
 8000c28:	08000c79 	.word	0x08000c79
 8000c2c:	08000c8b 	.word	0x08000c8b
 8000c30:	08000ccd 	.word	0x08000ccd
 8000c34:	08000cd3 	.word	0x08000cd3
 8000c38:	08000cd3 	.word	0x08000cd3
 8000c3c:	08000cd3 	.word	0x08000cd3
 8000c40:	08000cd3 	.word	0x08000cd3
 8000c44:	08000cd3 	.word	0x08000cd3
 8000c48:	08000cd3 	.word	0x08000cd3
 8000c4c:	08000cd3 	.word	0x08000cd3
 8000c50:	08000cd3 	.word	0x08000cd3
 8000c54:	08000cd3 	.word	0x08000cd3
 8000c58:	08000cd3 	.word	0x08000cd3
 8000c5c:	08000cd3 	.word	0x08000cd3
 8000c60:	08000cd3 	.word	0x08000cd3
 8000c64:	08000cd3 	.word	0x08000cd3
 8000c68:	08000c81 	.word	0x08000c81
 8000c6c:	08000c95 	.word	0x08000c95
 8000c70:	4a79      	ldr	r2, [pc, #484]	; (8000e58 <HAL_GPIO_Init+0x2b4>)
 8000c72:	4293      	cmp	r3, r2
 8000c74:	d013      	beq.n	8000c9e <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8000c76:	e02c      	b.n	8000cd2 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000c78:	683b      	ldr	r3, [r7, #0]
 8000c7a:	68db      	ldr	r3, [r3, #12]
 8000c7c:	623b      	str	r3, [r7, #32]
          break;
 8000c7e:	e029      	b.n	8000cd4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000c80:	683b      	ldr	r3, [r7, #0]
 8000c82:	68db      	ldr	r3, [r3, #12]
 8000c84:	3304      	adds	r3, #4
 8000c86:	623b      	str	r3, [r7, #32]
          break;
 8000c88:	e024      	b.n	8000cd4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000c8a:	683b      	ldr	r3, [r7, #0]
 8000c8c:	68db      	ldr	r3, [r3, #12]
 8000c8e:	3308      	adds	r3, #8
 8000c90:	623b      	str	r3, [r7, #32]
          break;
 8000c92:	e01f      	b.n	8000cd4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000c94:	683b      	ldr	r3, [r7, #0]
 8000c96:	68db      	ldr	r3, [r3, #12]
 8000c98:	330c      	adds	r3, #12
 8000c9a:	623b      	str	r3, [r7, #32]
          break;
 8000c9c:	e01a      	b.n	8000cd4 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000c9e:	683b      	ldr	r3, [r7, #0]
 8000ca0:	689b      	ldr	r3, [r3, #8]
 8000ca2:	2b00      	cmp	r3, #0
 8000ca4:	d102      	bne.n	8000cac <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000ca6:	2304      	movs	r3, #4
 8000ca8:	623b      	str	r3, [r7, #32]
          break;
 8000caa:	e013      	b.n	8000cd4 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000cac:	683b      	ldr	r3, [r7, #0]
 8000cae:	689b      	ldr	r3, [r3, #8]
 8000cb0:	2b01      	cmp	r3, #1
 8000cb2:	d105      	bne.n	8000cc0 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000cb4:	2308      	movs	r3, #8
 8000cb6:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000cb8:	687b      	ldr	r3, [r7, #4]
 8000cba:	69fa      	ldr	r2, [r7, #28]
 8000cbc:	611a      	str	r2, [r3, #16]
          break;
 8000cbe:	e009      	b.n	8000cd4 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000cc0:	2308      	movs	r3, #8
 8000cc2:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000cc4:	687b      	ldr	r3, [r7, #4]
 8000cc6:	69fa      	ldr	r2, [r7, #28]
 8000cc8:	615a      	str	r2, [r3, #20]
          break;
 8000cca:	e003      	b.n	8000cd4 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000ccc:	2300      	movs	r3, #0
 8000cce:	623b      	str	r3, [r7, #32]
          break;
 8000cd0:	e000      	b.n	8000cd4 <HAL_GPIO_Init+0x130>
          break;
 8000cd2:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000cd4:	69bb      	ldr	r3, [r7, #24]
 8000cd6:	2bff      	cmp	r3, #255	; 0xff
 8000cd8:	d801      	bhi.n	8000cde <HAL_GPIO_Init+0x13a>
 8000cda:	687b      	ldr	r3, [r7, #4]
 8000cdc:	e001      	b.n	8000ce2 <HAL_GPIO_Init+0x13e>
 8000cde:	687b      	ldr	r3, [r7, #4]
 8000ce0:	3304      	adds	r3, #4
 8000ce2:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000ce4:	69bb      	ldr	r3, [r7, #24]
 8000ce6:	2bff      	cmp	r3, #255	; 0xff
 8000ce8:	d802      	bhi.n	8000cf0 <HAL_GPIO_Init+0x14c>
 8000cea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000cec:	009b      	lsls	r3, r3, #2
 8000cee:	e002      	b.n	8000cf6 <HAL_GPIO_Init+0x152>
 8000cf0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000cf2:	3b08      	subs	r3, #8
 8000cf4:	009b      	lsls	r3, r3, #2
 8000cf6:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000cf8:	697b      	ldr	r3, [r7, #20]
 8000cfa:	681a      	ldr	r2, [r3, #0]
 8000cfc:	210f      	movs	r1, #15
 8000cfe:	693b      	ldr	r3, [r7, #16]
 8000d00:	fa01 f303 	lsl.w	r3, r1, r3
 8000d04:	43db      	mvns	r3, r3
 8000d06:	401a      	ands	r2, r3
 8000d08:	6a39      	ldr	r1, [r7, #32]
 8000d0a:	693b      	ldr	r3, [r7, #16]
 8000d0c:	fa01 f303 	lsl.w	r3, r1, r3
 8000d10:	431a      	orrs	r2, r3
 8000d12:	697b      	ldr	r3, [r7, #20]
 8000d14:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000d16:	683b      	ldr	r3, [r7, #0]
 8000d18:	685b      	ldr	r3, [r3, #4]
 8000d1a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d1e:	2b00      	cmp	r3, #0
 8000d20:	f000 80b1 	beq.w	8000e86 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000d24:	4b4d      	ldr	r3, [pc, #308]	; (8000e5c <HAL_GPIO_Init+0x2b8>)
 8000d26:	699b      	ldr	r3, [r3, #24]
 8000d28:	4a4c      	ldr	r2, [pc, #304]	; (8000e5c <HAL_GPIO_Init+0x2b8>)
 8000d2a:	f043 0301 	orr.w	r3, r3, #1
 8000d2e:	6193      	str	r3, [r2, #24]
 8000d30:	4b4a      	ldr	r3, [pc, #296]	; (8000e5c <HAL_GPIO_Init+0x2b8>)
 8000d32:	699b      	ldr	r3, [r3, #24]
 8000d34:	f003 0301 	and.w	r3, r3, #1
 8000d38:	60bb      	str	r3, [r7, #8]
 8000d3a:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8000d3c:	4a48      	ldr	r2, [pc, #288]	; (8000e60 <HAL_GPIO_Init+0x2bc>)
 8000d3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d40:	089b      	lsrs	r3, r3, #2
 8000d42:	3302      	adds	r3, #2
 8000d44:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000d48:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000d4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d4c:	f003 0303 	and.w	r3, r3, #3
 8000d50:	009b      	lsls	r3, r3, #2
 8000d52:	220f      	movs	r2, #15
 8000d54:	fa02 f303 	lsl.w	r3, r2, r3
 8000d58:	43db      	mvns	r3, r3
 8000d5a:	68fa      	ldr	r2, [r7, #12]
 8000d5c:	4013      	ands	r3, r2
 8000d5e:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000d60:	687b      	ldr	r3, [r7, #4]
 8000d62:	4a40      	ldr	r2, [pc, #256]	; (8000e64 <HAL_GPIO_Init+0x2c0>)
 8000d64:	4293      	cmp	r3, r2
 8000d66:	d013      	beq.n	8000d90 <HAL_GPIO_Init+0x1ec>
 8000d68:	687b      	ldr	r3, [r7, #4]
 8000d6a:	4a3f      	ldr	r2, [pc, #252]	; (8000e68 <HAL_GPIO_Init+0x2c4>)
 8000d6c:	4293      	cmp	r3, r2
 8000d6e:	d00d      	beq.n	8000d8c <HAL_GPIO_Init+0x1e8>
 8000d70:	687b      	ldr	r3, [r7, #4]
 8000d72:	4a3e      	ldr	r2, [pc, #248]	; (8000e6c <HAL_GPIO_Init+0x2c8>)
 8000d74:	4293      	cmp	r3, r2
 8000d76:	d007      	beq.n	8000d88 <HAL_GPIO_Init+0x1e4>
 8000d78:	687b      	ldr	r3, [r7, #4]
 8000d7a:	4a3d      	ldr	r2, [pc, #244]	; (8000e70 <HAL_GPIO_Init+0x2cc>)
 8000d7c:	4293      	cmp	r3, r2
 8000d7e:	d101      	bne.n	8000d84 <HAL_GPIO_Init+0x1e0>
 8000d80:	2303      	movs	r3, #3
 8000d82:	e006      	b.n	8000d92 <HAL_GPIO_Init+0x1ee>
 8000d84:	2304      	movs	r3, #4
 8000d86:	e004      	b.n	8000d92 <HAL_GPIO_Init+0x1ee>
 8000d88:	2302      	movs	r3, #2
 8000d8a:	e002      	b.n	8000d92 <HAL_GPIO_Init+0x1ee>
 8000d8c:	2301      	movs	r3, #1
 8000d8e:	e000      	b.n	8000d92 <HAL_GPIO_Init+0x1ee>
 8000d90:	2300      	movs	r3, #0
 8000d92:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000d94:	f002 0203 	and.w	r2, r2, #3
 8000d98:	0092      	lsls	r2, r2, #2
 8000d9a:	4093      	lsls	r3, r2
 8000d9c:	68fa      	ldr	r2, [r7, #12]
 8000d9e:	4313      	orrs	r3, r2
 8000da0:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8000da2:	492f      	ldr	r1, [pc, #188]	; (8000e60 <HAL_GPIO_Init+0x2bc>)
 8000da4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000da6:	089b      	lsrs	r3, r3, #2
 8000da8:	3302      	adds	r3, #2
 8000daa:	68fa      	ldr	r2, [r7, #12]
 8000dac:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000db0:	683b      	ldr	r3, [r7, #0]
 8000db2:	685b      	ldr	r3, [r3, #4]
 8000db4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000db8:	2b00      	cmp	r3, #0
 8000dba:	d006      	beq.n	8000dca <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8000dbc:	4b2d      	ldr	r3, [pc, #180]	; (8000e74 <HAL_GPIO_Init+0x2d0>)
 8000dbe:	689a      	ldr	r2, [r3, #8]
 8000dc0:	492c      	ldr	r1, [pc, #176]	; (8000e74 <HAL_GPIO_Init+0x2d0>)
 8000dc2:	69bb      	ldr	r3, [r7, #24]
 8000dc4:	4313      	orrs	r3, r2
 8000dc6:	608b      	str	r3, [r1, #8]
 8000dc8:	e006      	b.n	8000dd8 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000dca:	4b2a      	ldr	r3, [pc, #168]	; (8000e74 <HAL_GPIO_Init+0x2d0>)
 8000dcc:	689a      	ldr	r2, [r3, #8]
 8000dce:	69bb      	ldr	r3, [r7, #24]
 8000dd0:	43db      	mvns	r3, r3
 8000dd2:	4928      	ldr	r1, [pc, #160]	; (8000e74 <HAL_GPIO_Init+0x2d0>)
 8000dd4:	4013      	ands	r3, r2
 8000dd6:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000dd8:	683b      	ldr	r3, [r7, #0]
 8000dda:	685b      	ldr	r3, [r3, #4]
 8000ddc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000de0:	2b00      	cmp	r3, #0
 8000de2:	d006      	beq.n	8000df2 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8000de4:	4b23      	ldr	r3, [pc, #140]	; (8000e74 <HAL_GPIO_Init+0x2d0>)
 8000de6:	68da      	ldr	r2, [r3, #12]
 8000de8:	4922      	ldr	r1, [pc, #136]	; (8000e74 <HAL_GPIO_Init+0x2d0>)
 8000dea:	69bb      	ldr	r3, [r7, #24]
 8000dec:	4313      	orrs	r3, r2
 8000dee:	60cb      	str	r3, [r1, #12]
 8000df0:	e006      	b.n	8000e00 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000df2:	4b20      	ldr	r3, [pc, #128]	; (8000e74 <HAL_GPIO_Init+0x2d0>)
 8000df4:	68da      	ldr	r2, [r3, #12]
 8000df6:	69bb      	ldr	r3, [r7, #24]
 8000df8:	43db      	mvns	r3, r3
 8000dfa:	491e      	ldr	r1, [pc, #120]	; (8000e74 <HAL_GPIO_Init+0x2d0>)
 8000dfc:	4013      	ands	r3, r2
 8000dfe:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000e00:	683b      	ldr	r3, [r7, #0]
 8000e02:	685b      	ldr	r3, [r3, #4]
 8000e04:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000e08:	2b00      	cmp	r3, #0
 8000e0a:	d006      	beq.n	8000e1a <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8000e0c:	4b19      	ldr	r3, [pc, #100]	; (8000e74 <HAL_GPIO_Init+0x2d0>)
 8000e0e:	685a      	ldr	r2, [r3, #4]
 8000e10:	4918      	ldr	r1, [pc, #96]	; (8000e74 <HAL_GPIO_Init+0x2d0>)
 8000e12:	69bb      	ldr	r3, [r7, #24]
 8000e14:	4313      	orrs	r3, r2
 8000e16:	604b      	str	r3, [r1, #4]
 8000e18:	e006      	b.n	8000e28 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000e1a:	4b16      	ldr	r3, [pc, #88]	; (8000e74 <HAL_GPIO_Init+0x2d0>)
 8000e1c:	685a      	ldr	r2, [r3, #4]
 8000e1e:	69bb      	ldr	r3, [r7, #24]
 8000e20:	43db      	mvns	r3, r3
 8000e22:	4914      	ldr	r1, [pc, #80]	; (8000e74 <HAL_GPIO_Init+0x2d0>)
 8000e24:	4013      	ands	r3, r2
 8000e26:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000e28:	683b      	ldr	r3, [r7, #0]
 8000e2a:	685b      	ldr	r3, [r3, #4]
 8000e2c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000e30:	2b00      	cmp	r3, #0
 8000e32:	d021      	beq.n	8000e78 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8000e34:	4b0f      	ldr	r3, [pc, #60]	; (8000e74 <HAL_GPIO_Init+0x2d0>)
 8000e36:	681a      	ldr	r2, [r3, #0]
 8000e38:	490e      	ldr	r1, [pc, #56]	; (8000e74 <HAL_GPIO_Init+0x2d0>)
 8000e3a:	69bb      	ldr	r3, [r7, #24]
 8000e3c:	4313      	orrs	r3, r2
 8000e3e:	600b      	str	r3, [r1, #0]
 8000e40:	e021      	b.n	8000e86 <HAL_GPIO_Init+0x2e2>
 8000e42:	bf00      	nop
 8000e44:	10320000 	.word	0x10320000
 8000e48:	10310000 	.word	0x10310000
 8000e4c:	10220000 	.word	0x10220000
 8000e50:	10210000 	.word	0x10210000
 8000e54:	10120000 	.word	0x10120000
 8000e58:	10110000 	.word	0x10110000
 8000e5c:	40021000 	.word	0x40021000
 8000e60:	40010000 	.word	0x40010000
 8000e64:	40010800 	.word	0x40010800
 8000e68:	40010c00 	.word	0x40010c00
 8000e6c:	40011000 	.word	0x40011000
 8000e70:	40011400 	.word	0x40011400
 8000e74:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000e78:	4b0b      	ldr	r3, [pc, #44]	; (8000ea8 <HAL_GPIO_Init+0x304>)
 8000e7a:	681a      	ldr	r2, [r3, #0]
 8000e7c:	69bb      	ldr	r3, [r7, #24]
 8000e7e:	43db      	mvns	r3, r3
 8000e80:	4909      	ldr	r1, [pc, #36]	; (8000ea8 <HAL_GPIO_Init+0x304>)
 8000e82:	4013      	ands	r3, r2
 8000e84:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8000e86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e88:	3301      	adds	r3, #1
 8000e8a:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000e8c:	683b      	ldr	r3, [r7, #0]
 8000e8e:	681a      	ldr	r2, [r3, #0]
 8000e90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e92:	fa22 f303 	lsr.w	r3, r2, r3
 8000e96:	2b00      	cmp	r3, #0
 8000e98:	f47f ae8e 	bne.w	8000bb8 <HAL_GPIO_Init+0x14>
  }
}
 8000e9c:	bf00      	nop
 8000e9e:	bf00      	nop
 8000ea0:	372c      	adds	r7, #44	; 0x2c
 8000ea2:	46bd      	mov	sp, r7
 8000ea4:	bc80      	pop	{r7}
 8000ea6:	4770      	bx	lr
 8000ea8:	40010400 	.word	0x40010400

08000eac <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000eac:	b480      	push	{r7}
 8000eae:	b083      	sub	sp, #12
 8000eb0:	af00      	add	r7, sp, #0
 8000eb2:	6078      	str	r0, [r7, #4]
 8000eb4:	460b      	mov	r3, r1
 8000eb6:	807b      	strh	r3, [r7, #2]
 8000eb8:	4613      	mov	r3, r2
 8000eba:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000ebc:	787b      	ldrb	r3, [r7, #1]
 8000ebe:	2b00      	cmp	r3, #0
 8000ec0:	d003      	beq.n	8000eca <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000ec2:	887a      	ldrh	r2, [r7, #2]
 8000ec4:	687b      	ldr	r3, [r7, #4]
 8000ec6:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8000ec8:	e003      	b.n	8000ed2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000eca:	887b      	ldrh	r3, [r7, #2]
 8000ecc:	041a      	lsls	r2, r3, #16
 8000ece:	687b      	ldr	r3, [r7, #4]
 8000ed0:	611a      	str	r2, [r3, #16]
}
 8000ed2:	bf00      	nop
 8000ed4:	370c      	adds	r7, #12
 8000ed6:	46bd      	mov	sp, r7
 8000ed8:	bc80      	pop	{r7}
 8000eda:	4770      	bx	lr

08000edc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000edc:	b580      	push	{r7, lr}
 8000ede:	b086      	sub	sp, #24
 8000ee0:	af00      	add	r7, sp, #0
 8000ee2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8000ee4:	687b      	ldr	r3, [r7, #4]
 8000ee6:	2b00      	cmp	r3, #0
 8000ee8:	d101      	bne.n	8000eee <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000eea:	2301      	movs	r3, #1
 8000eec:	e272      	b.n	80013d4 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000eee:	687b      	ldr	r3, [r7, #4]
 8000ef0:	681b      	ldr	r3, [r3, #0]
 8000ef2:	f003 0301 	and.w	r3, r3, #1
 8000ef6:	2b00      	cmp	r3, #0
 8000ef8:	f000 8087 	beq.w	800100a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8000efc:	4b92      	ldr	r3, [pc, #584]	; (8001148 <HAL_RCC_OscConfig+0x26c>)
 8000efe:	685b      	ldr	r3, [r3, #4]
 8000f00:	f003 030c 	and.w	r3, r3, #12
 8000f04:	2b04      	cmp	r3, #4
 8000f06:	d00c      	beq.n	8000f22 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000f08:	4b8f      	ldr	r3, [pc, #572]	; (8001148 <HAL_RCC_OscConfig+0x26c>)
 8000f0a:	685b      	ldr	r3, [r3, #4]
 8000f0c:	f003 030c 	and.w	r3, r3, #12
 8000f10:	2b08      	cmp	r3, #8
 8000f12:	d112      	bne.n	8000f3a <HAL_RCC_OscConfig+0x5e>
 8000f14:	4b8c      	ldr	r3, [pc, #560]	; (8001148 <HAL_RCC_OscConfig+0x26c>)
 8000f16:	685b      	ldr	r3, [r3, #4]
 8000f18:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000f1c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000f20:	d10b      	bne.n	8000f3a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000f22:	4b89      	ldr	r3, [pc, #548]	; (8001148 <HAL_RCC_OscConfig+0x26c>)
 8000f24:	681b      	ldr	r3, [r3, #0]
 8000f26:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f2a:	2b00      	cmp	r3, #0
 8000f2c:	d06c      	beq.n	8001008 <HAL_RCC_OscConfig+0x12c>
 8000f2e:	687b      	ldr	r3, [r7, #4]
 8000f30:	685b      	ldr	r3, [r3, #4]
 8000f32:	2b00      	cmp	r3, #0
 8000f34:	d168      	bne.n	8001008 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8000f36:	2301      	movs	r3, #1
 8000f38:	e24c      	b.n	80013d4 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000f3a:	687b      	ldr	r3, [r7, #4]
 8000f3c:	685b      	ldr	r3, [r3, #4]
 8000f3e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000f42:	d106      	bne.n	8000f52 <HAL_RCC_OscConfig+0x76>
 8000f44:	4b80      	ldr	r3, [pc, #512]	; (8001148 <HAL_RCC_OscConfig+0x26c>)
 8000f46:	681b      	ldr	r3, [r3, #0]
 8000f48:	4a7f      	ldr	r2, [pc, #508]	; (8001148 <HAL_RCC_OscConfig+0x26c>)
 8000f4a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000f4e:	6013      	str	r3, [r2, #0]
 8000f50:	e02e      	b.n	8000fb0 <HAL_RCC_OscConfig+0xd4>
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	685b      	ldr	r3, [r3, #4]
 8000f56:	2b00      	cmp	r3, #0
 8000f58:	d10c      	bne.n	8000f74 <HAL_RCC_OscConfig+0x98>
 8000f5a:	4b7b      	ldr	r3, [pc, #492]	; (8001148 <HAL_RCC_OscConfig+0x26c>)
 8000f5c:	681b      	ldr	r3, [r3, #0]
 8000f5e:	4a7a      	ldr	r2, [pc, #488]	; (8001148 <HAL_RCC_OscConfig+0x26c>)
 8000f60:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000f64:	6013      	str	r3, [r2, #0]
 8000f66:	4b78      	ldr	r3, [pc, #480]	; (8001148 <HAL_RCC_OscConfig+0x26c>)
 8000f68:	681b      	ldr	r3, [r3, #0]
 8000f6a:	4a77      	ldr	r2, [pc, #476]	; (8001148 <HAL_RCC_OscConfig+0x26c>)
 8000f6c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000f70:	6013      	str	r3, [r2, #0]
 8000f72:	e01d      	b.n	8000fb0 <HAL_RCC_OscConfig+0xd4>
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	685b      	ldr	r3, [r3, #4]
 8000f78:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000f7c:	d10c      	bne.n	8000f98 <HAL_RCC_OscConfig+0xbc>
 8000f7e:	4b72      	ldr	r3, [pc, #456]	; (8001148 <HAL_RCC_OscConfig+0x26c>)
 8000f80:	681b      	ldr	r3, [r3, #0]
 8000f82:	4a71      	ldr	r2, [pc, #452]	; (8001148 <HAL_RCC_OscConfig+0x26c>)
 8000f84:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000f88:	6013      	str	r3, [r2, #0]
 8000f8a:	4b6f      	ldr	r3, [pc, #444]	; (8001148 <HAL_RCC_OscConfig+0x26c>)
 8000f8c:	681b      	ldr	r3, [r3, #0]
 8000f8e:	4a6e      	ldr	r2, [pc, #440]	; (8001148 <HAL_RCC_OscConfig+0x26c>)
 8000f90:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000f94:	6013      	str	r3, [r2, #0]
 8000f96:	e00b      	b.n	8000fb0 <HAL_RCC_OscConfig+0xd4>
 8000f98:	4b6b      	ldr	r3, [pc, #428]	; (8001148 <HAL_RCC_OscConfig+0x26c>)
 8000f9a:	681b      	ldr	r3, [r3, #0]
 8000f9c:	4a6a      	ldr	r2, [pc, #424]	; (8001148 <HAL_RCC_OscConfig+0x26c>)
 8000f9e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000fa2:	6013      	str	r3, [r2, #0]
 8000fa4:	4b68      	ldr	r3, [pc, #416]	; (8001148 <HAL_RCC_OscConfig+0x26c>)
 8000fa6:	681b      	ldr	r3, [r3, #0]
 8000fa8:	4a67      	ldr	r2, [pc, #412]	; (8001148 <HAL_RCC_OscConfig+0x26c>)
 8000faa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000fae:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	685b      	ldr	r3, [r3, #4]
 8000fb4:	2b00      	cmp	r3, #0
 8000fb6:	d013      	beq.n	8000fe0 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000fb8:	f7ff fcc0 	bl	800093c <HAL_GetTick>
 8000fbc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000fbe:	e008      	b.n	8000fd2 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000fc0:	f7ff fcbc 	bl	800093c <HAL_GetTick>
 8000fc4:	4602      	mov	r2, r0
 8000fc6:	693b      	ldr	r3, [r7, #16]
 8000fc8:	1ad3      	subs	r3, r2, r3
 8000fca:	2b64      	cmp	r3, #100	; 0x64
 8000fcc:	d901      	bls.n	8000fd2 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8000fce:	2303      	movs	r3, #3
 8000fd0:	e200      	b.n	80013d4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000fd2:	4b5d      	ldr	r3, [pc, #372]	; (8001148 <HAL_RCC_OscConfig+0x26c>)
 8000fd4:	681b      	ldr	r3, [r3, #0]
 8000fd6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000fda:	2b00      	cmp	r3, #0
 8000fdc:	d0f0      	beq.n	8000fc0 <HAL_RCC_OscConfig+0xe4>
 8000fde:	e014      	b.n	800100a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000fe0:	f7ff fcac 	bl	800093c <HAL_GetTick>
 8000fe4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000fe6:	e008      	b.n	8000ffa <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000fe8:	f7ff fca8 	bl	800093c <HAL_GetTick>
 8000fec:	4602      	mov	r2, r0
 8000fee:	693b      	ldr	r3, [r7, #16]
 8000ff0:	1ad3      	subs	r3, r2, r3
 8000ff2:	2b64      	cmp	r3, #100	; 0x64
 8000ff4:	d901      	bls.n	8000ffa <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8000ff6:	2303      	movs	r3, #3
 8000ff8:	e1ec      	b.n	80013d4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000ffa:	4b53      	ldr	r3, [pc, #332]	; (8001148 <HAL_RCC_OscConfig+0x26c>)
 8000ffc:	681b      	ldr	r3, [r3, #0]
 8000ffe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001002:	2b00      	cmp	r3, #0
 8001004:	d1f0      	bne.n	8000fe8 <HAL_RCC_OscConfig+0x10c>
 8001006:	e000      	b.n	800100a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001008:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	681b      	ldr	r3, [r3, #0]
 800100e:	f003 0302 	and.w	r3, r3, #2
 8001012:	2b00      	cmp	r3, #0
 8001014:	d063      	beq.n	80010de <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001016:	4b4c      	ldr	r3, [pc, #304]	; (8001148 <HAL_RCC_OscConfig+0x26c>)
 8001018:	685b      	ldr	r3, [r3, #4]
 800101a:	f003 030c 	and.w	r3, r3, #12
 800101e:	2b00      	cmp	r3, #0
 8001020:	d00b      	beq.n	800103a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001022:	4b49      	ldr	r3, [pc, #292]	; (8001148 <HAL_RCC_OscConfig+0x26c>)
 8001024:	685b      	ldr	r3, [r3, #4]
 8001026:	f003 030c 	and.w	r3, r3, #12
 800102a:	2b08      	cmp	r3, #8
 800102c:	d11c      	bne.n	8001068 <HAL_RCC_OscConfig+0x18c>
 800102e:	4b46      	ldr	r3, [pc, #280]	; (8001148 <HAL_RCC_OscConfig+0x26c>)
 8001030:	685b      	ldr	r3, [r3, #4]
 8001032:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001036:	2b00      	cmp	r3, #0
 8001038:	d116      	bne.n	8001068 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800103a:	4b43      	ldr	r3, [pc, #268]	; (8001148 <HAL_RCC_OscConfig+0x26c>)
 800103c:	681b      	ldr	r3, [r3, #0]
 800103e:	f003 0302 	and.w	r3, r3, #2
 8001042:	2b00      	cmp	r3, #0
 8001044:	d005      	beq.n	8001052 <HAL_RCC_OscConfig+0x176>
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	691b      	ldr	r3, [r3, #16]
 800104a:	2b01      	cmp	r3, #1
 800104c:	d001      	beq.n	8001052 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800104e:	2301      	movs	r3, #1
 8001050:	e1c0      	b.n	80013d4 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001052:	4b3d      	ldr	r3, [pc, #244]	; (8001148 <HAL_RCC_OscConfig+0x26c>)
 8001054:	681b      	ldr	r3, [r3, #0]
 8001056:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	695b      	ldr	r3, [r3, #20]
 800105e:	00db      	lsls	r3, r3, #3
 8001060:	4939      	ldr	r1, [pc, #228]	; (8001148 <HAL_RCC_OscConfig+0x26c>)
 8001062:	4313      	orrs	r3, r2
 8001064:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001066:	e03a      	b.n	80010de <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	691b      	ldr	r3, [r3, #16]
 800106c:	2b00      	cmp	r3, #0
 800106e:	d020      	beq.n	80010b2 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001070:	4b36      	ldr	r3, [pc, #216]	; (800114c <HAL_RCC_OscConfig+0x270>)
 8001072:	2201      	movs	r2, #1
 8001074:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001076:	f7ff fc61 	bl	800093c <HAL_GetTick>
 800107a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800107c:	e008      	b.n	8001090 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800107e:	f7ff fc5d 	bl	800093c <HAL_GetTick>
 8001082:	4602      	mov	r2, r0
 8001084:	693b      	ldr	r3, [r7, #16]
 8001086:	1ad3      	subs	r3, r2, r3
 8001088:	2b02      	cmp	r3, #2
 800108a:	d901      	bls.n	8001090 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 800108c:	2303      	movs	r3, #3
 800108e:	e1a1      	b.n	80013d4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001090:	4b2d      	ldr	r3, [pc, #180]	; (8001148 <HAL_RCC_OscConfig+0x26c>)
 8001092:	681b      	ldr	r3, [r3, #0]
 8001094:	f003 0302 	and.w	r3, r3, #2
 8001098:	2b00      	cmp	r3, #0
 800109a:	d0f0      	beq.n	800107e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800109c:	4b2a      	ldr	r3, [pc, #168]	; (8001148 <HAL_RCC_OscConfig+0x26c>)
 800109e:	681b      	ldr	r3, [r3, #0]
 80010a0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	695b      	ldr	r3, [r3, #20]
 80010a8:	00db      	lsls	r3, r3, #3
 80010aa:	4927      	ldr	r1, [pc, #156]	; (8001148 <HAL_RCC_OscConfig+0x26c>)
 80010ac:	4313      	orrs	r3, r2
 80010ae:	600b      	str	r3, [r1, #0]
 80010b0:	e015      	b.n	80010de <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80010b2:	4b26      	ldr	r3, [pc, #152]	; (800114c <HAL_RCC_OscConfig+0x270>)
 80010b4:	2200      	movs	r2, #0
 80010b6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80010b8:	f7ff fc40 	bl	800093c <HAL_GetTick>
 80010bc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80010be:	e008      	b.n	80010d2 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80010c0:	f7ff fc3c 	bl	800093c <HAL_GetTick>
 80010c4:	4602      	mov	r2, r0
 80010c6:	693b      	ldr	r3, [r7, #16]
 80010c8:	1ad3      	subs	r3, r2, r3
 80010ca:	2b02      	cmp	r3, #2
 80010cc:	d901      	bls.n	80010d2 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80010ce:	2303      	movs	r3, #3
 80010d0:	e180      	b.n	80013d4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80010d2:	4b1d      	ldr	r3, [pc, #116]	; (8001148 <HAL_RCC_OscConfig+0x26c>)
 80010d4:	681b      	ldr	r3, [r3, #0]
 80010d6:	f003 0302 	and.w	r3, r3, #2
 80010da:	2b00      	cmp	r3, #0
 80010dc:	d1f0      	bne.n	80010c0 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	681b      	ldr	r3, [r3, #0]
 80010e2:	f003 0308 	and.w	r3, r3, #8
 80010e6:	2b00      	cmp	r3, #0
 80010e8:	d03a      	beq.n	8001160 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	699b      	ldr	r3, [r3, #24]
 80010ee:	2b00      	cmp	r3, #0
 80010f0:	d019      	beq.n	8001126 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80010f2:	4b17      	ldr	r3, [pc, #92]	; (8001150 <HAL_RCC_OscConfig+0x274>)
 80010f4:	2201      	movs	r2, #1
 80010f6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80010f8:	f7ff fc20 	bl	800093c <HAL_GetTick>
 80010fc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80010fe:	e008      	b.n	8001112 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001100:	f7ff fc1c 	bl	800093c <HAL_GetTick>
 8001104:	4602      	mov	r2, r0
 8001106:	693b      	ldr	r3, [r7, #16]
 8001108:	1ad3      	subs	r3, r2, r3
 800110a:	2b02      	cmp	r3, #2
 800110c:	d901      	bls.n	8001112 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800110e:	2303      	movs	r3, #3
 8001110:	e160      	b.n	80013d4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001112:	4b0d      	ldr	r3, [pc, #52]	; (8001148 <HAL_RCC_OscConfig+0x26c>)
 8001114:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001116:	f003 0302 	and.w	r3, r3, #2
 800111a:	2b00      	cmp	r3, #0
 800111c:	d0f0      	beq.n	8001100 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800111e:	2001      	movs	r0, #1
 8001120:	f000 face 	bl	80016c0 <RCC_Delay>
 8001124:	e01c      	b.n	8001160 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001126:	4b0a      	ldr	r3, [pc, #40]	; (8001150 <HAL_RCC_OscConfig+0x274>)
 8001128:	2200      	movs	r2, #0
 800112a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800112c:	f7ff fc06 	bl	800093c <HAL_GetTick>
 8001130:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001132:	e00f      	b.n	8001154 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001134:	f7ff fc02 	bl	800093c <HAL_GetTick>
 8001138:	4602      	mov	r2, r0
 800113a:	693b      	ldr	r3, [r7, #16]
 800113c:	1ad3      	subs	r3, r2, r3
 800113e:	2b02      	cmp	r3, #2
 8001140:	d908      	bls.n	8001154 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001142:	2303      	movs	r3, #3
 8001144:	e146      	b.n	80013d4 <HAL_RCC_OscConfig+0x4f8>
 8001146:	bf00      	nop
 8001148:	40021000 	.word	0x40021000
 800114c:	42420000 	.word	0x42420000
 8001150:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001154:	4b92      	ldr	r3, [pc, #584]	; (80013a0 <HAL_RCC_OscConfig+0x4c4>)
 8001156:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001158:	f003 0302 	and.w	r3, r3, #2
 800115c:	2b00      	cmp	r3, #0
 800115e:	d1e9      	bne.n	8001134 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	681b      	ldr	r3, [r3, #0]
 8001164:	f003 0304 	and.w	r3, r3, #4
 8001168:	2b00      	cmp	r3, #0
 800116a:	f000 80a6 	beq.w	80012ba <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800116e:	2300      	movs	r3, #0
 8001170:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001172:	4b8b      	ldr	r3, [pc, #556]	; (80013a0 <HAL_RCC_OscConfig+0x4c4>)
 8001174:	69db      	ldr	r3, [r3, #28]
 8001176:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800117a:	2b00      	cmp	r3, #0
 800117c:	d10d      	bne.n	800119a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800117e:	4b88      	ldr	r3, [pc, #544]	; (80013a0 <HAL_RCC_OscConfig+0x4c4>)
 8001180:	69db      	ldr	r3, [r3, #28]
 8001182:	4a87      	ldr	r2, [pc, #540]	; (80013a0 <HAL_RCC_OscConfig+0x4c4>)
 8001184:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001188:	61d3      	str	r3, [r2, #28]
 800118a:	4b85      	ldr	r3, [pc, #532]	; (80013a0 <HAL_RCC_OscConfig+0x4c4>)
 800118c:	69db      	ldr	r3, [r3, #28]
 800118e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001192:	60bb      	str	r3, [r7, #8]
 8001194:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001196:	2301      	movs	r3, #1
 8001198:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800119a:	4b82      	ldr	r3, [pc, #520]	; (80013a4 <HAL_RCC_OscConfig+0x4c8>)
 800119c:	681b      	ldr	r3, [r3, #0]
 800119e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80011a2:	2b00      	cmp	r3, #0
 80011a4:	d118      	bne.n	80011d8 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80011a6:	4b7f      	ldr	r3, [pc, #508]	; (80013a4 <HAL_RCC_OscConfig+0x4c8>)
 80011a8:	681b      	ldr	r3, [r3, #0]
 80011aa:	4a7e      	ldr	r2, [pc, #504]	; (80013a4 <HAL_RCC_OscConfig+0x4c8>)
 80011ac:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80011b0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80011b2:	f7ff fbc3 	bl	800093c <HAL_GetTick>
 80011b6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80011b8:	e008      	b.n	80011cc <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80011ba:	f7ff fbbf 	bl	800093c <HAL_GetTick>
 80011be:	4602      	mov	r2, r0
 80011c0:	693b      	ldr	r3, [r7, #16]
 80011c2:	1ad3      	subs	r3, r2, r3
 80011c4:	2b64      	cmp	r3, #100	; 0x64
 80011c6:	d901      	bls.n	80011cc <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80011c8:	2303      	movs	r3, #3
 80011ca:	e103      	b.n	80013d4 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80011cc:	4b75      	ldr	r3, [pc, #468]	; (80013a4 <HAL_RCC_OscConfig+0x4c8>)
 80011ce:	681b      	ldr	r3, [r3, #0]
 80011d0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80011d4:	2b00      	cmp	r3, #0
 80011d6:	d0f0      	beq.n	80011ba <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	68db      	ldr	r3, [r3, #12]
 80011dc:	2b01      	cmp	r3, #1
 80011de:	d106      	bne.n	80011ee <HAL_RCC_OscConfig+0x312>
 80011e0:	4b6f      	ldr	r3, [pc, #444]	; (80013a0 <HAL_RCC_OscConfig+0x4c4>)
 80011e2:	6a1b      	ldr	r3, [r3, #32]
 80011e4:	4a6e      	ldr	r2, [pc, #440]	; (80013a0 <HAL_RCC_OscConfig+0x4c4>)
 80011e6:	f043 0301 	orr.w	r3, r3, #1
 80011ea:	6213      	str	r3, [r2, #32]
 80011ec:	e02d      	b.n	800124a <HAL_RCC_OscConfig+0x36e>
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	68db      	ldr	r3, [r3, #12]
 80011f2:	2b00      	cmp	r3, #0
 80011f4:	d10c      	bne.n	8001210 <HAL_RCC_OscConfig+0x334>
 80011f6:	4b6a      	ldr	r3, [pc, #424]	; (80013a0 <HAL_RCC_OscConfig+0x4c4>)
 80011f8:	6a1b      	ldr	r3, [r3, #32]
 80011fa:	4a69      	ldr	r2, [pc, #420]	; (80013a0 <HAL_RCC_OscConfig+0x4c4>)
 80011fc:	f023 0301 	bic.w	r3, r3, #1
 8001200:	6213      	str	r3, [r2, #32]
 8001202:	4b67      	ldr	r3, [pc, #412]	; (80013a0 <HAL_RCC_OscConfig+0x4c4>)
 8001204:	6a1b      	ldr	r3, [r3, #32]
 8001206:	4a66      	ldr	r2, [pc, #408]	; (80013a0 <HAL_RCC_OscConfig+0x4c4>)
 8001208:	f023 0304 	bic.w	r3, r3, #4
 800120c:	6213      	str	r3, [r2, #32]
 800120e:	e01c      	b.n	800124a <HAL_RCC_OscConfig+0x36e>
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	68db      	ldr	r3, [r3, #12]
 8001214:	2b05      	cmp	r3, #5
 8001216:	d10c      	bne.n	8001232 <HAL_RCC_OscConfig+0x356>
 8001218:	4b61      	ldr	r3, [pc, #388]	; (80013a0 <HAL_RCC_OscConfig+0x4c4>)
 800121a:	6a1b      	ldr	r3, [r3, #32]
 800121c:	4a60      	ldr	r2, [pc, #384]	; (80013a0 <HAL_RCC_OscConfig+0x4c4>)
 800121e:	f043 0304 	orr.w	r3, r3, #4
 8001222:	6213      	str	r3, [r2, #32]
 8001224:	4b5e      	ldr	r3, [pc, #376]	; (80013a0 <HAL_RCC_OscConfig+0x4c4>)
 8001226:	6a1b      	ldr	r3, [r3, #32]
 8001228:	4a5d      	ldr	r2, [pc, #372]	; (80013a0 <HAL_RCC_OscConfig+0x4c4>)
 800122a:	f043 0301 	orr.w	r3, r3, #1
 800122e:	6213      	str	r3, [r2, #32]
 8001230:	e00b      	b.n	800124a <HAL_RCC_OscConfig+0x36e>
 8001232:	4b5b      	ldr	r3, [pc, #364]	; (80013a0 <HAL_RCC_OscConfig+0x4c4>)
 8001234:	6a1b      	ldr	r3, [r3, #32]
 8001236:	4a5a      	ldr	r2, [pc, #360]	; (80013a0 <HAL_RCC_OscConfig+0x4c4>)
 8001238:	f023 0301 	bic.w	r3, r3, #1
 800123c:	6213      	str	r3, [r2, #32]
 800123e:	4b58      	ldr	r3, [pc, #352]	; (80013a0 <HAL_RCC_OscConfig+0x4c4>)
 8001240:	6a1b      	ldr	r3, [r3, #32]
 8001242:	4a57      	ldr	r2, [pc, #348]	; (80013a0 <HAL_RCC_OscConfig+0x4c4>)
 8001244:	f023 0304 	bic.w	r3, r3, #4
 8001248:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	68db      	ldr	r3, [r3, #12]
 800124e:	2b00      	cmp	r3, #0
 8001250:	d015      	beq.n	800127e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001252:	f7ff fb73 	bl	800093c <HAL_GetTick>
 8001256:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001258:	e00a      	b.n	8001270 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800125a:	f7ff fb6f 	bl	800093c <HAL_GetTick>
 800125e:	4602      	mov	r2, r0
 8001260:	693b      	ldr	r3, [r7, #16]
 8001262:	1ad3      	subs	r3, r2, r3
 8001264:	f241 3288 	movw	r2, #5000	; 0x1388
 8001268:	4293      	cmp	r3, r2
 800126a:	d901      	bls.n	8001270 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 800126c:	2303      	movs	r3, #3
 800126e:	e0b1      	b.n	80013d4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001270:	4b4b      	ldr	r3, [pc, #300]	; (80013a0 <HAL_RCC_OscConfig+0x4c4>)
 8001272:	6a1b      	ldr	r3, [r3, #32]
 8001274:	f003 0302 	and.w	r3, r3, #2
 8001278:	2b00      	cmp	r3, #0
 800127a:	d0ee      	beq.n	800125a <HAL_RCC_OscConfig+0x37e>
 800127c:	e014      	b.n	80012a8 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800127e:	f7ff fb5d 	bl	800093c <HAL_GetTick>
 8001282:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001284:	e00a      	b.n	800129c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001286:	f7ff fb59 	bl	800093c <HAL_GetTick>
 800128a:	4602      	mov	r2, r0
 800128c:	693b      	ldr	r3, [r7, #16]
 800128e:	1ad3      	subs	r3, r2, r3
 8001290:	f241 3288 	movw	r2, #5000	; 0x1388
 8001294:	4293      	cmp	r3, r2
 8001296:	d901      	bls.n	800129c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001298:	2303      	movs	r3, #3
 800129a:	e09b      	b.n	80013d4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800129c:	4b40      	ldr	r3, [pc, #256]	; (80013a0 <HAL_RCC_OscConfig+0x4c4>)
 800129e:	6a1b      	ldr	r3, [r3, #32]
 80012a0:	f003 0302 	and.w	r3, r3, #2
 80012a4:	2b00      	cmp	r3, #0
 80012a6:	d1ee      	bne.n	8001286 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80012a8:	7dfb      	ldrb	r3, [r7, #23]
 80012aa:	2b01      	cmp	r3, #1
 80012ac:	d105      	bne.n	80012ba <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80012ae:	4b3c      	ldr	r3, [pc, #240]	; (80013a0 <HAL_RCC_OscConfig+0x4c4>)
 80012b0:	69db      	ldr	r3, [r3, #28]
 80012b2:	4a3b      	ldr	r2, [pc, #236]	; (80013a0 <HAL_RCC_OscConfig+0x4c4>)
 80012b4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80012b8:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	69db      	ldr	r3, [r3, #28]
 80012be:	2b00      	cmp	r3, #0
 80012c0:	f000 8087 	beq.w	80013d2 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80012c4:	4b36      	ldr	r3, [pc, #216]	; (80013a0 <HAL_RCC_OscConfig+0x4c4>)
 80012c6:	685b      	ldr	r3, [r3, #4]
 80012c8:	f003 030c 	and.w	r3, r3, #12
 80012cc:	2b08      	cmp	r3, #8
 80012ce:	d061      	beq.n	8001394 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	69db      	ldr	r3, [r3, #28]
 80012d4:	2b02      	cmp	r3, #2
 80012d6:	d146      	bne.n	8001366 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80012d8:	4b33      	ldr	r3, [pc, #204]	; (80013a8 <HAL_RCC_OscConfig+0x4cc>)
 80012da:	2200      	movs	r2, #0
 80012dc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80012de:	f7ff fb2d 	bl	800093c <HAL_GetTick>
 80012e2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80012e4:	e008      	b.n	80012f8 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80012e6:	f7ff fb29 	bl	800093c <HAL_GetTick>
 80012ea:	4602      	mov	r2, r0
 80012ec:	693b      	ldr	r3, [r7, #16]
 80012ee:	1ad3      	subs	r3, r2, r3
 80012f0:	2b02      	cmp	r3, #2
 80012f2:	d901      	bls.n	80012f8 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80012f4:	2303      	movs	r3, #3
 80012f6:	e06d      	b.n	80013d4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80012f8:	4b29      	ldr	r3, [pc, #164]	; (80013a0 <HAL_RCC_OscConfig+0x4c4>)
 80012fa:	681b      	ldr	r3, [r3, #0]
 80012fc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001300:	2b00      	cmp	r3, #0
 8001302:	d1f0      	bne.n	80012e6 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	6a1b      	ldr	r3, [r3, #32]
 8001308:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800130c:	d108      	bne.n	8001320 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800130e:	4b24      	ldr	r3, [pc, #144]	; (80013a0 <HAL_RCC_OscConfig+0x4c4>)
 8001310:	685b      	ldr	r3, [r3, #4]
 8001312:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	689b      	ldr	r3, [r3, #8]
 800131a:	4921      	ldr	r1, [pc, #132]	; (80013a0 <HAL_RCC_OscConfig+0x4c4>)
 800131c:	4313      	orrs	r3, r2
 800131e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001320:	4b1f      	ldr	r3, [pc, #124]	; (80013a0 <HAL_RCC_OscConfig+0x4c4>)
 8001322:	685b      	ldr	r3, [r3, #4]
 8001324:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	6a19      	ldr	r1, [r3, #32]
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001330:	430b      	orrs	r3, r1
 8001332:	491b      	ldr	r1, [pc, #108]	; (80013a0 <HAL_RCC_OscConfig+0x4c4>)
 8001334:	4313      	orrs	r3, r2
 8001336:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001338:	4b1b      	ldr	r3, [pc, #108]	; (80013a8 <HAL_RCC_OscConfig+0x4cc>)
 800133a:	2201      	movs	r2, #1
 800133c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800133e:	f7ff fafd 	bl	800093c <HAL_GetTick>
 8001342:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001344:	e008      	b.n	8001358 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001346:	f7ff faf9 	bl	800093c <HAL_GetTick>
 800134a:	4602      	mov	r2, r0
 800134c:	693b      	ldr	r3, [r7, #16]
 800134e:	1ad3      	subs	r3, r2, r3
 8001350:	2b02      	cmp	r3, #2
 8001352:	d901      	bls.n	8001358 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001354:	2303      	movs	r3, #3
 8001356:	e03d      	b.n	80013d4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001358:	4b11      	ldr	r3, [pc, #68]	; (80013a0 <HAL_RCC_OscConfig+0x4c4>)
 800135a:	681b      	ldr	r3, [r3, #0]
 800135c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001360:	2b00      	cmp	r3, #0
 8001362:	d0f0      	beq.n	8001346 <HAL_RCC_OscConfig+0x46a>
 8001364:	e035      	b.n	80013d2 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001366:	4b10      	ldr	r3, [pc, #64]	; (80013a8 <HAL_RCC_OscConfig+0x4cc>)
 8001368:	2200      	movs	r2, #0
 800136a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800136c:	f7ff fae6 	bl	800093c <HAL_GetTick>
 8001370:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001372:	e008      	b.n	8001386 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001374:	f7ff fae2 	bl	800093c <HAL_GetTick>
 8001378:	4602      	mov	r2, r0
 800137a:	693b      	ldr	r3, [r7, #16]
 800137c:	1ad3      	subs	r3, r2, r3
 800137e:	2b02      	cmp	r3, #2
 8001380:	d901      	bls.n	8001386 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001382:	2303      	movs	r3, #3
 8001384:	e026      	b.n	80013d4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001386:	4b06      	ldr	r3, [pc, #24]	; (80013a0 <HAL_RCC_OscConfig+0x4c4>)
 8001388:	681b      	ldr	r3, [r3, #0]
 800138a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800138e:	2b00      	cmp	r3, #0
 8001390:	d1f0      	bne.n	8001374 <HAL_RCC_OscConfig+0x498>
 8001392:	e01e      	b.n	80013d2 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	69db      	ldr	r3, [r3, #28]
 8001398:	2b01      	cmp	r3, #1
 800139a:	d107      	bne.n	80013ac <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 800139c:	2301      	movs	r3, #1
 800139e:	e019      	b.n	80013d4 <HAL_RCC_OscConfig+0x4f8>
 80013a0:	40021000 	.word	0x40021000
 80013a4:	40007000 	.word	0x40007000
 80013a8:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80013ac:	4b0b      	ldr	r3, [pc, #44]	; (80013dc <HAL_RCC_OscConfig+0x500>)
 80013ae:	685b      	ldr	r3, [r3, #4]
 80013b0:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80013b2:	68fb      	ldr	r3, [r7, #12]
 80013b4:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	6a1b      	ldr	r3, [r3, #32]
 80013bc:	429a      	cmp	r2, r3
 80013be:	d106      	bne.n	80013ce <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80013c0:	68fb      	ldr	r3, [r7, #12]
 80013c2:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80013ca:	429a      	cmp	r2, r3
 80013cc:	d001      	beq.n	80013d2 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80013ce:	2301      	movs	r3, #1
 80013d0:	e000      	b.n	80013d4 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80013d2:	2300      	movs	r3, #0
}
 80013d4:	4618      	mov	r0, r3
 80013d6:	3718      	adds	r7, #24
 80013d8:	46bd      	mov	sp, r7
 80013da:	bd80      	pop	{r7, pc}
 80013dc:	40021000 	.word	0x40021000

080013e0 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80013e0:	b580      	push	{r7, lr}
 80013e2:	b084      	sub	sp, #16
 80013e4:	af00      	add	r7, sp, #0
 80013e6:	6078      	str	r0, [r7, #4]
 80013e8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	2b00      	cmp	r3, #0
 80013ee:	d101      	bne.n	80013f4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80013f0:	2301      	movs	r3, #1
 80013f2:	e0d0      	b.n	8001596 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80013f4:	4b6a      	ldr	r3, [pc, #424]	; (80015a0 <HAL_RCC_ClockConfig+0x1c0>)
 80013f6:	681b      	ldr	r3, [r3, #0]
 80013f8:	f003 0307 	and.w	r3, r3, #7
 80013fc:	683a      	ldr	r2, [r7, #0]
 80013fe:	429a      	cmp	r2, r3
 8001400:	d910      	bls.n	8001424 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001402:	4b67      	ldr	r3, [pc, #412]	; (80015a0 <HAL_RCC_ClockConfig+0x1c0>)
 8001404:	681b      	ldr	r3, [r3, #0]
 8001406:	f023 0207 	bic.w	r2, r3, #7
 800140a:	4965      	ldr	r1, [pc, #404]	; (80015a0 <HAL_RCC_ClockConfig+0x1c0>)
 800140c:	683b      	ldr	r3, [r7, #0]
 800140e:	4313      	orrs	r3, r2
 8001410:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001412:	4b63      	ldr	r3, [pc, #396]	; (80015a0 <HAL_RCC_ClockConfig+0x1c0>)
 8001414:	681b      	ldr	r3, [r3, #0]
 8001416:	f003 0307 	and.w	r3, r3, #7
 800141a:	683a      	ldr	r2, [r7, #0]
 800141c:	429a      	cmp	r2, r3
 800141e:	d001      	beq.n	8001424 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001420:	2301      	movs	r3, #1
 8001422:	e0b8      	b.n	8001596 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	681b      	ldr	r3, [r3, #0]
 8001428:	f003 0302 	and.w	r3, r3, #2
 800142c:	2b00      	cmp	r3, #0
 800142e:	d020      	beq.n	8001472 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	681b      	ldr	r3, [r3, #0]
 8001434:	f003 0304 	and.w	r3, r3, #4
 8001438:	2b00      	cmp	r3, #0
 800143a:	d005      	beq.n	8001448 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800143c:	4b59      	ldr	r3, [pc, #356]	; (80015a4 <HAL_RCC_ClockConfig+0x1c4>)
 800143e:	685b      	ldr	r3, [r3, #4]
 8001440:	4a58      	ldr	r2, [pc, #352]	; (80015a4 <HAL_RCC_ClockConfig+0x1c4>)
 8001442:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001446:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	681b      	ldr	r3, [r3, #0]
 800144c:	f003 0308 	and.w	r3, r3, #8
 8001450:	2b00      	cmp	r3, #0
 8001452:	d005      	beq.n	8001460 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001454:	4b53      	ldr	r3, [pc, #332]	; (80015a4 <HAL_RCC_ClockConfig+0x1c4>)
 8001456:	685b      	ldr	r3, [r3, #4]
 8001458:	4a52      	ldr	r2, [pc, #328]	; (80015a4 <HAL_RCC_ClockConfig+0x1c4>)
 800145a:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800145e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001460:	4b50      	ldr	r3, [pc, #320]	; (80015a4 <HAL_RCC_ClockConfig+0x1c4>)
 8001462:	685b      	ldr	r3, [r3, #4]
 8001464:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	689b      	ldr	r3, [r3, #8]
 800146c:	494d      	ldr	r1, [pc, #308]	; (80015a4 <HAL_RCC_ClockConfig+0x1c4>)
 800146e:	4313      	orrs	r3, r2
 8001470:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	681b      	ldr	r3, [r3, #0]
 8001476:	f003 0301 	and.w	r3, r3, #1
 800147a:	2b00      	cmp	r3, #0
 800147c:	d040      	beq.n	8001500 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	685b      	ldr	r3, [r3, #4]
 8001482:	2b01      	cmp	r3, #1
 8001484:	d107      	bne.n	8001496 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001486:	4b47      	ldr	r3, [pc, #284]	; (80015a4 <HAL_RCC_ClockConfig+0x1c4>)
 8001488:	681b      	ldr	r3, [r3, #0]
 800148a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800148e:	2b00      	cmp	r3, #0
 8001490:	d115      	bne.n	80014be <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001492:	2301      	movs	r3, #1
 8001494:	e07f      	b.n	8001596 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	685b      	ldr	r3, [r3, #4]
 800149a:	2b02      	cmp	r3, #2
 800149c:	d107      	bne.n	80014ae <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800149e:	4b41      	ldr	r3, [pc, #260]	; (80015a4 <HAL_RCC_ClockConfig+0x1c4>)
 80014a0:	681b      	ldr	r3, [r3, #0]
 80014a2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80014a6:	2b00      	cmp	r3, #0
 80014a8:	d109      	bne.n	80014be <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80014aa:	2301      	movs	r3, #1
 80014ac:	e073      	b.n	8001596 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80014ae:	4b3d      	ldr	r3, [pc, #244]	; (80015a4 <HAL_RCC_ClockConfig+0x1c4>)
 80014b0:	681b      	ldr	r3, [r3, #0]
 80014b2:	f003 0302 	and.w	r3, r3, #2
 80014b6:	2b00      	cmp	r3, #0
 80014b8:	d101      	bne.n	80014be <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80014ba:	2301      	movs	r3, #1
 80014bc:	e06b      	b.n	8001596 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80014be:	4b39      	ldr	r3, [pc, #228]	; (80015a4 <HAL_RCC_ClockConfig+0x1c4>)
 80014c0:	685b      	ldr	r3, [r3, #4]
 80014c2:	f023 0203 	bic.w	r2, r3, #3
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	685b      	ldr	r3, [r3, #4]
 80014ca:	4936      	ldr	r1, [pc, #216]	; (80015a4 <HAL_RCC_ClockConfig+0x1c4>)
 80014cc:	4313      	orrs	r3, r2
 80014ce:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80014d0:	f7ff fa34 	bl	800093c <HAL_GetTick>
 80014d4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80014d6:	e00a      	b.n	80014ee <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80014d8:	f7ff fa30 	bl	800093c <HAL_GetTick>
 80014dc:	4602      	mov	r2, r0
 80014de:	68fb      	ldr	r3, [r7, #12]
 80014e0:	1ad3      	subs	r3, r2, r3
 80014e2:	f241 3288 	movw	r2, #5000	; 0x1388
 80014e6:	4293      	cmp	r3, r2
 80014e8:	d901      	bls.n	80014ee <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80014ea:	2303      	movs	r3, #3
 80014ec:	e053      	b.n	8001596 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80014ee:	4b2d      	ldr	r3, [pc, #180]	; (80015a4 <HAL_RCC_ClockConfig+0x1c4>)
 80014f0:	685b      	ldr	r3, [r3, #4]
 80014f2:	f003 020c 	and.w	r2, r3, #12
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	685b      	ldr	r3, [r3, #4]
 80014fa:	009b      	lsls	r3, r3, #2
 80014fc:	429a      	cmp	r2, r3
 80014fe:	d1eb      	bne.n	80014d8 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001500:	4b27      	ldr	r3, [pc, #156]	; (80015a0 <HAL_RCC_ClockConfig+0x1c0>)
 8001502:	681b      	ldr	r3, [r3, #0]
 8001504:	f003 0307 	and.w	r3, r3, #7
 8001508:	683a      	ldr	r2, [r7, #0]
 800150a:	429a      	cmp	r2, r3
 800150c:	d210      	bcs.n	8001530 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800150e:	4b24      	ldr	r3, [pc, #144]	; (80015a0 <HAL_RCC_ClockConfig+0x1c0>)
 8001510:	681b      	ldr	r3, [r3, #0]
 8001512:	f023 0207 	bic.w	r2, r3, #7
 8001516:	4922      	ldr	r1, [pc, #136]	; (80015a0 <HAL_RCC_ClockConfig+0x1c0>)
 8001518:	683b      	ldr	r3, [r7, #0]
 800151a:	4313      	orrs	r3, r2
 800151c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800151e:	4b20      	ldr	r3, [pc, #128]	; (80015a0 <HAL_RCC_ClockConfig+0x1c0>)
 8001520:	681b      	ldr	r3, [r3, #0]
 8001522:	f003 0307 	and.w	r3, r3, #7
 8001526:	683a      	ldr	r2, [r7, #0]
 8001528:	429a      	cmp	r2, r3
 800152a:	d001      	beq.n	8001530 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 800152c:	2301      	movs	r3, #1
 800152e:	e032      	b.n	8001596 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	681b      	ldr	r3, [r3, #0]
 8001534:	f003 0304 	and.w	r3, r3, #4
 8001538:	2b00      	cmp	r3, #0
 800153a:	d008      	beq.n	800154e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800153c:	4b19      	ldr	r3, [pc, #100]	; (80015a4 <HAL_RCC_ClockConfig+0x1c4>)
 800153e:	685b      	ldr	r3, [r3, #4]
 8001540:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	68db      	ldr	r3, [r3, #12]
 8001548:	4916      	ldr	r1, [pc, #88]	; (80015a4 <HAL_RCC_ClockConfig+0x1c4>)
 800154a:	4313      	orrs	r3, r2
 800154c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	681b      	ldr	r3, [r3, #0]
 8001552:	f003 0308 	and.w	r3, r3, #8
 8001556:	2b00      	cmp	r3, #0
 8001558:	d009      	beq.n	800156e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800155a:	4b12      	ldr	r3, [pc, #72]	; (80015a4 <HAL_RCC_ClockConfig+0x1c4>)
 800155c:	685b      	ldr	r3, [r3, #4]
 800155e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	691b      	ldr	r3, [r3, #16]
 8001566:	00db      	lsls	r3, r3, #3
 8001568:	490e      	ldr	r1, [pc, #56]	; (80015a4 <HAL_RCC_ClockConfig+0x1c4>)
 800156a:	4313      	orrs	r3, r2
 800156c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800156e:	f000 f821 	bl	80015b4 <HAL_RCC_GetSysClockFreq>
 8001572:	4602      	mov	r2, r0
 8001574:	4b0b      	ldr	r3, [pc, #44]	; (80015a4 <HAL_RCC_ClockConfig+0x1c4>)
 8001576:	685b      	ldr	r3, [r3, #4]
 8001578:	091b      	lsrs	r3, r3, #4
 800157a:	f003 030f 	and.w	r3, r3, #15
 800157e:	490a      	ldr	r1, [pc, #40]	; (80015a8 <HAL_RCC_ClockConfig+0x1c8>)
 8001580:	5ccb      	ldrb	r3, [r1, r3]
 8001582:	fa22 f303 	lsr.w	r3, r2, r3
 8001586:	4a09      	ldr	r2, [pc, #36]	; (80015ac <HAL_RCC_ClockConfig+0x1cc>)
 8001588:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800158a:	4b09      	ldr	r3, [pc, #36]	; (80015b0 <HAL_RCC_ClockConfig+0x1d0>)
 800158c:	681b      	ldr	r3, [r3, #0]
 800158e:	4618      	mov	r0, r3
 8001590:	f7ff f992 	bl	80008b8 <HAL_InitTick>

  return HAL_OK;
 8001594:	2300      	movs	r3, #0
}
 8001596:	4618      	mov	r0, r3
 8001598:	3710      	adds	r7, #16
 800159a:	46bd      	mov	sp, r7
 800159c:	bd80      	pop	{r7, pc}
 800159e:	bf00      	nop
 80015a0:	40022000 	.word	0x40022000
 80015a4:	40021000 	.word	0x40021000
 80015a8:	08004414 	.word	0x08004414
 80015ac:	20000004 	.word	0x20000004
 80015b0:	20000008 	.word	0x20000008

080015b4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80015b4:	b480      	push	{r7}
 80015b6:	b087      	sub	sp, #28
 80015b8:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80015ba:	2300      	movs	r3, #0
 80015bc:	60fb      	str	r3, [r7, #12]
 80015be:	2300      	movs	r3, #0
 80015c0:	60bb      	str	r3, [r7, #8]
 80015c2:	2300      	movs	r3, #0
 80015c4:	617b      	str	r3, [r7, #20]
 80015c6:	2300      	movs	r3, #0
 80015c8:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80015ca:	2300      	movs	r3, #0
 80015cc:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80015ce:	4b1e      	ldr	r3, [pc, #120]	; (8001648 <HAL_RCC_GetSysClockFreq+0x94>)
 80015d0:	685b      	ldr	r3, [r3, #4]
 80015d2:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80015d4:	68fb      	ldr	r3, [r7, #12]
 80015d6:	f003 030c 	and.w	r3, r3, #12
 80015da:	2b04      	cmp	r3, #4
 80015dc:	d002      	beq.n	80015e4 <HAL_RCC_GetSysClockFreq+0x30>
 80015de:	2b08      	cmp	r3, #8
 80015e0:	d003      	beq.n	80015ea <HAL_RCC_GetSysClockFreq+0x36>
 80015e2:	e027      	b.n	8001634 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80015e4:	4b19      	ldr	r3, [pc, #100]	; (800164c <HAL_RCC_GetSysClockFreq+0x98>)
 80015e6:	613b      	str	r3, [r7, #16]
      break;
 80015e8:	e027      	b.n	800163a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80015ea:	68fb      	ldr	r3, [r7, #12]
 80015ec:	0c9b      	lsrs	r3, r3, #18
 80015ee:	f003 030f 	and.w	r3, r3, #15
 80015f2:	4a17      	ldr	r2, [pc, #92]	; (8001650 <HAL_RCC_GetSysClockFreq+0x9c>)
 80015f4:	5cd3      	ldrb	r3, [r2, r3]
 80015f6:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80015f8:	68fb      	ldr	r3, [r7, #12]
 80015fa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80015fe:	2b00      	cmp	r3, #0
 8001600:	d010      	beq.n	8001624 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001602:	4b11      	ldr	r3, [pc, #68]	; (8001648 <HAL_RCC_GetSysClockFreq+0x94>)
 8001604:	685b      	ldr	r3, [r3, #4]
 8001606:	0c5b      	lsrs	r3, r3, #17
 8001608:	f003 0301 	and.w	r3, r3, #1
 800160c:	4a11      	ldr	r2, [pc, #68]	; (8001654 <HAL_RCC_GetSysClockFreq+0xa0>)
 800160e:	5cd3      	ldrb	r3, [r2, r3]
 8001610:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	4a0d      	ldr	r2, [pc, #52]	; (800164c <HAL_RCC_GetSysClockFreq+0x98>)
 8001616:	fb03 f202 	mul.w	r2, r3, r2
 800161a:	68bb      	ldr	r3, [r7, #8]
 800161c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001620:	617b      	str	r3, [r7, #20]
 8001622:	e004      	b.n	800162e <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	4a0c      	ldr	r2, [pc, #48]	; (8001658 <HAL_RCC_GetSysClockFreq+0xa4>)
 8001628:	fb02 f303 	mul.w	r3, r2, r3
 800162c:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 800162e:	697b      	ldr	r3, [r7, #20]
 8001630:	613b      	str	r3, [r7, #16]
      break;
 8001632:	e002      	b.n	800163a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001634:	4b05      	ldr	r3, [pc, #20]	; (800164c <HAL_RCC_GetSysClockFreq+0x98>)
 8001636:	613b      	str	r3, [r7, #16]
      break;
 8001638:	bf00      	nop
    }
  }
  return sysclockfreq;
 800163a:	693b      	ldr	r3, [r7, #16]
}
 800163c:	4618      	mov	r0, r3
 800163e:	371c      	adds	r7, #28
 8001640:	46bd      	mov	sp, r7
 8001642:	bc80      	pop	{r7}
 8001644:	4770      	bx	lr
 8001646:	bf00      	nop
 8001648:	40021000 	.word	0x40021000
 800164c:	007a1200 	.word	0x007a1200
 8001650:	0800442c 	.word	0x0800442c
 8001654:	0800443c 	.word	0x0800443c
 8001658:	003d0900 	.word	0x003d0900

0800165c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800165c:	b480      	push	{r7}
 800165e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001660:	4b02      	ldr	r3, [pc, #8]	; (800166c <HAL_RCC_GetHCLKFreq+0x10>)
 8001662:	681b      	ldr	r3, [r3, #0]
}
 8001664:	4618      	mov	r0, r3
 8001666:	46bd      	mov	sp, r7
 8001668:	bc80      	pop	{r7}
 800166a:	4770      	bx	lr
 800166c:	20000004 	.word	0x20000004

08001670 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001670:	b580      	push	{r7, lr}
 8001672:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001674:	f7ff fff2 	bl	800165c <HAL_RCC_GetHCLKFreq>
 8001678:	4602      	mov	r2, r0
 800167a:	4b05      	ldr	r3, [pc, #20]	; (8001690 <HAL_RCC_GetPCLK1Freq+0x20>)
 800167c:	685b      	ldr	r3, [r3, #4]
 800167e:	0a1b      	lsrs	r3, r3, #8
 8001680:	f003 0307 	and.w	r3, r3, #7
 8001684:	4903      	ldr	r1, [pc, #12]	; (8001694 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001686:	5ccb      	ldrb	r3, [r1, r3]
 8001688:	fa22 f303 	lsr.w	r3, r2, r3
}
 800168c:	4618      	mov	r0, r3
 800168e:	bd80      	pop	{r7, pc}
 8001690:	40021000 	.word	0x40021000
 8001694:	08004424 	.word	0x08004424

08001698 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001698:	b580      	push	{r7, lr}
 800169a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800169c:	f7ff ffde 	bl	800165c <HAL_RCC_GetHCLKFreq>
 80016a0:	4602      	mov	r2, r0
 80016a2:	4b05      	ldr	r3, [pc, #20]	; (80016b8 <HAL_RCC_GetPCLK2Freq+0x20>)
 80016a4:	685b      	ldr	r3, [r3, #4]
 80016a6:	0adb      	lsrs	r3, r3, #11
 80016a8:	f003 0307 	and.w	r3, r3, #7
 80016ac:	4903      	ldr	r1, [pc, #12]	; (80016bc <HAL_RCC_GetPCLK2Freq+0x24>)
 80016ae:	5ccb      	ldrb	r3, [r1, r3]
 80016b0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80016b4:	4618      	mov	r0, r3
 80016b6:	bd80      	pop	{r7, pc}
 80016b8:	40021000 	.word	0x40021000
 80016bc:	08004424 	.word	0x08004424

080016c0 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80016c0:	b480      	push	{r7}
 80016c2:	b085      	sub	sp, #20
 80016c4:	af00      	add	r7, sp, #0
 80016c6:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80016c8:	4b0a      	ldr	r3, [pc, #40]	; (80016f4 <RCC_Delay+0x34>)
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	4a0a      	ldr	r2, [pc, #40]	; (80016f8 <RCC_Delay+0x38>)
 80016ce:	fba2 2303 	umull	r2, r3, r2, r3
 80016d2:	0a5b      	lsrs	r3, r3, #9
 80016d4:	687a      	ldr	r2, [r7, #4]
 80016d6:	fb02 f303 	mul.w	r3, r2, r3
 80016da:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80016dc:	bf00      	nop
  }
  while (Delay --);
 80016de:	68fb      	ldr	r3, [r7, #12]
 80016e0:	1e5a      	subs	r2, r3, #1
 80016e2:	60fa      	str	r2, [r7, #12]
 80016e4:	2b00      	cmp	r3, #0
 80016e6:	d1f9      	bne.n	80016dc <RCC_Delay+0x1c>
}
 80016e8:	bf00      	nop
 80016ea:	bf00      	nop
 80016ec:	3714      	adds	r7, #20
 80016ee:	46bd      	mov	sp, r7
 80016f0:	bc80      	pop	{r7}
 80016f2:	4770      	bx	lr
 80016f4:	20000004 	.word	0x20000004
 80016f8:	10624dd3 	.word	0x10624dd3

080016fc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80016fc:	b580      	push	{r7, lr}
 80016fe:	b082      	sub	sp, #8
 8001700:	af00      	add	r7, sp, #0
 8001702:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	2b00      	cmp	r3, #0
 8001708:	d101      	bne.n	800170e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800170a:	2301      	movs	r3, #1
 800170c:	e041      	b.n	8001792 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001714:	b2db      	uxtb	r3, r3
 8001716:	2b00      	cmp	r3, #0
 8001718:	d106      	bne.n	8001728 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	2200      	movs	r2, #0
 800171e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001722:	6878      	ldr	r0, [r7, #4]
 8001724:	f7fe ff34 	bl	8000590 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	2202      	movs	r2, #2
 800172c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	681a      	ldr	r2, [r3, #0]
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	3304      	adds	r3, #4
 8001738:	4619      	mov	r1, r3
 800173a:	4610      	mov	r0, r2
 800173c:	f000 f976 	bl	8001a2c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	2201      	movs	r2, #1
 8001744:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	2201      	movs	r2, #1
 800174c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	2201      	movs	r2, #1
 8001754:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	2201      	movs	r2, #1
 800175c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	2201      	movs	r2, #1
 8001764:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	2201      	movs	r2, #1
 800176c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	2201      	movs	r2, #1
 8001774:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	2201      	movs	r2, #1
 800177c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	2201      	movs	r2, #1
 8001784:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	2201      	movs	r2, #1
 800178c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001790:	2300      	movs	r3, #0
}
 8001792:	4618      	mov	r0, r3
 8001794:	3708      	adds	r7, #8
 8001796:	46bd      	mov	sp, r7
 8001798:	bd80      	pop	{r7, pc}
	...

0800179c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800179c:	b480      	push	{r7}
 800179e:	b085      	sub	sp, #20
 80017a0:	af00      	add	r7, sp, #0
 80017a2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80017aa:	b2db      	uxtb	r3, r3
 80017ac:	2b01      	cmp	r3, #1
 80017ae:	d001      	beq.n	80017b4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80017b0:	2301      	movs	r3, #1
 80017b2:	e03a      	b.n	800182a <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	2202      	movs	r2, #2
 80017b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	68da      	ldr	r2, [r3, #12]
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	681b      	ldr	r3, [r3, #0]
 80017c6:	f042 0201 	orr.w	r2, r2, #1
 80017ca:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	4a18      	ldr	r2, [pc, #96]	; (8001834 <HAL_TIM_Base_Start_IT+0x98>)
 80017d2:	4293      	cmp	r3, r2
 80017d4:	d00e      	beq.n	80017f4 <HAL_TIM_Base_Start_IT+0x58>
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80017de:	d009      	beq.n	80017f4 <HAL_TIM_Base_Start_IT+0x58>
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	4a14      	ldr	r2, [pc, #80]	; (8001838 <HAL_TIM_Base_Start_IT+0x9c>)
 80017e6:	4293      	cmp	r3, r2
 80017e8:	d004      	beq.n	80017f4 <HAL_TIM_Base_Start_IT+0x58>
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	681b      	ldr	r3, [r3, #0]
 80017ee:	4a13      	ldr	r2, [pc, #76]	; (800183c <HAL_TIM_Base_Start_IT+0xa0>)
 80017f0:	4293      	cmp	r3, r2
 80017f2:	d111      	bne.n	8001818 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	689b      	ldr	r3, [r3, #8]
 80017fa:	f003 0307 	and.w	r3, r3, #7
 80017fe:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001800:	68fb      	ldr	r3, [r7, #12]
 8001802:	2b06      	cmp	r3, #6
 8001804:	d010      	beq.n	8001828 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	681a      	ldr	r2, [r3, #0]
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	f042 0201 	orr.w	r2, r2, #1
 8001814:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001816:	e007      	b.n	8001828 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	681a      	ldr	r2, [r3, #0]
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	f042 0201 	orr.w	r2, r2, #1
 8001826:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001828:	2300      	movs	r3, #0
}
 800182a:	4618      	mov	r0, r3
 800182c:	3714      	adds	r7, #20
 800182e:	46bd      	mov	sp, r7
 8001830:	bc80      	pop	{r7}
 8001832:	4770      	bx	lr
 8001834:	40012c00 	.word	0x40012c00
 8001838:	40000400 	.word	0x40000400
 800183c:	40000800 	.word	0x40000800

08001840 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8001840:	b480      	push	{r7}
 8001842:	b083      	sub	sp, #12
 8001844:	af00      	add	r7, sp, #0
 8001846:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	68da      	ldr	r2, [r3, #12]
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	681b      	ldr	r3, [r3, #0]
 8001852:	f022 0201 	bic.w	r2, r2, #1
 8001856:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	6a1a      	ldr	r2, [r3, #32]
 800185e:	f241 1311 	movw	r3, #4369	; 0x1111
 8001862:	4013      	ands	r3, r2
 8001864:	2b00      	cmp	r3, #0
 8001866:	d10f      	bne.n	8001888 <HAL_TIM_Base_Stop_IT+0x48>
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	6a1a      	ldr	r2, [r3, #32]
 800186e:	f240 4344 	movw	r3, #1092	; 0x444
 8001872:	4013      	ands	r3, r2
 8001874:	2b00      	cmp	r3, #0
 8001876:	d107      	bne.n	8001888 <HAL_TIM_Base_Stop_IT+0x48>
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	681a      	ldr	r2, [r3, #0]
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	f022 0201 	bic.w	r2, r2, #1
 8001886:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	2201      	movs	r2, #1
 800188c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8001890:	2300      	movs	r3, #0
}
 8001892:	4618      	mov	r0, r3
 8001894:	370c      	adds	r7, #12
 8001896:	46bd      	mov	sp, r7
 8001898:	bc80      	pop	{r7}
 800189a:	4770      	bx	lr

0800189c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800189c:	b580      	push	{r7, lr}
 800189e:	b084      	sub	sp, #16
 80018a0:	af00      	add	r7, sp, #0
 80018a2:	6078      	str	r0, [r7, #4]
 80018a4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80018a6:	2300      	movs	r3, #0
 80018a8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80018b0:	2b01      	cmp	r3, #1
 80018b2:	d101      	bne.n	80018b8 <HAL_TIM_ConfigClockSource+0x1c>
 80018b4:	2302      	movs	r3, #2
 80018b6:	e0b4      	b.n	8001a22 <HAL_TIM_ConfigClockSource+0x186>
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	2201      	movs	r2, #1
 80018bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	2202      	movs	r2, #2
 80018c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	689b      	ldr	r3, [r3, #8]
 80018ce:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80018d0:	68bb      	ldr	r3, [r7, #8]
 80018d2:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80018d6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80018d8:	68bb      	ldr	r3, [r7, #8]
 80018da:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80018de:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	68ba      	ldr	r2, [r7, #8]
 80018e6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80018e8:	683b      	ldr	r3, [r7, #0]
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80018f0:	d03e      	beq.n	8001970 <HAL_TIM_ConfigClockSource+0xd4>
 80018f2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80018f6:	f200 8087 	bhi.w	8001a08 <HAL_TIM_ConfigClockSource+0x16c>
 80018fa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80018fe:	f000 8086 	beq.w	8001a0e <HAL_TIM_ConfigClockSource+0x172>
 8001902:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001906:	d87f      	bhi.n	8001a08 <HAL_TIM_ConfigClockSource+0x16c>
 8001908:	2b70      	cmp	r3, #112	; 0x70
 800190a:	d01a      	beq.n	8001942 <HAL_TIM_ConfigClockSource+0xa6>
 800190c:	2b70      	cmp	r3, #112	; 0x70
 800190e:	d87b      	bhi.n	8001a08 <HAL_TIM_ConfigClockSource+0x16c>
 8001910:	2b60      	cmp	r3, #96	; 0x60
 8001912:	d050      	beq.n	80019b6 <HAL_TIM_ConfigClockSource+0x11a>
 8001914:	2b60      	cmp	r3, #96	; 0x60
 8001916:	d877      	bhi.n	8001a08 <HAL_TIM_ConfigClockSource+0x16c>
 8001918:	2b50      	cmp	r3, #80	; 0x50
 800191a:	d03c      	beq.n	8001996 <HAL_TIM_ConfigClockSource+0xfa>
 800191c:	2b50      	cmp	r3, #80	; 0x50
 800191e:	d873      	bhi.n	8001a08 <HAL_TIM_ConfigClockSource+0x16c>
 8001920:	2b40      	cmp	r3, #64	; 0x40
 8001922:	d058      	beq.n	80019d6 <HAL_TIM_ConfigClockSource+0x13a>
 8001924:	2b40      	cmp	r3, #64	; 0x40
 8001926:	d86f      	bhi.n	8001a08 <HAL_TIM_ConfigClockSource+0x16c>
 8001928:	2b30      	cmp	r3, #48	; 0x30
 800192a:	d064      	beq.n	80019f6 <HAL_TIM_ConfigClockSource+0x15a>
 800192c:	2b30      	cmp	r3, #48	; 0x30
 800192e:	d86b      	bhi.n	8001a08 <HAL_TIM_ConfigClockSource+0x16c>
 8001930:	2b20      	cmp	r3, #32
 8001932:	d060      	beq.n	80019f6 <HAL_TIM_ConfigClockSource+0x15a>
 8001934:	2b20      	cmp	r3, #32
 8001936:	d867      	bhi.n	8001a08 <HAL_TIM_ConfigClockSource+0x16c>
 8001938:	2b00      	cmp	r3, #0
 800193a:	d05c      	beq.n	80019f6 <HAL_TIM_ConfigClockSource+0x15a>
 800193c:	2b10      	cmp	r3, #16
 800193e:	d05a      	beq.n	80019f6 <HAL_TIM_ConfigClockSource+0x15a>
 8001940:	e062      	b.n	8001a08 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8001946:	683b      	ldr	r3, [r7, #0]
 8001948:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800194a:	683b      	ldr	r3, [r7, #0]
 800194c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800194e:	683b      	ldr	r3, [r7, #0]
 8001950:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8001952:	f000 f944 	bl	8001bde <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	689b      	ldr	r3, [r3, #8]
 800195c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800195e:	68bb      	ldr	r3, [r7, #8]
 8001960:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8001964:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	68ba      	ldr	r2, [r7, #8]
 800196c:	609a      	str	r2, [r3, #8]
      break;
 800196e:	e04f      	b.n	8001a10 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8001974:	683b      	ldr	r3, [r7, #0]
 8001976:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8001978:	683b      	ldr	r3, [r7, #0]
 800197a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800197c:	683b      	ldr	r3, [r7, #0]
 800197e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8001980:	f000 f92d 	bl	8001bde <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	689a      	ldr	r2, [r3, #8]
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001992:	609a      	str	r2, [r3, #8]
      break;
 8001994:	e03c      	b.n	8001a10 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800199a:	683b      	ldr	r3, [r7, #0]
 800199c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800199e:	683b      	ldr	r3, [r7, #0]
 80019a0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80019a2:	461a      	mov	r2, r3
 80019a4:	f000 f8a4 	bl	8001af0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	2150      	movs	r1, #80	; 0x50
 80019ae:	4618      	mov	r0, r3
 80019b0:	f000 f8fb 	bl	8001baa <TIM_ITRx_SetConfig>
      break;
 80019b4:	e02c      	b.n	8001a10 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80019ba:	683b      	ldr	r3, [r7, #0]
 80019bc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80019be:	683b      	ldr	r3, [r7, #0]
 80019c0:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80019c2:	461a      	mov	r2, r3
 80019c4:	f000 f8c2 	bl	8001b4c <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	2160      	movs	r1, #96	; 0x60
 80019ce:	4618      	mov	r0, r3
 80019d0:	f000 f8eb 	bl	8001baa <TIM_ITRx_SetConfig>
      break;
 80019d4:	e01c      	b.n	8001a10 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80019da:	683b      	ldr	r3, [r7, #0]
 80019dc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80019de:	683b      	ldr	r3, [r7, #0]
 80019e0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80019e2:	461a      	mov	r2, r3
 80019e4:	f000 f884 	bl	8001af0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	2140      	movs	r1, #64	; 0x40
 80019ee:	4618      	mov	r0, r3
 80019f0:	f000 f8db 	bl	8001baa <TIM_ITRx_SetConfig>
      break;
 80019f4:	e00c      	b.n	8001a10 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	681a      	ldr	r2, [r3, #0]
 80019fa:	683b      	ldr	r3, [r7, #0]
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	4619      	mov	r1, r3
 8001a00:	4610      	mov	r0, r2
 8001a02:	f000 f8d2 	bl	8001baa <TIM_ITRx_SetConfig>
      break;
 8001a06:	e003      	b.n	8001a10 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8001a08:	2301      	movs	r3, #1
 8001a0a:	73fb      	strb	r3, [r7, #15]
      break;
 8001a0c:	e000      	b.n	8001a10 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8001a0e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	2201      	movs	r2, #1
 8001a14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	2200      	movs	r2, #0
 8001a1c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8001a20:	7bfb      	ldrb	r3, [r7, #15]
}
 8001a22:	4618      	mov	r0, r3
 8001a24:	3710      	adds	r7, #16
 8001a26:	46bd      	mov	sp, r7
 8001a28:	bd80      	pop	{r7, pc}
	...

08001a2c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8001a2c:	b480      	push	{r7}
 8001a2e:	b085      	sub	sp, #20
 8001a30:	af00      	add	r7, sp, #0
 8001a32:	6078      	str	r0, [r7, #4]
 8001a34:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	4a29      	ldr	r2, [pc, #164]	; (8001ae4 <TIM_Base_SetConfig+0xb8>)
 8001a40:	4293      	cmp	r3, r2
 8001a42:	d00b      	beq.n	8001a5c <TIM_Base_SetConfig+0x30>
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001a4a:	d007      	beq.n	8001a5c <TIM_Base_SetConfig+0x30>
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	4a26      	ldr	r2, [pc, #152]	; (8001ae8 <TIM_Base_SetConfig+0xbc>)
 8001a50:	4293      	cmp	r3, r2
 8001a52:	d003      	beq.n	8001a5c <TIM_Base_SetConfig+0x30>
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	4a25      	ldr	r2, [pc, #148]	; (8001aec <TIM_Base_SetConfig+0xc0>)
 8001a58:	4293      	cmp	r3, r2
 8001a5a:	d108      	bne.n	8001a6e <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001a5c:	68fb      	ldr	r3, [r7, #12]
 8001a5e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001a62:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001a64:	683b      	ldr	r3, [r7, #0]
 8001a66:	685b      	ldr	r3, [r3, #4]
 8001a68:	68fa      	ldr	r2, [r7, #12]
 8001a6a:	4313      	orrs	r3, r2
 8001a6c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	4a1c      	ldr	r2, [pc, #112]	; (8001ae4 <TIM_Base_SetConfig+0xb8>)
 8001a72:	4293      	cmp	r3, r2
 8001a74:	d00b      	beq.n	8001a8e <TIM_Base_SetConfig+0x62>
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001a7c:	d007      	beq.n	8001a8e <TIM_Base_SetConfig+0x62>
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	4a19      	ldr	r2, [pc, #100]	; (8001ae8 <TIM_Base_SetConfig+0xbc>)
 8001a82:	4293      	cmp	r3, r2
 8001a84:	d003      	beq.n	8001a8e <TIM_Base_SetConfig+0x62>
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	4a18      	ldr	r2, [pc, #96]	; (8001aec <TIM_Base_SetConfig+0xc0>)
 8001a8a:	4293      	cmp	r3, r2
 8001a8c:	d108      	bne.n	8001aa0 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8001a8e:	68fb      	ldr	r3, [r7, #12]
 8001a90:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001a94:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001a96:	683b      	ldr	r3, [r7, #0]
 8001a98:	68db      	ldr	r3, [r3, #12]
 8001a9a:	68fa      	ldr	r2, [r7, #12]
 8001a9c:	4313      	orrs	r3, r2
 8001a9e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001aa0:	68fb      	ldr	r3, [r7, #12]
 8001aa2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8001aa6:	683b      	ldr	r3, [r7, #0]
 8001aa8:	695b      	ldr	r3, [r3, #20]
 8001aaa:	4313      	orrs	r3, r2
 8001aac:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	68fa      	ldr	r2, [r7, #12]
 8001ab2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001ab4:	683b      	ldr	r3, [r7, #0]
 8001ab6:	689a      	ldr	r2, [r3, #8]
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8001abc:	683b      	ldr	r3, [r7, #0]
 8001abe:	681a      	ldr	r2, [r3, #0]
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	4a07      	ldr	r2, [pc, #28]	; (8001ae4 <TIM_Base_SetConfig+0xb8>)
 8001ac8:	4293      	cmp	r3, r2
 8001aca:	d103      	bne.n	8001ad4 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8001acc:	683b      	ldr	r3, [r7, #0]
 8001ace:	691a      	ldr	r2, [r3, #16]
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	2201      	movs	r2, #1
 8001ad8:	615a      	str	r2, [r3, #20]
}
 8001ada:	bf00      	nop
 8001adc:	3714      	adds	r7, #20
 8001ade:	46bd      	mov	sp, r7
 8001ae0:	bc80      	pop	{r7}
 8001ae2:	4770      	bx	lr
 8001ae4:	40012c00 	.word	0x40012c00
 8001ae8:	40000400 	.word	0x40000400
 8001aec:	40000800 	.word	0x40000800

08001af0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8001af0:	b480      	push	{r7}
 8001af2:	b087      	sub	sp, #28
 8001af4:	af00      	add	r7, sp, #0
 8001af6:	60f8      	str	r0, [r7, #12]
 8001af8:	60b9      	str	r1, [r7, #8]
 8001afa:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8001afc:	68fb      	ldr	r3, [r7, #12]
 8001afe:	6a1b      	ldr	r3, [r3, #32]
 8001b00:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8001b02:	68fb      	ldr	r3, [r7, #12]
 8001b04:	6a1b      	ldr	r3, [r3, #32]
 8001b06:	f023 0201 	bic.w	r2, r3, #1
 8001b0a:	68fb      	ldr	r3, [r7, #12]
 8001b0c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8001b0e:	68fb      	ldr	r3, [r7, #12]
 8001b10:	699b      	ldr	r3, [r3, #24]
 8001b12:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8001b14:	693b      	ldr	r3, [r7, #16]
 8001b16:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001b1a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	011b      	lsls	r3, r3, #4
 8001b20:	693a      	ldr	r2, [r7, #16]
 8001b22:	4313      	orrs	r3, r2
 8001b24:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8001b26:	697b      	ldr	r3, [r7, #20]
 8001b28:	f023 030a 	bic.w	r3, r3, #10
 8001b2c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8001b2e:	697a      	ldr	r2, [r7, #20]
 8001b30:	68bb      	ldr	r3, [r7, #8]
 8001b32:	4313      	orrs	r3, r2
 8001b34:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8001b36:	68fb      	ldr	r3, [r7, #12]
 8001b38:	693a      	ldr	r2, [r7, #16]
 8001b3a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8001b3c:	68fb      	ldr	r3, [r7, #12]
 8001b3e:	697a      	ldr	r2, [r7, #20]
 8001b40:	621a      	str	r2, [r3, #32]
}
 8001b42:	bf00      	nop
 8001b44:	371c      	adds	r7, #28
 8001b46:	46bd      	mov	sp, r7
 8001b48:	bc80      	pop	{r7}
 8001b4a:	4770      	bx	lr

08001b4c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8001b4c:	b480      	push	{r7}
 8001b4e:	b087      	sub	sp, #28
 8001b50:	af00      	add	r7, sp, #0
 8001b52:	60f8      	str	r0, [r7, #12]
 8001b54:	60b9      	str	r1, [r7, #8]
 8001b56:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8001b58:	68fb      	ldr	r3, [r7, #12]
 8001b5a:	6a1b      	ldr	r3, [r3, #32]
 8001b5c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8001b5e:	68fb      	ldr	r3, [r7, #12]
 8001b60:	6a1b      	ldr	r3, [r3, #32]
 8001b62:	f023 0210 	bic.w	r2, r3, #16
 8001b66:	68fb      	ldr	r3, [r7, #12]
 8001b68:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8001b6a:	68fb      	ldr	r3, [r7, #12]
 8001b6c:	699b      	ldr	r3, [r3, #24]
 8001b6e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8001b70:	693b      	ldr	r3, [r7, #16]
 8001b72:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8001b76:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	031b      	lsls	r3, r3, #12
 8001b7c:	693a      	ldr	r2, [r7, #16]
 8001b7e:	4313      	orrs	r3, r2
 8001b80:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8001b82:	697b      	ldr	r3, [r7, #20]
 8001b84:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8001b88:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8001b8a:	68bb      	ldr	r3, [r7, #8]
 8001b8c:	011b      	lsls	r3, r3, #4
 8001b8e:	697a      	ldr	r2, [r7, #20]
 8001b90:	4313      	orrs	r3, r2
 8001b92:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8001b94:	68fb      	ldr	r3, [r7, #12]
 8001b96:	693a      	ldr	r2, [r7, #16]
 8001b98:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8001b9a:	68fb      	ldr	r3, [r7, #12]
 8001b9c:	697a      	ldr	r2, [r7, #20]
 8001b9e:	621a      	str	r2, [r3, #32]
}
 8001ba0:	bf00      	nop
 8001ba2:	371c      	adds	r7, #28
 8001ba4:	46bd      	mov	sp, r7
 8001ba6:	bc80      	pop	{r7}
 8001ba8:	4770      	bx	lr

08001baa <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8001baa:	b480      	push	{r7}
 8001bac:	b085      	sub	sp, #20
 8001bae:	af00      	add	r7, sp, #0
 8001bb0:	6078      	str	r0, [r7, #4]
 8001bb2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	689b      	ldr	r3, [r3, #8]
 8001bb8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8001bba:	68fb      	ldr	r3, [r7, #12]
 8001bbc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001bc0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8001bc2:	683a      	ldr	r2, [r7, #0]
 8001bc4:	68fb      	ldr	r3, [r7, #12]
 8001bc6:	4313      	orrs	r3, r2
 8001bc8:	f043 0307 	orr.w	r3, r3, #7
 8001bcc:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	68fa      	ldr	r2, [r7, #12]
 8001bd2:	609a      	str	r2, [r3, #8]
}
 8001bd4:	bf00      	nop
 8001bd6:	3714      	adds	r7, #20
 8001bd8:	46bd      	mov	sp, r7
 8001bda:	bc80      	pop	{r7}
 8001bdc:	4770      	bx	lr

08001bde <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8001bde:	b480      	push	{r7}
 8001be0:	b087      	sub	sp, #28
 8001be2:	af00      	add	r7, sp, #0
 8001be4:	60f8      	str	r0, [r7, #12]
 8001be6:	60b9      	str	r1, [r7, #8]
 8001be8:	607a      	str	r2, [r7, #4]
 8001bea:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8001bec:	68fb      	ldr	r3, [r7, #12]
 8001bee:	689b      	ldr	r3, [r3, #8]
 8001bf0:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8001bf2:	697b      	ldr	r3, [r7, #20]
 8001bf4:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8001bf8:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8001bfa:	683b      	ldr	r3, [r7, #0]
 8001bfc:	021a      	lsls	r2, r3, #8
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	431a      	orrs	r2, r3
 8001c02:	68bb      	ldr	r3, [r7, #8]
 8001c04:	4313      	orrs	r3, r2
 8001c06:	697a      	ldr	r2, [r7, #20]
 8001c08:	4313      	orrs	r3, r2
 8001c0a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8001c0c:	68fb      	ldr	r3, [r7, #12]
 8001c0e:	697a      	ldr	r2, [r7, #20]
 8001c10:	609a      	str	r2, [r3, #8]
}
 8001c12:	bf00      	nop
 8001c14:	371c      	adds	r7, #28
 8001c16:	46bd      	mov	sp, r7
 8001c18:	bc80      	pop	{r7}
 8001c1a:	4770      	bx	lr

08001c1c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8001c1c:	b480      	push	{r7}
 8001c1e:	b085      	sub	sp, #20
 8001c20:	af00      	add	r7, sp, #0
 8001c22:	6078      	str	r0, [r7, #4]
 8001c24:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001c2c:	2b01      	cmp	r3, #1
 8001c2e:	d101      	bne.n	8001c34 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8001c30:	2302      	movs	r3, #2
 8001c32:	e046      	b.n	8001cc2 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	2201      	movs	r2, #1
 8001c38:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	2202      	movs	r2, #2
 8001c40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	685b      	ldr	r3, [r3, #4]
 8001c4a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	689b      	ldr	r3, [r3, #8]
 8001c52:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8001c54:	68fb      	ldr	r3, [r7, #12]
 8001c56:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001c5a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8001c5c:	683b      	ldr	r3, [r7, #0]
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	68fa      	ldr	r2, [r7, #12]
 8001c62:	4313      	orrs	r3, r2
 8001c64:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	68fa      	ldr	r2, [r7, #12]
 8001c6c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	4a16      	ldr	r2, [pc, #88]	; (8001ccc <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8001c74:	4293      	cmp	r3, r2
 8001c76:	d00e      	beq.n	8001c96 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001c80:	d009      	beq.n	8001c96 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	4a12      	ldr	r2, [pc, #72]	; (8001cd0 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8001c88:	4293      	cmp	r3, r2
 8001c8a:	d004      	beq.n	8001c96 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	4a10      	ldr	r2, [pc, #64]	; (8001cd4 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8001c92:	4293      	cmp	r3, r2
 8001c94:	d10c      	bne.n	8001cb0 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8001c96:	68bb      	ldr	r3, [r7, #8]
 8001c98:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001c9c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8001c9e:	683b      	ldr	r3, [r7, #0]
 8001ca0:	685b      	ldr	r3, [r3, #4]
 8001ca2:	68ba      	ldr	r2, [r7, #8]
 8001ca4:	4313      	orrs	r3, r2
 8001ca6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	68ba      	ldr	r2, [r7, #8]
 8001cae:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	2201      	movs	r2, #1
 8001cb4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	2200      	movs	r2, #0
 8001cbc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8001cc0:	2300      	movs	r3, #0
}
 8001cc2:	4618      	mov	r0, r3
 8001cc4:	3714      	adds	r7, #20
 8001cc6:	46bd      	mov	sp, r7
 8001cc8:	bc80      	pop	{r7}
 8001cca:	4770      	bx	lr
 8001ccc:	40012c00 	.word	0x40012c00
 8001cd0:	40000400 	.word	0x40000400
 8001cd4:	40000800 	.word	0x40000800

08001cd8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001cd8:	b580      	push	{r7, lr}
 8001cda:	b082      	sub	sp, #8
 8001cdc:	af00      	add	r7, sp, #0
 8001cde:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	2b00      	cmp	r3, #0
 8001ce4:	d101      	bne.n	8001cea <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001ce6:	2301      	movs	r3, #1
 8001ce8:	e042      	b.n	8001d70 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001cf0:	b2db      	uxtb	r3, r3
 8001cf2:	2b00      	cmp	r3, #0
 8001cf4:	d106      	bne.n	8001d04 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	2200      	movs	r2, #0
 8001cfa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001cfe:	6878      	ldr	r0, [r7, #4]
 8001d00:	f7fe fc64 	bl	80005cc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	2224      	movs	r2, #36	; 0x24
 8001d08:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	68da      	ldr	r2, [r3, #12]
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001d1a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8001d1c:	6878      	ldr	r0, [r7, #4]
 8001d1e:	f000 f9c9 	bl	80020b4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	691a      	ldr	r2, [r3, #16]
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8001d30:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	695a      	ldr	r2, [r3, #20]
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8001d40:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	68da      	ldr	r2, [r3, #12]
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001d50:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	2200      	movs	r2, #0
 8001d56:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	2220      	movs	r2, #32
 8001d5c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	2220      	movs	r2, #32
 8001d64:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	2200      	movs	r2, #0
 8001d6c:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8001d6e:	2300      	movs	r3, #0
}
 8001d70:	4618      	mov	r0, r3
 8001d72:	3708      	adds	r7, #8
 8001d74:	46bd      	mov	sp, r7
 8001d76:	bd80      	pop	{r7, pc}

08001d78 <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8001d78:	b480      	push	{r7}
 8001d7a:	b085      	sub	sp, #20
 8001d7c:	af00      	add	r7, sp, #0
 8001d7e:	60f8      	str	r0, [r7, #12]
 8001d80:	60b9      	str	r1, [r7, #8]
 8001d82:	4613      	mov	r3, r2
 8001d84:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8001d86:	68fb      	ldr	r3, [r7, #12]
 8001d88:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001d8c:	b2db      	uxtb	r3, r3
 8001d8e:	2b20      	cmp	r3, #32
 8001d90:	d121      	bne.n	8001dd6 <HAL_UART_Transmit_IT+0x5e>
  {
    if ((pData == NULL) || (Size == 0U))
 8001d92:	68bb      	ldr	r3, [r7, #8]
 8001d94:	2b00      	cmp	r3, #0
 8001d96:	d002      	beq.n	8001d9e <HAL_UART_Transmit_IT+0x26>
 8001d98:	88fb      	ldrh	r3, [r7, #6]
 8001d9a:	2b00      	cmp	r3, #0
 8001d9c:	d101      	bne.n	8001da2 <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 8001d9e:	2301      	movs	r3, #1
 8001da0:	e01a      	b.n	8001dd8 <HAL_UART_Transmit_IT+0x60>
    }

    huart->pTxBuffPtr = pData;
 8001da2:	68fb      	ldr	r3, [r7, #12]
 8001da4:	68ba      	ldr	r2, [r7, #8]
 8001da6:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8001da8:	68fb      	ldr	r3, [r7, #12]
 8001daa:	88fa      	ldrh	r2, [r7, #6]
 8001dac:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8001dae:	68fb      	ldr	r3, [r7, #12]
 8001db0:	88fa      	ldrh	r2, [r7, #6]
 8001db2:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001db4:	68fb      	ldr	r3, [r7, #12]
 8001db6:	2200      	movs	r2, #0
 8001db8:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001dba:	68fb      	ldr	r3, [r7, #12]
 8001dbc:	2221      	movs	r2, #33	; 0x21
 8001dbe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 8001dc2:	68fb      	ldr	r3, [r7, #12]
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	68da      	ldr	r2, [r3, #12]
 8001dc8:	68fb      	ldr	r3, [r7, #12]
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001dd0:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 8001dd2:	2300      	movs	r3, #0
 8001dd4:	e000      	b.n	8001dd8 <HAL_UART_Transmit_IT+0x60>
  }
  else
  {
    return HAL_BUSY;
 8001dd6:	2302      	movs	r3, #2
  }
}
 8001dd8:	4618      	mov	r0, r3
 8001dda:	3714      	adds	r7, #20
 8001ddc:	46bd      	mov	sp, r7
 8001dde:	bc80      	pop	{r7}
 8001de0:	4770      	bx	lr

08001de2 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8001de2:	b580      	push	{r7, lr}
 8001de4:	b084      	sub	sp, #16
 8001de6:	af00      	add	r7, sp, #0
 8001de8:	60f8      	str	r0, [r7, #12]
 8001dea:	60b9      	str	r1, [r7, #8]
 8001dec:	4613      	mov	r3, r2
 8001dee:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8001df0:	68fb      	ldr	r3, [r7, #12]
 8001df2:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8001df6:	b2db      	uxtb	r3, r3
 8001df8:	2b20      	cmp	r3, #32
 8001dfa:	d112      	bne.n	8001e22 <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8001dfc:	68bb      	ldr	r3, [r7, #8]
 8001dfe:	2b00      	cmp	r3, #0
 8001e00:	d002      	beq.n	8001e08 <HAL_UART_Receive_IT+0x26>
 8001e02:	88fb      	ldrh	r3, [r7, #6]
 8001e04:	2b00      	cmp	r3, #0
 8001e06:	d101      	bne.n	8001e0c <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8001e08:	2301      	movs	r3, #1
 8001e0a:	e00b      	b.n	8001e24 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8001e0c:	68fb      	ldr	r3, [r7, #12]
 8001e0e:	2200      	movs	r2, #0
 8001e10:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8001e12:	88fb      	ldrh	r3, [r7, #6]
 8001e14:	461a      	mov	r2, r3
 8001e16:	68b9      	ldr	r1, [r7, #8]
 8001e18:	68f8      	ldr	r0, [r7, #12]
 8001e1a:	f000 f912 	bl	8002042 <UART_Start_Receive_IT>
 8001e1e:	4603      	mov	r3, r0
 8001e20:	e000      	b.n	8001e24 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 8001e22:	2302      	movs	r3, #2
  }
}
 8001e24:	4618      	mov	r0, r3
 8001e26:	3710      	adds	r7, #16
 8001e28:	46bd      	mov	sp, r7
 8001e2a:	bd80      	pop	{r7, pc}

08001e2c <HAL_UART_AbortTransmit>:
  *           - Set handle State to READY
  * @note   This procedure is executed in blocking mode : when exiting function, Abort is considered as completed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_AbortTransmit(UART_HandleTypeDef *huart)
{
 8001e2c:	b580      	push	{r7, lr}
 8001e2e:	b08e      	sub	sp, #56	; 0x38
 8001e30:	af00      	add	r7, sp, #0
 8001e32:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	330c      	adds	r3, #12
 8001e3a:	623b      	str	r3, [r7, #32]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001e3c:	6a3b      	ldr	r3, [r7, #32]
 8001e3e:	e853 3f00 	ldrex	r3, [r3]
 8001e42:	61fb      	str	r3, [r7, #28]
   return(result);
 8001e44:	69fb      	ldr	r3, [r7, #28]
 8001e46:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8001e4a:	637b      	str	r3, [r7, #52]	; 0x34
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	330c      	adds	r3, #12
 8001e52:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001e54:	62fa      	str	r2, [r7, #44]	; 0x2c
 8001e56:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001e58:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001e5a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001e5c:	e841 2300 	strex	r3, r2, [r1]
 8001e60:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8001e62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e64:	2b00      	cmp	r3, #0
 8001e66:	d1e5      	bne.n	8001e34 <HAL_UART_AbortTransmit+0x8>

  /* Disable the UART DMA Tx request if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT))
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	695b      	ldr	r3, [r3, #20]
 8001e6e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001e72:	2b00      	cmp	r3, #0
 8001e74:	d036      	beq.n	8001ee4 <HAL_UART_AbortTransmit+0xb8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	3314      	adds	r3, #20
 8001e7c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001e7e:	68fb      	ldr	r3, [r7, #12]
 8001e80:	e853 3f00 	ldrex	r3, [r3]
 8001e84:	60bb      	str	r3, [r7, #8]
   return(result);
 8001e86:	68bb      	ldr	r3, [r7, #8]
 8001e88:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001e8c:	633b      	str	r3, [r7, #48]	; 0x30
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	3314      	adds	r3, #20
 8001e94:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001e96:	61ba      	str	r2, [r7, #24]
 8001e98:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001e9a:	6979      	ldr	r1, [r7, #20]
 8001e9c:	69ba      	ldr	r2, [r7, #24]
 8001e9e:	e841 2300 	strex	r3, r2, [r1]
 8001ea2:	613b      	str	r3, [r7, #16]
   return(result);
 8001ea4:	693b      	ldr	r3, [r7, #16]
 8001ea6:	2b00      	cmp	r3, #0
 8001ea8:	d1e5      	bne.n	8001e76 <HAL_UART_AbortTransmit+0x4a>

    /* Abort the UART DMA Tx channel : use blocking DMA Abort API (no callback) */
    if (huart->hdmatx != NULL)
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001eae:	2b00      	cmp	r3, #0
 8001eb0:	d018      	beq.n	8001ee4 <HAL_UART_AbortTransmit+0xb8>
    {
      /* Set the UART DMA Abort callback to Null.
         No call back execution at end of DMA abort procedure */
      huart->hdmatx->XferAbortCallback = NULL;
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001eb6:	2200      	movs	r2, #0
 8001eb8:	635a      	str	r2, [r3, #52]	; 0x34

      if (HAL_DMA_Abort(huart->hdmatx) != HAL_OK)
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001ebe:	4618      	mov	r0, r3
 8001ec0:	f7fe fe29 	bl	8000b16 <HAL_DMA_Abort>
 8001ec4:	4603      	mov	r3, r0
 8001ec6:	2b00      	cmp	r3, #0
 8001ec8:	d00c      	beq.n	8001ee4 <HAL_UART_AbortTransmit+0xb8>
      {
        if (HAL_DMA_GetError(huart->hdmatx) == HAL_DMA_ERROR_TIMEOUT)
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001ece:	4618      	mov	r0, r3
 8001ed0:	f7fe fe5c 	bl	8000b8c <HAL_DMA_GetError>
 8001ed4:	4603      	mov	r3, r0
 8001ed6:	2b20      	cmp	r3, #32
 8001ed8:	d104      	bne.n	8001ee4 <HAL_UART_AbortTransmit+0xb8>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	2210      	movs	r2, #16
 8001ede:	645a      	str	r2, [r3, #68]	; 0x44

          return HAL_TIMEOUT;
 8001ee0:	2303      	movs	r3, #3
 8001ee2:	e007      	b.n	8001ef4 <HAL_UART_AbortTransmit+0xc8>
      }
    }
  }

  /* Reset Tx transfer counter */
  huart->TxXferCount = 0x00U;
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	2200      	movs	r2, #0
 8001ee8:	84da      	strh	r2, [r3, #38]	; 0x26

  /* Restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	2220      	movs	r2, #32
 8001eee:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return HAL_OK;
 8001ef2:	2300      	movs	r3, #0
}
 8001ef4:	4618      	mov	r0, r3
 8001ef6:	3738      	adds	r7, #56	; 0x38
 8001ef8:	46bd      	mov	sp, r7
 8001efa:	bd80      	pop	{r7, pc}

08001efc <HAL_UART_AbortReceive>:
  *           - Set handle State to READY
  * @note   This procedure is executed in blocking mode : when exiting function, Abort is considered as completed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_AbortReceive(UART_HandleTypeDef *huart)
{
 8001efc:	b580      	push	{r7, lr}
 8001efe:	b09a      	sub	sp, #104	; 0x68
 8001f00:	af00      	add	r7, sp, #0
 8001f02:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	330c      	adds	r3, #12
 8001f0a:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001f0c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001f0e:	e853 3f00 	ldrex	r3, [r3]
 8001f12:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8001f14:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001f16:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8001f1a:	667b      	str	r3, [r7, #100]	; 0x64
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	330c      	adds	r3, #12
 8001f22:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8001f24:	657a      	str	r2, [r7, #84]	; 0x54
 8001f26:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001f28:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8001f2a:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8001f2c:	e841 2300 	strex	r3, r2, [r1]
 8001f30:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8001f32:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001f34:	2b00      	cmp	r3, #0
 8001f36:	d1e5      	bne.n	8001f04 <HAL_UART_AbortReceive+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	3314      	adds	r3, #20
 8001f3e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001f40:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001f42:	e853 3f00 	ldrex	r3, [r3]
 8001f46:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8001f48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001f4a:	f023 0301 	bic.w	r3, r3, #1
 8001f4e:	663b      	str	r3, [r7, #96]	; 0x60
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	3314      	adds	r3, #20
 8001f56:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8001f58:	643a      	str	r2, [r7, #64]	; 0x40
 8001f5a:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001f5c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8001f5e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8001f60:	e841 2300 	strex	r3, r2, [r1]
 8001f64:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8001f66:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001f68:	2b00      	cmp	r3, #0
 8001f6a:	d1e5      	bne.n	8001f38 <HAL_UART_AbortReceive+0x3c>

  /* If Reception till IDLE event was ongoing, disable IDLEIE interrupt */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f70:	2b01      	cmp	r3, #1
 8001f72:	d119      	bne.n	8001fa8 <HAL_UART_AbortReceive+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_IDLEIE));
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	330c      	adds	r3, #12
 8001f7a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001f7c:	6a3b      	ldr	r3, [r7, #32]
 8001f7e:	e853 3f00 	ldrex	r3, [r3]
 8001f82:	61fb      	str	r3, [r7, #28]
   return(result);
 8001f84:	69fb      	ldr	r3, [r7, #28]
 8001f86:	f023 0310 	bic.w	r3, r3, #16
 8001f8a:	65fb      	str	r3, [r7, #92]	; 0x5c
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	330c      	adds	r3, #12
 8001f92:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8001f94:	62fa      	str	r2, [r7, #44]	; 0x2c
 8001f96:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001f98:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001f9a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001f9c:	e841 2300 	strex	r3, r2, [r1]
 8001fa0:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8001fa2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fa4:	2b00      	cmp	r3, #0
 8001fa6:	d1e5      	bne.n	8001f74 <HAL_UART_AbortReceive+0x78>
  }

  /* Disable the UART DMA Rx request if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	695b      	ldr	r3, [r3, #20]
 8001fae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001fb2:	2b00      	cmp	r3, #0
 8001fb4:	d036      	beq.n	8002024 <HAL_UART_AbortReceive+0x128>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	3314      	adds	r3, #20
 8001fbc:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001fbe:	68fb      	ldr	r3, [r7, #12]
 8001fc0:	e853 3f00 	ldrex	r3, [r3]
 8001fc4:	60bb      	str	r3, [r7, #8]
   return(result);
 8001fc6:	68bb      	ldr	r3, [r7, #8]
 8001fc8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8001fcc:	65bb      	str	r3, [r7, #88]	; 0x58
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	3314      	adds	r3, #20
 8001fd4:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8001fd6:	61ba      	str	r2, [r7, #24]
 8001fd8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001fda:	6979      	ldr	r1, [r7, #20]
 8001fdc:	69ba      	ldr	r2, [r7, #24]
 8001fde:	e841 2300 	strex	r3, r2, [r1]
 8001fe2:	613b      	str	r3, [r7, #16]
   return(result);
 8001fe4:	693b      	ldr	r3, [r7, #16]
 8001fe6:	2b00      	cmp	r3, #0
 8001fe8:	d1e5      	bne.n	8001fb6 <HAL_UART_AbortReceive+0xba>

    /* Abort the UART DMA Rx channel : use blocking DMA Abort API (no callback) */
    if (huart->hdmarx != NULL)
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001fee:	2b00      	cmp	r3, #0
 8001ff0:	d018      	beq.n	8002024 <HAL_UART_AbortReceive+0x128>
    {
      /* Set the UART DMA Abort callback to Null.
         No call back execution at end of DMA abort procedure */
      huart->hdmarx->XferAbortCallback = NULL;
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001ff6:	2200      	movs	r2, #0
 8001ff8:	635a      	str	r2, [r3, #52]	; 0x34

      if (HAL_DMA_Abort(huart->hdmarx) != HAL_OK)
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001ffe:	4618      	mov	r0, r3
 8002000:	f7fe fd89 	bl	8000b16 <HAL_DMA_Abort>
 8002004:	4603      	mov	r3, r0
 8002006:	2b00      	cmp	r3, #0
 8002008:	d00c      	beq.n	8002024 <HAL_UART_AbortReceive+0x128>
      {
        if (HAL_DMA_GetError(huart->hdmarx) == HAL_DMA_ERROR_TIMEOUT)
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800200e:	4618      	mov	r0, r3
 8002010:	f7fe fdbc 	bl	8000b8c <HAL_DMA_GetError>
 8002014:	4603      	mov	r3, r0
 8002016:	2b20      	cmp	r3, #32
 8002018:	d104      	bne.n	8002024 <HAL_UART_AbortReceive+0x128>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	2210      	movs	r2, #16
 800201e:	645a      	str	r2, [r3, #68]	; 0x44

          return HAL_TIMEOUT;
 8002020:	2303      	movs	r3, #3
 8002022:	e00a      	b.n	800203a <HAL_UART_AbortReceive+0x13e>
      }
    }
  }

  /* Reset Rx transfer counter */
  huart->RxXferCount = 0x00U;
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	2200      	movs	r2, #0
 8002028:	85da      	strh	r2, [r3, #46]	; 0x2e

  /* Restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	2220      	movs	r2, #32
 800202e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	2200      	movs	r2, #0
 8002036:	631a      	str	r2, [r3, #48]	; 0x30

  return HAL_OK;
 8002038:	2300      	movs	r3, #0
}
 800203a:	4618      	mov	r0, r3
 800203c:	3768      	adds	r7, #104	; 0x68
 800203e:	46bd      	mov	sp, r7
 8002040:	bd80      	pop	{r7, pc}

08002042 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002042:	b480      	push	{r7}
 8002044:	b085      	sub	sp, #20
 8002046:	af00      	add	r7, sp, #0
 8002048:	60f8      	str	r0, [r7, #12]
 800204a:	60b9      	str	r1, [r7, #8]
 800204c:	4613      	mov	r3, r2
 800204e:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8002050:	68fb      	ldr	r3, [r7, #12]
 8002052:	68ba      	ldr	r2, [r7, #8]
 8002054:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8002056:	68fb      	ldr	r3, [r7, #12]
 8002058:	88fa      	ldrh	r2, [r7, #6]
 800205a:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 800205c:	68fb      	ldr	r3, [r7, #12]
 800205e:	88fa      	ldrh	r2, [r7, #6]
 8002060:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002062:	68fb      	ldr	r3, [r7, #12]
 8002064:	2200      	movs	r2, #0
 8002066:	645a      	str	r2, [r3, #68]	; 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8002068:	68fb      	ldr	r3, [r7, #12]
 800206a:	2222      	movs	r2, #34	; 0x22
 800206c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 8002070:	68fb      	ldr	r3, [r7, #12]
 8002072:	691b      	ldr	r3, [r3, #16]
 8002074:	2b00      	cmp	r3, #0
 8002076:	d007      	beq.n	8002088 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8002078:	68fb      	ldr	r3, [r7, #12]
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	68da      	ldr	r2, [r3, #12]
 800207e:	68fb      	ldr	r3, [r7, #12]
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002086:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8002088:	68fb      	ldr	r3, [r7, #12]
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	695a      	ldr	r2, [r3, #20]
 800208e:	68fb      	ldr	r3, [r7, #12]
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	f042 0201 	orr.w	r2, r2, #1
 8002096:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8002098:	68fb      	ldr	r3, [r7, #12]
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	68da      	ldr	r2, [r3, #12]
 800209e:	68fb      	ldr	r3, [r7, #12]
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	f042 0220 	orr.w	r2, r2, #32
 80020a6:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80020a8:	2300      	movs	r3, #0
}
 80020aa:	4618      	mov	r0, r3
 80020ac:	3714      	adds	r7, #20
 80020ae:	46bd      	mov	sp, r7
 80020b0:	bc80      	pop	{r7}
 80020b2:	4770      	bx	lr

080020b4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80020b4:	b580      	push	{r7, lr}
 80020b6:	b084      	sub	sp, #16
 80020b8:	af00      	add	r7, sp, #0
 80020ba:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	691b      	ldr	r3, [r3, #16]
 80020c2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	68da      	ldr	r2, [r3, #12]
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	430a      	orrs	r2, r1
 80020d0:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	689a      	ldr	r2, [r3, #8]
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	691b      	ldr	r3, [r3, #16]
 80020da:	431a      	orrs	r2, r3
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	695b      	ldr	r3, [r3, #20]
 80020e0:	4313      	orrs	r3, r2
 80020e2:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	68db      	ldr	r3, [r3, #12]
 80020ea:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 80020ee:	f023 030c 	bic.w	r3, r3, #12
 80020f2:	687a      	ldr	r2, [r7, #4]
 80020f4:	6812      	ldr	r2, [r2, #0]
 80020f6:	68b9      	ldr	r1, [r7, #8]
 80020f8:	430b      	orrs	r3, r1
 80020fa:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	695b      	ldr	r3, [r3, #20]
 8002102:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	699a      	ldr	r2, [r3, #24]
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	430a      	orrs	r2, r1
 8002110:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	4a2c      	ldr	r2, [pc, #176]	; (80021c8 <UART_SetConfig+0x114>)
 8002118:	4293      	cmp	r3, r2
 800211a:	d103      	bne.n	8002124 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 800211c:	f7ff fabc 	bl	8001698 <HAL_RCC_GetPCLK2Freq>
 8002120:	60f8      	str	r0, [r7, #12]
 8002122:	e002      	b.n	800212a <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8002124:	f7ff faa4 	bl	8001670 <HAL_RCC_GetPCLK1Freq>
 8002128:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800212a:	68fa      	ldr	r2, [r7, #12]
 800212c:	4613      	mov	r3, r2
 800212e:	009b      	lsls	r3, r3, #2
 8002130:	4413      	add	r3, r2
 8002132:	009a      	lsls	r2, r3, #2
 8002134:	441a      	add	r2, r3
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	685b      	ldr	r3, [r3, #4]
 800213a:	009b      	lsls	r3, r3, #2
 800213c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002140:	4a22      	ldr	r2, [pc, #136]	; (80021cc <UART_SetConfig+0x118>)
 8002142:	fba2 2303 	umull	r2, r3, r2, r3
 8002146:	095b      	lsrs	r3, r3, #5
 8002148:	0119      	lsls	r1, r3, #4
 800214a:	68fa      	ldr	r2, [r7, #12]
 800214c:	4613      	mov	r3, r2
 800214e:	009b      	lsls	r3, r3, #2
 8002150:	4413      	add	r3, r2
 8002152:	009a      	lsls	r2, r3, #2
 8002154:	441a      	add	r2, r3
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	685b      	ldr	r3, [r3, #4]
 800215a:	009b      	lsls	r3, r3, #2
 800215c:	fbb2 f2f3 	udiv	r2, r2, r3
 8002160:	4b1a      	ldr	r3, [pc, #104]	; (80021cc <UART_SetConfig+0x118>)
 8002162:	fba3 0302 	umull	r0, r3, r3, r2
 8002166:	095b      	lsrs	r3, r3, #5
 8002168:	2064      	movs	r0, #100	; 0x64
 800216a:	fb00 f303 	mul.w	r3, r0, r3
 800216e:	1ad3      	subs	r3, r2, r3
 8002170:	011b      	lsls	r3, r3, #4
 8002172:	3332      	adds	r3, #50	; 0x32
 8002174:	4a15      	ldr	r2, [pc, #84]	; (80021cc <UART_SetConfig+0x118>)
 8002176:	fba2 2303 	umull	r2, r3, r2, r3
 800217a:	095b      	lsrs	r3, r3, #5
 800217c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002180:	4419      	add	r1, r3
 8002182:	68fa      	ldr	r2, [r7, #12]
 8002184:	4613      	mov	r3, r2
 8002186:	009b      	lsls	r3, r3, #2
 8002188:	4413      	add	r3, r2
 800218a:	009a      	lsls	r2, r3, #2
 800218c:	441a      	add	r2, r3
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	685b      	ldr	r3, [r3, #4]
 8002192:	009b      	lsls	r3, r3, #2
 8002194:	fbb2 f2f3 	udiv	r2, r2, r3
 8002198:	4b0c      	ldr	r3, [pc, #48]	; (80021cc <UART_SetConfig+0x118>)
 800219a:	fba3 0302 	umull	r0, r3, r3, r2
 800219e:	095b      	lsrs	r3, r3, #5
 80021a0:	2064      	movs	r0, #100	; 0x64
 80021a2:	fb00 f303 	mul.w	r3, r0, r3
 80021a6:	1ad3      	subs	r3, r2, r3
 80021a8:	011b      	lsls	r3, r3, #4
 80021aa:	3332      	adds	r3, #50	; 0x32
 80021ac:	4a07      	ldr	r2, [pc, #28]	; (80021cc <UART_SetConfig+0x118>)
 80021ae:	fba2 2303 	umull	r2, r3, r2, r3
 80021b2:	095b      	lsrs	r3, r3, #5
 80021b4:	f003 020f 	and.w	r2, r3, #15
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	440a      	add	r2, r1
 80021be:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 80021c0:	bf00      	nop
 80021c2:	3710      	adds	r7, #16
 80021c4:	46bd      	mov	sp, r7
 80021c6:	bd80      	pop	{r7, pc}
 80021c8:	40013800 	.word	0x40013800
 80021cc:	51eb851f 	.word	0x51eb851f

080021d0 <eMBInit>:
};

/* ----------------------- Start implementation -----------------------------*/
eMBErrorCode
eMBInit( eMBMode eMode, UCHAR ucSlaveAddress, UCHAR ucPort, ULONG ulBaudRate, eMBParity eParity )
{
 80021d0:	b580      	push	{r7, lr}
 80021d2:	b084      	sub	sp, #16
 80021d4:	af00      	add	r7, sp, #0
 80021d6:	603b      	str	r3, [r7, #0]
 80021d8:	4603      	mov	r3, r0
 80021da:	71fb      	strb	r3, [r7, #7]
 80021dc:	460b      	mov	r3, r1
 80021de:	71bb      	strb	r3, [r7, #6]
 80021e0:	4613      	mov	r3, r2
 80021e2:	717b      	strb	r3, [r7, #5]
    eMBErrorCode    eStatus = MB_ENOERR;
 80021e4:	2300      	movs	r3, #0
 80021e6:	73fb      	strb	r3, [r7, #15]

    /* check preconditions */
    if( ( ucSlaveAddress == MB_ADDRESS_BROADCAST ) ||
 80021e8:	79bb      	ldrb	r3, [r7, #6]
 80021ea:	2b00      	cmp	r3, #0
 80021ec:	d005      	beq.n	80021fa <eMBInit+0x2a>
 80021ee:	79bb      	ldrb	r3, [r7, #6]
 80021f0:	2b00      	cmp	r3, #0
 80021f2:	d002      	beq.n	80021fa <eMBInit+0x2a>
        ( ucSlaveAddress < MB_ADDRESS_MIN ) || ( ucSlaveAddress > MB_ADDRESS_MAX ) )
 80021f4:	79bb      	ldrb	r3, [r7, #6]
 80021f6:	2bf7      	cmp	r3, #247	; 0xf7
 80021f8:	d902      	bls.n	8002200 <eMBInit+0x30>
    {
        eStatus = MB_EINVAL;
 80021fa:	2302      	movs	r3, #2
 80021fc:	73fb      	strb	r3, [r7, #15]
 80021fe:	e03a      	b.n	8002276 <eMBInit+0xa6>
    }
    else
    {
        ucMBAddress = ucSlaveAddress;
 8002200:	4a1f      	ldr	r2, [pc, #124]	; (8002280 <eMBInit+0xb0>)
 8002202:	79bb      	ldrb	r3, [r7, #6]
 8002204:	7013      	strb	r3, [r2, #0]

        switch ( eMode )
 8002206:	79fb      	ldrb	r3, [r7, #7]
 8002208:	2b00      	cmp	r3, #0
 800220a:	d121      	bne.n	8002250 <eMBInit+0x80>
        {
#if MB_RTU_ENABLED > 0
        case MB_RTU:
            pvMBFrameStartCur = eMBRTUStart;
 800220c:	4b1d      	ldr	r3, [pc, #116]	; (8002284 <eMBInit+0xb4>)
 800220e:	4a1e      	ldr	r2, [pc, #120]	; (8002288 <eMBInit+0xb8>)
 8002210:	601a      	str	r2, [r3, #0]
            pvMBFrameStopCur = eMBRTUStop;
 8002212:	4b1e      	ldr	r3, [pc, #120]	; (800228c <eMBInit+0xbc>)
 8002214:	4a1e      	ldr	r2, [pc, #120]	; (8002290 <eMBInit+0xc0>)
 8002216:	601a      	str	r2, [r3, #0]
            peMBFrameSendCur = eMBRTUSend;
 8002218:	4b1e      	ldr	r3, [pc, #120]	; (8002294 <eMBInit+0xc4>)
 800221a:	4a1f      	ldr	r2, [pc, #124]	; (8002298 <eMBInit+0xc8>)
 800221c:	601a      	str	r2, [r3, #0]
            peMBFrameReceiveCur = eMBRTUReceive;
 800221e:	4b1f      	ldr	r3, [pc, #124]	; (800229c <eMBInit+0xcc>)
 8002220:	4a1f      	ldr	r2, [pc, #124]	; (80022a0 <eMBInit+0xd0>)
 8002222:	601a      	str	r2, [r3, #0]
            pvMBFrameCloseCur = MB_PORT_HAS_CLOSE ? vMBPortClose : NULL;
 8002224:	4b1f      	ldr	r3, [pc, #124]	; (80022a4 <eMBInit+0xd4>)
 8002226:	2200      	movs	r2, #0
 8002228:	601a      	str	r2, [r3, #0]
            pxMBFrameCBByteReceived = xMBRTUReceiveFSM;
 800222a:	4b1f      	ldr	r3, [pc, #124]	; (80022a8 <eMBInit+0xd8>)
 800222c:	4a1f      	ldr	r2, [pc, #124]	; (80022ac <eMBInit+0xdc>)
 800222e:	601a      	str	r2, [r3, #0]
            pxMBFrameCBTransmitterEmpty = xMBRTUTransmitFSM;
 8002230:	4b1f      	ldr	r3, [pc, #124]	; (80022b0 <eMBInit+0xe0>)
 8002232:	4a20      	ldr	r2, [pc, #128]	; (80022b4 <eMBInit+0xe4>)
 8002234:	601a      	str	r2, [r3, #0]
            pxMBPortCBTimerExpired = xMBRTUTimerT35Expired;
 8002236:	4b20      	ldr	r3, [pc, #128]	; (80022b8 <eMBInit+0xe8>)
 8002238:	4a20      	ldr	r2, [pc, #128]	; (80022bc <eMBInit+0xec>)
 800223a:	601a      	str	r2, [r3, #0]

            eStatus = eMBRTUInit( ucMBAddress, ucPort, ulBaudRate, eParity );
 800223c:	4b10      	ldr	r3, [pc, #64]	; (8002280 <eMBInit+0xb0>)
 800223e:	7818      	ldrb	r0, [r3, #0]
 8002240:	7e3b      	ldrb	r3, [r7, #24]
 8002242:	7979      	ldrb	r1, [r7, #5]
 8002244:	683a      	ldr	r2, [r7, #0]
 8002246:	f000 fd39 	bl	8002cbc <eMBRTUInit>
 800224a:	4603      	mov	r3, r0
 800224c:	73fb      	strb	r3, [r7, #15]
            break;
 800224e:	e001      	b.n	8002254 <eMBInit+0x84>

            eStatus = eMBASCIIInit( ucMBAddress, ucPort, ulBaudRate, eParity );
            break;
#endif
        default:
            eStatus = MB_EINVAL;
 8002250:	2302      	movs	r3, #2
 8002252:	73fb      	strb	r3, [r7, #15]
        }

        if( eStatus == MB_ENOERR )
 8002254:	7bfb      	ldrb	r3, [r7, #15]
 8002256:	2b00      	cmp	r3, #0
 8002258:	d10d      	bne.n	8002276 <eMBInit+0xa6>
        {
            if( !xMBPortEventInit(  ) )
 800225a:	f000 ff8b 	bl	8003174 <xMBPortEventInit>
 800225e:	4603      	mov	r3, r0
 8002260:	2b00      	cmp	r3, #0
 8002262:	d102      	bne.n	800226a <eMBInit+0x9a>
            {
                /* port dependent event module initalization failed. */
                eStatus = MB_EPORTERR;
 8002264:	2303      	movs	r3, #3
 8002266:	73fb      	strb	r3, [r7, #15]
 8002268:	e005      	b.n	8002276 <eMBInit+0xa6>
            }
            else
            {
                eMBCurrentMode = eMode;
 800226a:	4a15      	ldr	r2, [pc, #84]	; (80022c0 <eMBInit+0xf0>)
 800226c:	79fb      	ldrb	r3, [r7, #7]
 800226e:	7013      	strb	r3, [r2, #0]
                eMBState = STATE_DISABLED;
 8002270:	4b14      	ldr	r3, [pc, #80]	; (80022c4 <eMBInit+0xf4>)
 8002272:	2201      	movs	r2, #1
 8002274:	701a      	strb	r2, [r3, #0]
            }
        }
    }
    return eStatus;
 8002276:	7bfb      	ldrb	r3, [r7, #15]
}
 8002278:	4618      	mov	r0, r3
 800227a:	3710      	adds	r7, #16
 800227c:	46bd      	mov	sp, r7
 800227e:	bd80      	pop	{r7, pc}
 8002280:	200001a8 	.word	0x200001a8
 8002284:	200001b0 	.word	0x200001b0
 8002288:	08002d35 	.word	0x08002d35
 800228c:	200001b4 	.word	0x200001b4
 8002290:	08002d5d 	.word	0x08002d5d
 8002294:	200001ac 	.word	0x200001ac
 8002298:	08002e15 	.word	0x08002e15
 800229c:	200001b8 	.word	0x200001b8
 80022a0:	08002d79 	.word	0x08002d79
 80022a4:	200001bc 	.word	0x200001bc
 80022a8:	200001c0 	.word	0x200001c0
 80022ac:	08002edd 	.word	0x08002edd
 80022b0:	200001c4 	.word	0x200001c4
 80022b4:	08002fad 	.word	0x08002fad
 80022b8:	200001c8 	.word	0x200001c8
 80022bc:	0800305d 	.word	0x0800305d
 80022c0:	200001a9 	.word	0x200001a9
 80022c4:	2000000d 	.word	0x2000000d

080022c8 <eMBEnable>:
    return eStatus;
}

eMBErrorCode
eMBEnable( void )
{
 80022c8:	b580      	push	{r7, lr}
 80022ca:	b082      	sub	sp, #8
 80022cc:	af00      	add	r7, sp, #0
    eMBErrorCode    eStatus = MB_ENOERR;
 80022ce:	2300      	movs	r3, #0
 80022d0:	71fb      	strb	r3, [r7, #7]

    if( eMBState == STATE_DISABLED )
 80022d2:	4b09      	ldr	r3, [pc, #36]	; (80022f8 <eMBEnable+0x30>)
 80022d4:	781b      	ldrb	r3, [r3, #0]
 80022d6:	2b01      	cmp	r3, #1
 80022d8:	d106      	bne.n	80022e8 <eMBEnable+0x20>
    {
        /* Activate the protocol stack. */
        pvMBFrameStartCur(  );
 80022da:	4b08      	ldr	r3, [pc, #32]	; (80022fc <eMBEnable+0x34>)
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	4798      	blx	r3
        eMBState = STATE_ENABLED;
 80022e0:	4b05      	ldr	r3, [pc, #20]	; (80022f8 <eMBEnable+0x30>)
 80022e2:	2200      	movs	r2, #0
 80022e4:	701a      	strb	r2, [r3, #0]
 80022e6:	e001      	b.n	80022ec <eMBEnable+0x24>
    }
    else
    {
        eStatus = MB_EILLSTATE;
 80022e8:	2306      	movs	r3, #6
 80022ea:	71fb      	strb	r3, [r7, #7]
    }
    return eStatus;
 80022ec:	79fb      	ldrb	r3, [r7, #7]
}
 80022ee:	4618      	mov	r0, r3
 80022f0:	3708      	adds	r7, #8
 80022f2:	46bd      	mov	sp, r7
 80022f4:	bd80      	pop	{r7, pc}
 80022f6:	bf00      	nop
 80022f8:	2000000d 	.word	0x2000000d
 80022fc:	200001b0 	.word	0x200001b0

08002300 <eMBPoll>:
    return eStatus;
}

eMBErrorCode
eMBPoll( void )
{
 8002300:	b590      	push	{r4, r7, lr}
 8002302:	b083      	sub	sp, #12
 8002304:	af00      	add	r7, sp, #0
    static UCHAR    ucFunctionCode;
    static USHORT   usLength;
    static eMBException eException;

    int             i;
    eMBErrorCode    eStatus = MB_ENOERR;
 8002306:	2300      	movs	r3, #0
 8002308:	70fb      	strb	r3, [r7, #3]
    eMBEventType    eEvent;

    /* Check if the protocol stack is ready. */
    if( eMBState != STATE_ENABLED )
 800230a:	4b50      	ldr	r3, [pc, #320]	; (800244c <eMBPoll+0x14c>)
 800230c:	781b      	ldrb	r3, [r3, #0]
 800230e:	2b00      	cmp	r3, #0
 8002310:	d001      	beq.n	8002316 <eMBPoll+0x16>
    {
        return MB_EILLSTATE;
 8002312:	2306      	movs	r3, #6
 8002314:	e095      	b.n	8002442 <eMBPoll+0x142>
    }

    /* Check if there is a event available. If not return control to caller.
     * Otherwise we will handle the event. */
    if( xMBPortEventGet( &eEvent ) == TRUE )
 8002316:	1cbb      	adds	r3, r7, #2
 8002318:	4618      	mov	r0, r3
 800231a:	f000 ff4d 	bl	80031b8 <xMBPortEventGet>
 800231e:	4603      	mov	r3, r0
 8002320:	2b01      	cmp	r3, #1
 8002322:	f040 808d 	bne.w	8002440 <eMBPoll+0x140>
    {
        switch ( eEvent )
 8002326:	78bb      	ldrb	r3, [r7, #2]
 8002328:	2b03      	cmp	r3, #3
 800232a:	f200 8089 	bhi.w	8002440 <eMBPoll+0x140>
 800232e:	a201      	add	r2, pc, #4	; (adr r2, 8002334 <eMBPoll+0x34>)
 8002330:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002334:	08002441 	.word	0x08002441
 8002338:	08002345 	.word	0x08002345
 800233c:	08002377 	.word	0x08002377
 8002340:	08002441 	.word	0x08002441
        {
        case EV_READY:
            break;

        case EV_FRAME_RECEIVED:
            eStatus = peMBFrameReceiveCur( &ucRcvAddress, &ucMBFrame, &usLength );
 8002344:	4b42      	ldr	r3, [pc, #264]	; (8002450 <eMBPoll+0x150>)
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	4a42      	ldr	r2, [pc, #264]	; (8002454 <eMBPoll+0x154>)
 800234a:	4943      	ldr	r1, [pc, #268]	; (8002458 <eMBPoll+0x158>)
 800234c:	4843      	ldr	r0, [pc, #268]	; (800245c <eMBPoll+0x15c>)
 800234e:	4798      	blx	r3
 8002350:	4603      	mov	r3, r0
 8002352:	70fb      	strb	r3, [r7, #3]
            if( eStatus == MB_ENOERR )
 8002354:	78fb      	ldrb	r3, [r7, #3]
 8002356:	2b00      	cmp	r3, #0
 8002358:	d16f      	bne.n	800243a <eMBPoll+0x13a>
            {
                /* Check if the frame is for us. If not ignore the frame. */
                if( ( ucRcvAddress == ucMBAddress ) || ( ucRcvAddress == MB_ADDRESS_BROADCAST ) )
 800235a:	4b40      	ldr	r3, [pc, #256]	; (800245c <eMBPoll+0x15c>)
 800235c:	781a      	ldrb	r2, [r3, #0]
 800235e:	4b40      	ldr	r3, [pc, #256]	; (8002460 <eMBPoll+0x160>)
 8002360:	781b      	ldrb	r3, [r3, #0]
 8002362:	429a      	cmp	r2, r3
 8002364:	d003      	beq.n	800236e <eMBPoll+0x6e>
 8002366:	4b3d      	ldr	r3, [pc, #244]	; (800245c <eMBPoll+0x15c>)
 8002368:	781b      	ldrb	r3, [r3, #0]
 800236a:	2b00      	cmp	r3, #0
 800236c:	d165      	bne.n	800243a <eMBPoll+0x13a>
                {
                    ( void )xMBPortEventPost( EV_EXECUTE );
 800236e:	2002      	movs	r0, #2
 8002370:	f000 ff0c 	bl	800318c <xMBPortEventPost>
                }
            }
            break;
 8002374:	e061      	b.n	800243a <eMBPoll+0x13a>

        case EV_EXECUTE:
            ucFunctionCode = ucMBFrame[MB_PDU_FUNC_OFF];
 8002376:	4b38      	ldr	r3, [pc, #224]	; (8002458 <eMBPoll+0x158>)
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	781a      	ldrb	r2, [r3, #0]
 800237c:	4b39      	ldr	r3, [pc, #228]	; (8002464 <eMBPoll+0x164>)
 800237e:	701a      	strb	r2, [r3, #0]
            eException = MB_EX_ILLEGAL_FUNCTION;
 8002380:	4b39      	ldr	r3, [pc, #228]	; (8002468 <eMBPoll+0x168>)
 8002382:	2201      	movs	r2, #1
 8002384:	701a      	strb	r2, [r3, #0]
            for( i = 0; i < MB_FUNC_HANDLERS_MAX; i++ )
 8002386:	2300      	movs	r3, #0
 8002388:	607b      	str	r3, [r7, #4]
 800238a:	e01f      	b.n	80023cc <eMBPoll+0xcc>
            {
                /* No more function handlers registered. Abort. */
                if( xFuncHandlers[i].ucFunctionCode == 0 )
 800238c:	4a37      	ldr	r2, [pc, #220]	; (800246c <eMBPoll+0x16c>)
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	f812 3033 	ldrb.w	r3, [r2, r3, lsl #3]
 8002394:	2b00      	cmp	r3, #0
 8002396:	d01d      	beq.n	80023d4 <eMBPoll+0xd4>
                {
                    break;
                }
                else if( xFuncHandlers[i].ucFunctionCode == ucFunctionCode )
 8002398:	4a34      	ldr	r2, [pc, #208]	; (800246c <eMBPoll+0x16c>)
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	f812 2033 	ldrb.w	r2, [r2, r3, lsl #3]
 80023a0:	4b30      	ldr	r3, [pc, #192]	; (8002464 <eMBPoll+0x164>)
 80023a2:	781b      	ldrb	r3, [r3, #0]
 80023a4:	429a      	cmp	r2, r3
 80023a6:	d10e      	bne.n	80023c6 <eMBPoll+0xc6>
                {
                    eException = xFuncHandlers[i].pxHandler( ucMBFrame, &usLength );
 80023a8:	4a30      	ldr	r2, [pc, #192]	; (800246c <eMBPoll+0x16c>)
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	00db      	lsls	r3, r3, #3
 80023ae:	4413      	add	r3, r2
 80023b0:	685b      	ldr	r3, [r3, #4]
 80023b2:	4a29      	ldr	r2, [pc, #164]	; (8002458 <eMBPoll+0x158>)
 80023b4:	6812      	ldr	r2, [r2, #0]
 80023b6:	4927      	ldr	r1, [pc, #156]	; (8002454 <eMBPoll+0x154>)
 80023b8:	4610      	mov	r0, r2
 80023ba:	4798      	blx	r3
 80023bc:	4603      	mov	r3, r0
 80023be:	461a      	mov	r2, r3
 80023c0:	4b29      	ldr	r3, [pc, #164]	; (8002468 <eMBPoll+0x168>)
 80023c2:	701a      	strb	r2, [r3, #0]
                    break;
 80023c4:	e007      	b.n	80023d6 <eMBPoll+0xd6>
            for( i = 0; i < MB_FUNC_HANDLERS_MAX; i++ )
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	3301      	adds	r3, #1
 80023ca:	607b      	str	r3, [r7, #4]
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	2b0f      	cmp	r3, #15
 80023d0:	dddc      	ble.n	800238c <eMBPoll+0x8c>
 80023d2:	e000      	b.n	80023d6 <eMBPoll+0xd6>
                    break;
 80023d4:	bf00      	nop
                }
            }

            /* If the request was not sent to the broadcast address we
             * return a reply. */
            if( ucRcvAddress != MB_ADDRESS_BROADCAST )
 80023d6:	4b21      	ldr	r3, [pc, #132]	; (800245c <eMBPoll+0x15c>)
 80023d8:	781b      	ldrb	r3, [r3, #0]
 80023da:	2b00      	cmp	r3, #0
 80023dc:	d02f      	beq.n	800243e <eMBPoll+0x13e>
            {
                if( eException != MB_EX_NONE )
 80023de:	4b22      	ldr	r3, [pc, #136]	; (8002468 <eMBPoll+0x168>)
 80023e0:	781b      	ldrb	r3, [r3, #0]
 80023e2:	2b00      	cmp	r3, #0
 80023e4:	d01d      	beq.n	8002422 <eMBPoll+0x122>
                {
                    /* An exception occured. Build an error frame. */
                    usLength = 0;
 80023e6:	4b1b      	ldr	r3, [pc, #108]	; (8002454 <eMBPoll+0x154>)
 80023e8:	2200      	movs	r2, #0
 80023ea:	801a      	strh	r2, [r3, #0]
                    ucMBFrame[usLength++] = ( UCHAR )( ucFunctionCode | MB_FUNC_ERROR );
 80023ec:	4b1d      	ldr	r3, [pc, #116]	; (8002464 <eMBPoll+0x164>)
 80023ee:	781a      	ldrb	r2, [r3, #0]
 80023f0:	4b19      	ldr	r3, [pc, #100]	; (8002458 <eMBPoll+0x158>)
 80023f2:	6819      	ldr	r1, [r3, #0]
 80023f4:	4b17      	ldr	r3, [pc, #92]	; (8002454 <eMBPoll+0x154>)
 80023f6:	881b      	ldrh	r3, [r3, #0]
 80023f8:	1c58      	adds	r0, r3, #1
 80023fa:	b284      	uxth	r4, r0
 80023fc:	4815      	ldr	r0, [pc, #84]	; (8002454 <eMBPoll+0x154>)
 80023fe:	8004      	strh	r4, [r0, #0]
 8002400:	440b      	add	r3, r1
 8002402:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8002406:	b2d2      	uxtb	r2, r2
 8002408:	701a      	strb	r2, [r3, #0]
                    ucMBFrame[usLength++] = eException;
 800240a:	4b13      	ldr	r3, [pc, #76]	; (8002458 <eMBPoll+0x158>)
 800240c:	681a      	ldr	r2, [r3, #0]
 800240e:	4b11      	ldr	r3, [pc, #68]	; (8002454 <eMBPoll+0x154>)
 8002410:	881b      	ldrh	r3, [r3, #0]
 8002412:	1c59      	adds	r1, r3, #1
 8002414:	b288      	uxth	r0, r1
 8002416:	490f      	ldr	r1, [pc, #60]	; (8002454 <eMBPoll+0x154>)
 8002418:	8008      	strh	r0, [r1, #0]
 800241a:	4413      	add	r3, r2
 800241c:	4a12      	ldr	r2, [pc, #72]	; (8002468 <eMBPoll+0x168>)
 800241e:	7812      	ldrb	r2, [r2, #0]
 8002420:	701a      	strb	r2, [r3, #0]
                }
                if( ( eMBCurrentMode == MB_ASCII ) && MB_ASCII_TIMEOUT_WAIT_BEFORE_SEND_MS )
                {
                    vMBPortTimersDelay( MB_ASCII_TIMEOUT_WAIT_BEFORE_SEND_MS );
                }                
                eStatus = peMBFrameSendCur( ucMBAddress, ucMBFrame, usLength );
 8002422:	4b13      	ldr	r3, [pc, #76]	; (8002470 <eMBPoll+0x170>)
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	4a0e      	ldr	r2, [pc, #56]	; (8002460 <eMBPoll+0x160>)
 8002428:	7810      	ldrb	r0, [r2, #0]
 800242a:	4a0b      	ldr	r2, [pc, #44]	; (8002458 <eMBPoll+0x158>)
 800242c:	6811      	ldr	r1, [r2, #0]
 800242e:	4a09      	ldr	r2, [pc, #36]	; (8002454 <eMBPoll+0x154>)
 8002430:	8812      	ldrh	r2, [r2, #0]
 8002432:	4798      	blx	r3
 8002434:	4603      	mov	r3, r0
 8002436:	70fb      	strb	r3, [r7, #3]
            }
            break;
 8002438:	e001      	b.n	800243e <eMBPoll+0x13e>
            break;
 800243a:	bf00      	nop
 800243c:	e000      	b.n	8002440 <eMBPoll+0x140>
            break;
 800243e:	bf00      	nop

        case EV_FRAME_SENT:
            break;
        }
    }
    return MB_ENOERR;
 8002440:	2300      	movs	r3, #0
}
 8002442:	4618      	mov	r0, r3
 8002444:	370c      	adds	r7, #12
 8002446:	46bd      	mov	sp, r7
 8002448:	bd90      	pop	{r4, r7, pc}
 800244a:	bf00      	nop
 800244c:	2000000d 	.word	0x2000000d
 8002450:	200001b8 	.word	0x200001b8
 8002454:	200001d4 	.word	0x200001d4
 8002458:	200001d0 	.word	0x200001d0
 800245c:	200001cc 	.word	0x200001cc
 8002460:	200001a8 	.word	0x200001a8
 8002464:	200001d6 	.word	0x200001d6
 8002468:	200001d7 	.word	0x200001d7
 800246c:	20000010 	.word	0x20000010
 8002470:	200001ac 	.word	0x200001ac

08002474 <usMBCRC16>:
    0x41, 0x81, 0x80, 0x40
};

USHORT
usMBCRC16( UCHAR * pucFrame, USHORT usLen )
{
 8002474:	b480      	push	{r7}
 8002476:	b085      	sub	sp, #20
 8002478:	af00      	add	r7, sp, #0
 800247a:	6078      	str	r0, [r7, #4]
 800247c:	460b      	mov	r3, r1
 800247e:	807b      	strh	r3, [r7, #2]
    UCHAR           ucCRCHi = 0xFF;
 8002480:	23ff      	movs	r3, #255	; 0xff
 8002482:	73fb      	strb	r3, [r7, #15]
    UCHAR           ucCRCLo = 0xFF;
 8002484:	23ff      	movs	r3, #255	; 0xff
 8002486:	73bb      	strb	r3, [r7, #14]
    int             iIndex;

    while( usLen-- )
 8002488:	e013      	b.n	80024b2 <usMBCRC16+0x3e>
    {
        iIndex = ucCRCLo ^ *( pucFrame++ );
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	1c5a      	adds	r2, r3, #1
 800248e:	607a      	str	r2, [r7, #4]
 8002490:	781a      	ldrb	r2, [r3, #0]
 8002492:	7bbb      	ldrb	r3, [r7, #14]
 8002494:	4053      	eors	r3, r2
 8002496:	b2db      	uxtb	r3, r3
 8002498:	60bb      	str	r3, [r7, #8]
        ucCRCLo = ( UCHAR )( ucCRCHi ^ aucCRCHi[iIndex] );
 800249a:	4a0f      	ldr	r2, [pc, #60]	; (80024d8 <usMBCRC16+0x64>)
 800249c:	68bb      	ldr	r3, [r7, #8]
 800249e:	4413      	add	r3, r2
 80024a0:	781a      	ldrb	r2, [r3, #0]
 80024a2:	7bfb      	ldrb	r3, [r7, #15]
 80024a4:	4053      	eors	r3, r2
 80024a6:	73bb      	strb	r3, [r7, #14]
        ucCRCHi = aucCRCLo[iIndex];
 80024a8:	4a0c      	ldr	r2, [pc, #48]	; (80024dc <usMBCRC16+0x68>)
 80024aa:	68bb      	ldr	r3, [r7, #8]
 80024ac:	4413      	add	r3, r2
 80024ae:	781b      	ldrb	r3, [r3, #0]
 80024b0:	73fb      	strb	r3, [r7, #15]
    while( usLen-- )
 80024b2:	887b      	ldrh	r3, [r7, #2]
 80024b4:	1e5a      	subs	r2, r3, #1
 80024b6:	807a      	strh	r2, [r7, #2]
 80024b8:	2b00      	cmp	r3, #0
 80024ba:	d1e6      	bne.n	800248a <usMBCRC16+0x16>
    }
    return ( USHORT )( ucCRCHi << 8 | ucCRCLo );
 80024bc:	7bfb      	ldrb	r3, [r7, #15]
 80024be:	021b      	lsls	r3, r3, #8
 80024c0:	b21a      	sxth	r2, r3
 80024c2:	7bbb      	ldrb	r3, [r7, #14]
 80024c4:	b21b      	sxth	r3, r3
 80024c6:	4313      	orrs	r3, r2
 80024c8:	b21b      	sxth	r3, r3
 80024ca:	b29b      	uxth	r3, r3
}
 80024cc:	4618      	mov	r0, r3
 80024ce:	3714      	adds	r7, #20
 80024d0:	46bd      	mov	sp, r7
 80024d2:	bc80      	pop	{r7}
 80024d4:	4770      	bx	lr
 80024d6:	bf00      	nop
 80024d8:	08004440 	.word	0x08004440
 80024dc:	08004540 	.word	0x08004540

080024e0 <eMBFuncReadCoils>:

#if MB_FUNC_READ_COILS_ENABLED > 0

eMBException
eMBFuncReadCoils( UCHAR * pucFrame, USHORT * usLen )
{
 80024e0:	b580      	push	{r7, lr}
 80024e2:	b086      	sub	sp, #24
 80024e4:	af00      	add	r7, sp, #0
 80024e6:	6078      	str	r0, [r7, #4]
 80024e8:	6039      	str	r1, [r7, #0]
    USHORT          usRegAddress;
    USHORT          usCoilCount;
    UCHAR           ucNBytes;
    UCHAR          *pucFrameCur;

    eMBException    eStatus = MB_EX_NONE;
 80024ea:	2300      	movs	r3, #0
 80024ec:	75bb      	strb	r3, [r7, #22]
    eMBErrorCode    eRegStatus;

    if( *usLen == ( MB_PDU_FUNC_READ_SIZE + MB_PDU_SIZE_MIN ) )
 80024ee:	683b      	ldr	r3, [r7, #0]
 80024f0:	881b      	ldrh	r3, [r3, #0]
 80024f2:	2b05      	cmp	r3, #5
 80024f4:	d16c      	bne.n	80025d0 <eMBFuncReadCoils+0xf0>
    {
        usRegAddress = ( USHORT )( pucFrame[MB_PDU_FUNC_READ_ADDR_OFF] << 8 );
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	3301      	adds	r3, #1
 80024fa:	781b      	ldrb	r3, [r3, #0]
 80024fc:	b29b      	uxth	r3, r3
 80024fe:	021b      	lsls	r3, r3, #8
 8002500:	82bb      	strh	r3, [r7, #20]
        usRegAddress |= ( USHORT )( pucFrame[MB_PDU_FUNC_READ_ADDR_OFF + 1] );
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	3302      	adds	r3, #2
 8002506:	781b      	ldrb	r3, [r3, #0]
 8002508:	b29a      	uxth	r2, r3
 800250a:	8abb      	ldrh	r3, [r7, #20]
 800250c:	4313      	orrs	r3, r2
 800250e:	82bb      	strh	r3, [r7, #20]
        usRegAddress++;
 8002510:	8abb      	ldrh	r3, [r7, #20]
 8002512:	3301      	adds	r3, #1
 8002514:	82bb      	strh	r3, [r7, #20]

        usCoilCount = ( USHORT )( pucFrame[MB_PDU_FUNC_READ_COILCNT_OFF] << 8 );
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	3303      	adds	r3, #3
 800251a:	781b      	ldrb	r3, [r3, #0]
 800251c:	b29b      	uxth	r3, r3
 800251e:	021b      	lsls	r3, r3, #8
 8002520:	827b      	strh	r3, [r7, #18]
        usCoilCount |= ( USHORT )( pucFrame[MB_PDU_FUNC_READ_COILCNT_OFF + 1] );
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	3304      	adds	r3, #4
 8002526:	781b      	ldrb	r3, [r3, #0]
 8002528:	b29a      	uxth	r2, r3
 800252a:	8a7b      	ldrh	r3, [r7, #18]
 800252c:	4313      	orrs	r3, r2
 800252e:	827b      	strh	r3, [r7, #18]

        /* Check if the number of registers to read is valid. If not
         * return Modbus illegal data value exception. 
         */
        if( ( usCoilCount >= 1 ) &&
 8002530:	8a7b      	ldrh	r3, [r7, #18]
 8002532:	2b00      	cmp	r3, #0
 8002534:	d049      	beq.n	80025ca <eMBFuncReadCoils+0xea>
 8002536:	8a7b      	ldrh	r3, [r7, #18]
 8002538:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 800253c:	d245      	bcs.n	80025ca <eMBFuncReadCoils+0xea>
            ( usCoilCount < MB_PDU_FUNC_READ_COILCNT_MAX ) )
        {
            /* Set the current PDU data pointer to the beginning. */
            pucFrameCur = &pucFrame[MB_PDU_FUNC_OFF];
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	60fb      	str	r3, [r7, #12]
            *usLen = MB_PDU_FUNC_OFF;
 8002542:	683b      	ldr	r3, [r7, #0]
 8002544:	2200      	movs	r2, #0
 8002546:	801a      	strh	r2, [r3, #0]

            /* First byte contains the function code. */
            *pucFrameCur++ = MB_FUNC_READ_COILS;
 8002548:	68fb      	ldr	r3, [r7, #12]
 800254a:	1c5a      	adds	r2, r3, #1
 800254c:	60fa      	str	r2, [r7, #12]
 800254e:	2201      	movs	r2, #1
 8002550:	701a      	strb	r2, [r3, #0]
            *usLen += 1;
 8002552:	683b      	ldr	r3, [r7, #0]
 8002554:	881b      	ldrh	r3, [r3, #0]
 8002556:	3301      	adds	r3, #1
 8002558:	b29a      	uxth	r2, r3
 800255a:	683b      	ldr	r3, [r7, #0]
 800255c:	801a      	strh	r2, [r3, #0]

            /* Test if the quantity of coils is a multiple of 8. If not last
             * byte is only partially field with unused coils set to zero. */
            if( ( usCoilCount & 0x0007 ) != 0 )
 800255e:	8a7b      	ldrh	r3, [r7, #18]
 8002560:	f003 0307 	and.w	r3, r3, #7
 8002564:	2b00      	cmp	r3, #0
 8002566:	d006      	beq.n	8002576 <eMBFuncReadCoils+0x96>
            {
                ucNBytes = ( UCHAR )( usCoilCount / 8 + 1 );
 8002568:	8a7b      	ldrh	r3, [r7, #18]
 800256a:	08db      	lsrs	r3, r3, #3
 800256c:	b29b      	uxth	r3, r3
 800256e:	b2db      	uxtb	r3, r3
 8002570:	3301      	adds	r3, #1
 8002572:	75fb      	strb	r3, [r7, #23]
 8002574:	e003      	b.n	800257e <eMBFuncReadCoils+0x9e>
            }
            else
            {
                ucNBytes = ( UCHAR )( usCoilCount / 8 );
 8002576:	8a7b      	ldrh	r3, [r7, #18]
 8002578:	08db      	lsrs	r3, r3, #3
 800257a:	b29b      	uxth	r3, r3
 800257c:	75fb      	strb	r3, [r7, #23]
            }
            *pucFrameCur++ = ucNBytes;
 800257e:	68fb      	ldr	r3, [r7, #12]
 8002580:	1c5a      	adds	r2, r3, #1
 8002582:	60fa      	str	r2, [r7, #12]
 8002584:	7dfa      	ldrb	r2, [r7, #23]
 8002586:	701a      	strb	r2, [r3, #0]
            *usLen += 1;
 8002588:	683b      	ldr	r3, [r7, #0]
 800258a:	881b      	ldrh	r3, [r3, #0]
 800258c:	3301      	adds	r3, #1
 800258e:	b29a      	uxth	r2, r3
 8002590:	683b      	ldr	r3, [r7, #0]
 8002592:	801a      	strh	r2, [r3, #0]

            eRegStatus =
                eMBRegCoilsCB( pucFrameCur, usRegAddress, usCoilCount,
 8002594:	8a7a      	ldrh	r2, [r7, #18]
 8002596:	8ab9      	ldrh	r1, [r7, #20]
 8002598:	2300      	movs	r3, #0
 800259a:	68f8      	ldr	r0, [r7, #12]
 800259c:	f7fd ffa0 	bl	80004e0 <eMBRegCoilsCB>
 80025a0:	4603      	mov	r3, r0
 80025a2:	72fb      	strb	r3, [r7, #11]
                               MB_REG_READ );

            /* If an error occured convert it into a Modbus exception. */
            if( eRegStatus != MB_ENOERR )
 80025a4:	7afb      	ldrb	r3, [r7, #11]
 80025a6:	2b00      	cmp	r3, #0
 80025a8:	d006      	beq.n	80025b8 <eMBFuncReadCoils+0xd8>
            {
                eStatus = prveMBError2Exception( eRegStatus );
 80025aa:	7afb      	ldrb	r3, [r7, #11]
 80025ac:	4618      	mov	r0, r3
 80025ae:	f000 fd9b 	bl	80030e8 <prveMBError2Exception>
 80025b2:	4603      	mov	r3, r0
 80025b4:	75bb      	strb	r3, [r7, #22]
            if( eRegStatus != MB_ENOERR )
 80025b6:	e00d      	b.n	80025d4 <eMBFuncReadCoils+0xf4>
            else
            {
                /* The response contains the function code, the starting address
                 * and the quantity of registers. We reuse the old values in the 
                 * buffer because they are still valid. */
                *usLen += ucNBytes;;
 80025b8:	683b      	ldr	r3, [r7, #0]
 80025ba:	881a      	ldrh	r2, [r3, #0]
 80025bc:	7dfb      	ldrb	r3, [r7, #23]
 80025be:	b29b      	uxth	r3, r3
 80025c0:	4413      	add	r3, r2
 80025c2:	b29a      	uxth	r2, r3
 80025c4:	683b      	ldr	r3, [r7, #0]
 80025c6:	801a      	strh	r2, [r3, #0]
            if( eRegStatus != MB_ENOERR )
 80025c8:	e004      	b.n	80025d4 <eMBFuncReadCoils+0xf4>
            }
        }
        else
        {
            eStatus = MB_EX_ILLEGAL_DATA_VALUE;
 80025ca:	2303      	movs	r3, #3
 80025cc:	75bb      	strb	r3, [r7, #22]
 80025ce:	e001      	b.n	80025d4 <eMBFuncReadCoils+0xf4>
    }
    else
    {
        /* Can't be a valid read coil register request because the length
         * is incorrect. */
        eStatus = MB_EX_ILLEGAL_DATA_VALUE;
 80025d0:	2303      	movs	r3, #3
 80025d2:	75bb      	strb	r3, [r7, #22]
    }
    return eStatus;
 80025d4:	7dbb      	ldrb	r3, [r7, #22]
}
 80025d6:	4618      	mov	r0, r3
 80025d8:	3718      	adds	r7, #24
 80025da:	46bd      	mov	sp, r7
 80025dc:	bd80      	pop	{r7, pc}

080025de <eMBFuncWriteCoil>:

#if MB_FUNC_WRITE_COIL_ENABLED > 0
eMBException
eMBFuncWriteCoil( UCHAR * pucFrame, USHORT * usLen )
{
 80025de:	b580      	push	{r7, lr}
 80025e0:	b084      	sub	sp, #16
 80025e2:	af00      	add	r7, sp, #0
 80025e4:	6078      	str	r0, [r7, #4]
 80025e6:	6039      	str	r1, [r7, #0]
    USHORT          usRegAddress;
    UCHAR           ucBuf[2];

    eMBException    eStatus = MB_EX_NONE;
 80025e8:	2300      	movs	r3, #0
 80025ea:	73fb      	strb	r3, [r7, #15]
    eMBErrorCode    eRegStatus;

    if( *usLen == ( MB_PDU_FUNC_WRITE_SIZE + MB_PDU_SIZE_MIN ) )
 80025ec:	683b      	ldr	r3, [r7, #0]
 80025ee:	881b      	ldrh	r3, [r3, #0]
 80025f0:	2b05      	cmp	r3, #5
 80025f2:	d140      	bne.n	8002676 <eMBFuncWriteCoil+0x98>
    {
        usRegAddress = ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_ADDR_OFF] << 8 );
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	3301      	adds	r3, #1
 80025f8:	781b      	ldrb	r3, [r3, #0]
 80025fa:	b29b      	uxth	r3, r3
 80025fc:	021b      	lsls	r3, r3, #8
 80025fe:	81bb      	strh	r3, [r7, #12]
        usRegAddress |= ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_ADDR_OFF + 1] );
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	3302      	adds	r3, #2
 8002604:	781b      	ldrb	r3, [r3, #0]
 8002606:	b29a      	uxth	r2, r3
 8002608:	89bb      	ldrh	r3, [r7, #12]
 800260a:	4313      	orrs	r3, r2
 800260c:	81bb      	strh	r3, [r7, #12]
        usRegAddress++;
 800260e:	89bb      	ldrh	r3, [r7, #12]
 8002610:	3301      	adds	r3, #1
 8002612:	81bb      	strh	r3, [r7, #12]

        if( ( pucFrame[MB_PDU_FUNC_WRITE_VALUE_OFF + 1] == 0x00 ) &&
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	3304      	adds	r3, #4
 8002618:	781b      	ldrb	r3, [r3, #0]
 800261a:	2b00      	cmp	r3, #0
 800261c:	d128      	bne.n	8002670 <eMBFuncWriteCoil+0x92>
            ( ( pucFrame[MB_PDU_FUNC_WRITE_VALUE_OFF] == 0xFF ) ||
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	3303      	adds	r3, #3
 8002622:	781b      	ldrb	r3, [r3, #0]
        if( ( pucFrame[MB_PDU_FUNC_WRITE_VALUE_OFF + 1] == 0x00 ) &&
 8002624:	2bff      	cmp	r3, #255	; 0xff
 8002626:	d004      	beq.n	8002632 <eMBFuncWriteCoil+0x54>
              ( pucFrame[MB_PDU_FUNC_WRITE_VALUE_OFF] == 0x00 ) ) )
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	3303      	adds	r3, #3
 800262c:	781b      	ldrb	r3, [r3, #0]
            ( ( pucFrame[MB_PDU_FUNC_WRITE_VALUE_OFF] == 0xFF ) ||
 800262e:	2b00      	cmp	r3, #0
 8002630:	d11e      	bne.n	8002670 <eMBFuncWriteCoil+0x92>
        {
            ucBuf[1] = 0;
 8002632:	2300      	movs	r3, #0
 8002634:	727b      	strb	r3, [r7, #9]
            if( pucFrame[MB_PDU_FUNC_WRITE_VALUE_OFF] == 0xFF )
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	3303      	adds	r3, #3
 800263a:	781b      	ldrb	r3, [r3, #0]
 800263c:	2bff      	cmp	r3, #255	; 0xff
 800263e:	d102      	bne.n	8002646 <eMBFuncWriteCoil+0x68>
            {
                ucBuf[0] = 1;
 8002640:	2301      	movs	r3, #1
 8002642:	723b      	strb	r3, [r7, #8]
 8002644:	e001      	b.n	800264a <eMBFuncWriteCoil+0x6c>
            }
            else
            {
                ucBuf[0] = 0;
 8002646:	2300      	movs	r3, #0
 8002648:	723b      	strb	r3, [r7, #8]
            }
            eRegStatus =
                eMBRegCoilsCB( &ucBuf[0], usRegAddress, 1, MB_REG_WRITE );
 800264a:	89b9      	ldrh	r1, [r7, #12]
 800264c:	f107 0008 	add.w	r0, r7, #8
 8002650:	2301      	movs	r3, #1
 8002652:	2201      	movs	r2, #1
 8002654:	f7fd ff44 	bl	80004e0 <eMBRegCoilsCB>
 8002658:	4603      	mov	r3, r0
 800265a:	72fb      	strb	r3, [r7, #11]

            /* If an error occured convert it into a Modbus exception. */
            if( eRegStatus != MB_ENOERR )
 800265c:	7afb      	ldrb	r3, [r7, #11]
 800265e:	2b00      	cmp	r3, #0
 8002660:	d00b      	beq.n	800267a <eMBFuncWriteCoil+0x9c>
            {
                eStatus = prveMBError2Exception( eRegStatus );
 8002662:	7afb      	ldrb	r3, [r7, #11]
 8002664:	4618      	mov	r0, r3
 8002666:	f000 fd3f 	bl	80030e8 <prveMBError2Exception>
 800266a:	4603      	mov	r3, r0
 800266c:	73fb      	strb	r3, [r7, #15]
            if( eRegStatus != MB_ENOERR )
 800266e:	e004      	b.n	800267a <eMBFuncWriteCoil+0x9c>
            }
        }
        else
        {
            eStatus = MB_EX_ILLEGAL_DATA_VALUE;
 8002670:	2303      	movs	r3, #3
 8002672:	73fb      	strb	r3, [r7, #15]
 8002674:	e001      	b.n	800267a <eMBFuncWriteCoil+0x9c>
    }
    else
    {
        /* Can't be a valid write coil register request because the length
         * is incorrect. */
        eStatus = MB_EX_ILLEGAL_DATA_VALUE;
 8002676:	2303      	movs	r3, #3
 8002678:	73fb      	strb	r3, [r7, #15]
    }
    return eStatus;
 800267a:	7bfb      	ldrb	r3, [r7, #15]
}
 800267c:	4618      	mov	r0, r3
 800267e:	3710      	adds	r7, #16
 8002680:	46bd      	mov	sp, r7
 8002682:	bd80      	pop	{r7, pc}

08002684 <eMBFuncWriteMultipleCoils>:
#endif

#if MB_FUNC_WRITE_MULTIPLE_COILS_ENABLED > 0
eMBException
eMBFuncWriteMultipleCoils( UCHAR * pucFrame, USHORT * usLen )
{
 8002684:	b580      	push	{r7, lr}
 8002686:	b084      	sub	sp, #16
 8002688:	af00      	add	r7, sp, #0
 800268a:	6078      	str	r0, [r7, #4]
 800268c:	6039      	str	r1, [r7, #0]
    USHORT          usRegAddress;
    USHORT          usCoilCnt;
    UCHAR           ucByteCount;
    UCHAR           ucByteCountVerify;

    eMBException    eStatus = MB_EX_NONE;
 800268e:	2300      	movs	r3, #0
 8002690:	73bb      	strb	r3, [r7, #14]
    eMBErrorCode    eRegStatus;

    if( *usLen > ( MB_PDU_FUNC_WRITE_SIZE + MB_PDU_SIZE_MIN ) )
 8002692:	683b      	ldr	r3, [r7, #0]
 8002694:	881b      	ldrh	r3, [r3, #0]
 8002696:	2b05      	cmp	r3, #5
 8002698:	d954      	bls.n	8002744 <eMBFuncWriteMultipleCoils+0xc0>
    {
        usRegAddress = ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_MUL_ADDR_OFF] << 8 );
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	3301      	adds	r3, #1
 800269e:	781b      	ldrb	r3, [r3, #0]
 80026a0:	b29b      	uxth	r3, r3
 80026a2:	021b      	lsls	r3, r3, #8
 80026a4:	81bb      	strh	r3, [r7, #12]
        usRegAddress |= ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_MUL_ADDR_OFF + 1] );
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	3302      	adds	r3, #2
 80026aa:	781b      	ldrb	r3, [r3, #0]
 80026ac:	b29a      	uxth	r2, r3
 80026ae:	89bb      	ldrh	r3, [r7, #12]
 80026b0:	4313      	orrs	r3, r2
 80026b2:	81bb      	strh	r3, [r7, #12]
        usRegAddress++;
 80026b4:	89bb      	ldrh	r3, [r7, #12]
 80026b6:	3301      	adds	r3, #1
 80026b8:	81bb      	strh	r3, [r7, #12]

        usCoilCnt = ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_MUL_COILCNT_OFF] << 8 );
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	3303      	adds	r3, #3
 80026be:	781b      	ldrb	r3, [r3, #0]
 80026c0:	b29b      	uxth	r3, r3
 80026c2:	021b      	lsls	r3, r3, #8
 80026c4:	817b      	strh	r3, [r7, #10]
        usCoilCnt |= ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_MUL_COILCNT_OFF + 1] );
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	3304      	adds	r3, #4
 80026ca:	781b      	ldrb	r3, [r3, #0]
 80026cc:	b29a      	uxth	r2, r3
 80026ce:	897b      	ldrh	r3, [r7, #10]
 80026d0:	4313      	orrs	r3, r2
 80026d2:	817b      	strh	r3, [r7, #10]

        ucByteCount = pucFrame[MB_PDU_FUNC_WRITE_MUL_BYTECNT_OFF];
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	795b      	ldrb	r3, [r3, #5]
 80026d8:	727b      	strb	r3, [r7, #9]

        /* Compute the number of expected bytes in the request. */
        if( ( usCoilCnt & 0x0007 ) != 0 )
 80026da:	897b      	ldrh	r3, [r7, #10]
 80026dc:	f003 0307 	and.w	r3, r3, #7
 80026e0:	2b00      	cmp	r3, #0
 80026e2:	d006      	beq.n	80026f2 <eMBFuncWriteMultipleCoils+0x6e>
        {
            ucByteCountVerify = ( UCHAR )( usCoilCnt / 8 + 1 );
 80026e4:	897b      	ldrh	r3, [r7, #10]
 80026e6:	08db      	lsrs	r3, r3, #3
 80026e8:	b29b      	uxth	r3, r3
 80026ea:	b2db      	uxtb	r3, r3
 80026ec:	3301      	adds	r3, #1
 80026ee:	73fb      	strb	r3, [r7, #15]
 80026f0:	e003      	b.n	80026fa <eMBFuncWriteMultipleCoils+0x76>
        }
        else
        {
            ucByteCountVerify = ( UCHAR )( usCoilCnt / 8 );
 80026f2:	897b      	ldrh	r3, [r7, #10]
 80026f4:	08db      	lsrs	r3, r3, #3
 80026f6:	b29b      	uxth	r3, r3
 80026f8:	73fb      	strb	r3, [r7, #15]
        }

        if( ( usCoilCnt >= 1 ) &&
 80026fa:	897b      	ldrh	r3, [r7, #10]
 80026fc:	2b00      	cmp	r3, #0
 80026fe:	d01e      	beq.n	800273e <eMBFuncWriteMultipleCoils+0xba>
 8002700:	897b      	ldrh	r3, [r7, #10]
 8002702:	f5b3 6ff6 	cmp.w	r3, #1968	; 0x7b0
 8002706:	d81a      	bhi.n	800273e <eMBFuncWriteMultipleCoils+0xba>
            ( usCoilCnt <= MB_PDU_FUNC_WRITE_MUL_COILCNT_MAX ) &&
 8002708:	7bfa      	ldrb	r2, [r7, #15]
 800270a:	7a7b      	ldrb	r3, [r7, #9]
 800270c:	429a      	cmp	r2, r3
 800270e:	d116      	bne.n	800273e <eMBFuncWriteMultipleCoils+0xba>
            ( ucByteCountVerify == ucByteCount ) )
        {
            eRegStatus =
                eMBRegCoilsCB( &pucFrame[MB_PDU_FUNC_WRITE_MUL_VALUES_OFF],
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	1d98      	adds	r0, r3, #6
 8002714:	897a      	ldrh	r2, [r7, #10]
 8002716:	89b9      	ldrh	r1, [r7, #12]
 8002718:	2301      	movs	r3, #1
 800271a:	f7fd fee1 	bl	80004e0 <eMBRegCoilsCB>
 800271e:	4603      	mov	r3, r0
 8002720:	723b      	strb	r3, [r7, #8]
                               usRegAddress, usCoilCnt, MB_REG_WRITE );

            /* If an error occured convert it into a Modbus exception. */
            if( eRegStatus != MB_ENOERR )
 8002722:	7a3b      	ldrb	r3, [r7, #8]
 8002724:	2b00      	cmp	r3, #0
 8002726:	d006      	beq.n	8002736 <eMBFuncWriteMultipleCoils+0xb2>
            {
                eStatus = prveMBError2Exception( eRegStatus );
 8002728:	7a3b      	ldrb	r3, [r7, #8]
 800272a:	4618      	mov	r0, r3
 800272c:	f000 fcdc 	bl	80030e8 <prveMBError2Exception>
 8002730:	4603      	mov	r3, r0
 8002732:	73bb      	strb	r3, [r7, #14]
            if( eRegStatus != MB_ENOERR )
 8002734:	e008      	b.n	8002748 <eMBFuncWriteMultipleCoils+0xc4>
            else
            {
                /* The response contains the function code, the starting address
                 * and the quantity of registers. We reuse the old values in the 
                 * buffer because they are still valid. */
                *usLen = MB_PDU_FUNC_WRITE_MUL_BYTECNT_OFF;
 8002736:	683b      	ldr	r3, [r7, #0]
 8002738:	2205      	movs	r2, #5
 800273a:	801a      	strh	r2, [r3, #0]
            if( eRegStatus != MB_ENOERR )
 800273c:	e004      	b.n	8002748 <eMBFuncWriteMultipleCoils+0xc4>
            }
        }
        else
        {
            eStatus = MB_EX_ILLEGAL_DATA_VALUE;
 800273e:	2303      	movs	r3, #3
 8002740:	73bb      	strb	r3, [r7, #14]
 8002742:	e001      	b.n	8002748 <eMBFuncWriteMultipleCoils+0xc4>
    }
    else
    {
        /* Can't be a valid write coil register request because the length
         * is incorrect. */
        eStatus = MB_EX_ILLEGAL_DATA_VALUE;
 8002744:	2303      	movs	r3, #3
 8002746:	73bb      	strb	r3, [r7, #14]
    }
    return eStatus;
 8002748:	7bbb      	ldrb	r3, [r7, #14]
}
 800274a:	4618      	mov	r0, r3
 800274c:	3710      	adds	r7, #16
 800274e:	46bd      	mov	sp, r7
 8002750:	bd80      	pop	{r7, pc}

08002752 <eMBFuncReadDiscreteInputs>:

#if MB_FUNC_READ_COILS_ENABLED > 0

eMBException
eMBFuncReadDiscreteInputs( UCHAR * pucFrame, USHORT * usLen )
{
 8002752:	b580      	push	{r7, lr}
 8002754:	b086      	sub	sp, #24
 8002756:	af00      	add	r7, sp, #0
 8002758:	6078      	str	r0, [r7, #4]
 800275a:	6039      	str	r1, [r7, #0]
    USHORT          usRegAddress;
    USHORT          usDiscreteCnt;
    UCHAR           ucNBytes;
    UCHAR          *pucFrameCur;

    eMBException    eStatus = MB_EX_NONE;
 800275c:	2300      	movs	r3, #0
 800275e:	75bb      	strb	r3, [r7, #22]
    eMBErrorCode    eRegStatus;

    if( *usLen == ( MB_PDU_FUNC_READ_SIZE + MB_PDU_SIZE_MIN ) )
 8002760:	683b      	ldr	r3, [r7, #0]
 8002762:	881b      	ldrh	r3, [r3, #0]
 8002764:	2b05      	cmp	r3, #5
 8002766:	d16c      	bne.n	8002842 <eMBFuncReadDiscreteInputs+0xf0>
    {
        usRegAddress = ( USHORT )( pucFrame[MB_PDU_FUNC_READ_ADDR_OFF] << 8 );
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	3301      	adds	r3, #1
 800276c:	781b      	ldrb	r3, [r3, #0]
 800276e:	b29b      	uxth	r3, r3
 8002770:	021b      	lsls	r3, r3, #8
 8002772:	82bb      	strh	r3, [r7, #20]
        usRegAddress |= ( USHORT )( pucFrame[MB_PDU_FUNC_READ_ADDR_OFF + 1] );
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	3302      	adds	r3, #2
 8002778:	781b      	ldrb	r3, [r3, #0]
 800277a:	b29a      	uxth	r2, r3
 800277c:	8abb      	ldrh	r3, [r7, #20]
 800277e:	4313      	orrs	r3, r2
 8002780:	82bb      	strh	r3, [r7, #20]
        usRegAddress++;
 8002782:	8abb      	ldrh	r3, [r7, #20]
 8002784:	3301      	adds	r3, #1
 8002786:	82bb      	strh	r3, [r7, #20]

        usDiscreteCnt = ( USHORT )( pucFrame[MB_PDU_FUNC_READ_DISCCNT_OFF] << 8 );
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	3303      	adds	r3, #3
 800278c:	781b      	ldrb	r3, [r3, #0]
 800278e:	b29b      	uxth	r3, r3
 8002790:	021b      	lsls	r3, r3, #8
 8002792:	827b      	strh	r3, [r7, #18]
        usDiscreteCnt |= ( USHORT )( pucFrame[MB_PDU_FUNC_READ_DISCCNT_OFF + 1] );
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	3304      	adds	r3, #4
 8002798:	781b      	ldrb	r3, [r3, #0]
 800279a:	b29a      	uxth	r2, r3
 800279c:	8a7b      	ldrh	r3, [r7, #18]
 800279e:	4313      	orrs	r3, r2
 80027a0:	827b      	strh	r3, [r7, #18]

        /* Check if the number of registers to read is valid. If not
         * return Modbus illegal data value exception. 
         */
        if( ( usDiscreteCnt >= 1 ) &&
 80027a2:	8a7b      	ldrh	r3, [r7, #18]
 80027a4:	2b00      	cmp	r3, #0
 80027a6:	d049      	beq.n	800283c <eMBFuncReadDiscreteInputs+0xea>
 80027a8:	8a7b      	ldrh	r3, [r7, #18]
 80027aa:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 80027ae:	d245      	bcs.n	800283c <eMBFuncReadDiscreteInputs+0xea>
            ( usDiscreteCnt < MB_PDU_FUNC_READ_DISCCNT_MAX ) )
        {
            /* Set the current PDU data pointer to the beginning. */
            pucFrameCur = &pucFrame[MB_PDU_FUNC_OFF];
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	60fb      	str	r3, [r7, #12]
            *usLen = MB_PDU_FUNC_OFF;
 80027b4:	683b      	ldr	r3, [r7, #0]
 80027b6:	2200      	movs	r2, #0
 80027b8:	801a      	strh	r2, [r3, #0]

            /* First byte contains the function code. */
            *pucFrameCur++ = MB_FUNC_READ_DISCRETE_INPUTS;
 80027ba:	68fb      	ldr	r3, [r7, #12]
 80027bc:	1c5a      	adds	r2, r3, #1
 80027be:	60fa      	str	r2, [r7, #12]
 80027c0:	2202      	movs	r2, #2
 80027c2:	701a      	strb	r2, [r3, #0]
            *usLen += 1;
 80027c4:	683b      	ldr	r3, [r7, #0]
 80027c6:	881b      	ldrh	r3, [r3, #0]
 80027c8:	3301      	adds	r3, #1
 80027ca:	b29a      	uxth	r2, r3
 80027cc:	683b      	ldr	r3, [r7, #0]
 80027ce:	801a      	strh	r2, [r3, #0]

            /* Test if the quantity of coils is a multiple of 8. If not last
             * byte is only partially field with unused coils set to zero. */
            if( ( usDiscreteCnt & 0x0007 ) != 0 )
 80027d0:	8a7b      	ldrh	r3, [r7, #18]
 80027d2:	f003 0307 	and.w	r3, r3, #7
 80027d6:	2b00      	cmp	r3, #0
 80027d8:	d006      	beq.n	80027e8 <eMBFuncReadDiscreteInputs+0x96>
            {
                ucNBytes = ( UCHAR ) ( usDiscreteCnt / 8 + 1 );
 80027da:	8a7b      	ldrh	r3, [r7, #18]
 80027dc:	08db      	lsrs	r3, r3, #3
 80027de:	b29b      	uxth	r3, r3
 80027e0:	b2db      	uxtb	r3, r3
 80027e2:	3301      	adds	r3, #1
 80027e4:	75fb      	strb	r3, [r7, #23]
 80027e6:	e003      	b.n	80027f0 <eMBFuncReadDiscreteInputs+0x9e>
            }
            else
            {
                ucNBytes = ( UCHAR ) ( usDiscreteCnt / 8 );
 80027e8:	8a7b      	ldrh	r3, [r7, #18]
 80027ea:	08db      	lsrs	r3, r3, #3
 80027ec:	b29b      	uxth	r3, r3
 80027ee:	75fb      	strb	r3, [r7, #23]
            }
            *pucFrameCur++ = ucNBytes;
 80027f0:	68fb      	ldr	r3, [r7, #12]
 80027f2:	1c5a      	adds	r2, r3, #1
 80027f4:	60fa      	str	r2, [r7, #12]
 80027f6:	7dfa      	ldrb	r2, [r7, #23]
 80027f8:	701a      	strb	r2, [r3, #0]
            *usLen += 1;
 80027fa:	683b      	ldr	r3, [r7, #0]
 80027fc:	881b      	ldrh	r3, [r3, #0]
 80027fe:	3301      	adds	r3, #1
 8002800:	b29a      	uxth	r2, r3
 8002802:	683b      	ldr	r3, [r7, #0]
 8002804:	801a      	strh	r2, [r3, #0]

            eRegStatus =
                eMBRegDiscreteCB( pucFrameCur, usRegAddress, usDiscreteCnt );
 8002806:	8a7a      	ldrh	r2, [r7, #18]
 8002808:	8abb      	ldrh	r3, [r7, #20]
 800280a:	4619      	mov	r1, r3
 800280c:	68f8      	ldr	r0, [r7, #12]
 800280e:	f7fd fe7a 	bl	8000506 <eMBRegDiscreteCB>
 8002812:	4603      	mov	r3, r0
 8002814:	72fb      	strb	r3, [r7, #11]

            /* If an error occured convert it into a Modbus exception. */
            if( eRegStatus != MB_ENOERR )
 8002816:	7afb      	ldrb	r3, [r7, #11]
 8002818:	2b00      	cmp	r3, #0
 800281a:	d006      	beq.n	800282a <eMBFuncReadDiscreteInputs+0xd8>
            {
                eStatus = prveMBError2Exception( eRegStatus );
 800281c:	7afb      	ldrb	r3, [r7, #11]
 800281e:	4618      	mov	r0, r3
 8002820:	f000 fc62 	bl	80030e8 <prveMBError2Exception>
 8002824:	4603      	mov	r3, r0
 8002826:	75bb      	strb	r3, [r7, #22]
            if( eRegStatus != MB_ENOERR )
 8002828:	e00d      	b.n	8002846 <eMBFuncReadDiscreteInputs+0xf4>
            else
            {
                /* The response contains the function code, the starting address
                 * and the quantity of registers. We reuse the old values in the 
                 * buffer because they are still valid. */
                *usLen += ucNBytes;;
 800282a:	683b      	ldr	r3, [r7, #0]
 800282c:	881a      	ldrh	r2, [r3, #0]
 800282e:	7dfb      	ldrb	r3, [r7, #23]
 8002830:	b29b      	uxth	r3, r3
 8002832:	4413      	add	r3, r2
 8002834:	b29a      	uxth	r2, r3
 8002836:	683b      	ldr	r3, [r7, #0]
 8002838:	801a      	strh	r2, [r3, #0]
            if( eRegStatus != MB_ENOERR )
 800283a:	e004      	b.n	8002846 <eMBFuncReadDiscreteInputs+0xf4>
            }
        }
        else
        {
            eStatus = MB_EX_ILLEGAL_DATA_VALUE;
 800283c:	2303      	movs	r3, #3
 800283e:	75bb      	strb	r3, [r7, #22]
 8002840:	e001      	b.n	8002846 <eMBFuncReadDiscreteInputs+0xf4>
    }
    else
    {
        /* Can't be a valid read coil register request because the length
         * is incorrect. */
        eStatus = MB_EX_ILLEGAL_DATA_VALUE;
 8002842:	2303      	movs	r3, #3
 8002844:	75bb      	strb	r3, [r7, #22]
    }
    return eStatus;
 8002846:	7dbb      	ldrb	r3, [r7, #22]
}
 8002848:	4618      	mov	r0, r3
 800284a:	3718      	adds	r7, #24
 800284c:	46bd      	mov	sp, r7
 800284e:	bd80      	pop	{r7, pc}

08002850 <eMBFuncWriteHoldingRegister>:

#if MB_FUNC_WRITE_HOLDING_ENABLED > 0

eMBException
eMBFuncWriteHoldingRegister( UCHAR * pucFrame, USHORT * usLen )
{
 8002850:	b580      	push	{r7, lr}
 8002852:	b084      	sub	sp, #16
 8002854:	af00      	add	r7, sp, #0
 8002856:	6078      	str	r0, [r7, #4]
 8002858:	6039      	str	r1, [r7, #0]
    USHORT          usRegAddress;
    eMBException    eStatus = MB_EX_NONE;
 800285a:	2300      	movs	r3, #0
 800285c:	73fb      	strb	r3, [r7, #15]
    eMBErrorCode    eRegStatus;

    if( *usLen == ( MB_PDU_FUNC_WRITE_SIZE + MB_PDU_SIZE_MIN ) )
 800285e:	683b      	ldr	r3, [r7, #0]
 8002860:	881b      	ldrh	r3, [r3, #0]
 8002862:	2b05      	cmp	r3, #5
 8002864:	d122      	bne.n	80028ac <eMBFuncWriteHoldingRegister+0x5c>
    {
        usRegAddress = ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_ADDR_OFF] << 8 );
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	3301      	adds	r3, #1
 800286a:	781b      	ldrb	r3, [r3, #0]
 800286c:	b29b      	uxth	r3, r3
 800286e:	021b      	lsls	r3, r3, #8
 8002870:	81bb      	strh	r3, [r7, #12]
        usRegAddress |= ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_ADDR_OFF + 1] );
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	3302      	adds	r3, #2
 8002876:	781b      	ldrb	r3, [r3, #0]
 8002878:	b29a      	uxth	r2, r3
 800287a:	89bb      	ldrh	r3, [r7, #12]
 800287c:	4313      	orrs	r3, r2
 800287e:	81bb      	strh	r3, [r7, #12]
        usRegAddress++;
 8002880:	89bb      	ldrh	r3, [r7, #12]
 8002882:	3301      	adds	r3, #1
 8002884:	81bb      	strh	r3, [r7, #12]

        /* Make callback to update the value. */
        eRegStatus = eMBRegHoldingCB( &pucFrame[MB_PDU_FUNC_WRITE_VALUE_OFF],
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	1cd8      	adds	r0, r3, #3
 800288a:	89b9      	ldrh	r1, [r7, #12]
 800288c:	2301      	movs	r3, #1
 800288e:	2201      	movs	r2, #1
 8002890:	f7fd fdb2 	bl	80003f8 <eMBRegHoldingCB>
 8002894:	4603      	mov	r3, r0
 8002896:	72fb      	strb	r3, [r7, #11]
                                      usRegAddress, 1, MB_REG_WRITE );

        /* If an error occured convert it into a Modbus exception. */
        if( eRegStatus != MB_ENOERR )
 8002898:	7afb      	ldrb	r3, [r7, #11]
 800289a:	2b00      	cmp	r3, #0
 800289c:	d008      	beq.n	80028b0 <eMBFuncWriteHoldingRegister+0x60>
        {
            eStatus = prveMBError2Exception( eRegStatus );
 800289e:	7afb      	ldrb	r3, [r7, #11]
 80028a0:	4618      	mov	r0, r3
 80028a2:	f000 fc21 	bl	80030e8 <prveMBError2Exception>
 80028a6:	4603      	mov	r3, r0
 80028a8:	73fb      	strb	r3, [r7, #15]
 80028aa:	e001      	b.n	80028b0 <eMBFuncWriteHoldingRegister+0x60>
        }
    }
    else
    {
        /* Can't be a valid request because the length is incorrect. */
        eStatus = MB_EX_ILLEGAL_DATA_VALUE;
 80028ac:	2303      	movs	r3, #3
 80028ae:	73fb      	strb	r3, [r7, #15]
    }
    return eStatus;
 80028b0:	7bfb      	ldrb	r3, [r7, #15]
}
 80028b2:	4618      	mov	r0, r3
 80028b4:	3710      	adds	r7, #16
 80028b6:	46bd      	mov	sp, r7
 80028b8:	bd80      	pop	{r7, pc}

080028ba <eMBFuncWriteMultipleHoldingRegister>:
#endif

#if MB_FUNC_WRITE_MULTIPLE_HOLDING_ENABLED > 0
eMBException
eMBFuncWriteMultipleHoldingRegister( UCHAR * pucFrame, USHORT * usLen )
{
 80028ba:	b580      	push	{r7, lr}
 80028bc:	b084      	sub	sp, #16
 80028be:	af00      	add	r7, sp, #0
 80028c0:	6078      	str	r0, [r7, #4]
 80028c2:	6039      	str	r1, [r7, #0]
    USHORT          usRegAddress;
    USHORT          usRegCount;
    UCHAR           ucRegByteCount;

    eMBException    eStatus = MB_EX_NONE;
 80028c4:	2300      	movs	r3, #0
 80028c6:	73fb      	strb	r3, [r7, #15]
    eMBErrorCode    eRegStatus;

    if( *usLen >= ( MB_PDU_FUNC_WRITE_MUL_SIZE_MIN + MB_PDU_SIZE_MIN ) )
 80028c8:	683b      	ldr	r3, [r7, #0]
 80028ca:	881b      	ldrh	r3, [r3, #0]
 80028cc:	2b05      	cmp	r3, #5
 80028ce:	d946      	bls.n	800295e <eMBFuncWriteMultipleHoldingRegister+0xa4>
    {
        usRegAddress = ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_MUL_ADDR_OFF] << 8 );
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	3301      	adds	r3, #1
 80028d4:	781b      	ldrb	r3, [r3, #0]
 80028d6:	b29b      	uxth	r3, r3
 80028d8:	021b      	lsls	r3, r3, #8
 80028da:	81bb      	strh	r3, [r7, #12]
        usRegAddress |= ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_MUL_ADDR_OFF + 1] );
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	3302      	adds	r3, #2
 80028e0:	781b      	ldrb	r3, [r3, #0]
 80028e2:	b29a      	uxth	r2, r3
 80028e4:	89bb      	ldrh	r3, [r7, #12]
 80028e6:	4313      	orrs	r3, r2
 80028e8:	81bb      	strh	r3, [r7, #12]
        usRegAddress++;
 80028ea:	89bb      	ldrh	r3, [r7, #12]
 80028ec:	3301      	adds	r3, #1
 80028ee:	81bb      	strh	r3, [r7, #12]

        usRegCount = ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_MUL_REGCNT_OFF] << 8 );
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	3303      	adds	r3, #3
 80028f4:	781b      	ldrb	r3, [r3, #0]
 80028f6:	b29b      	uxth	r3, r3
 80028f8:	021b      	lsls	r3, r3, #8
 80028fa:	817b      	strh	r3, [r7, #10]
        usRegCount |= ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_MUL_REGCNT_OFF + 1] );
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	3304      	adds	r3, #4
 8002900:	781b      	ldrb	r3, [r3, #0]
 8002902:	b29a      	uxth	r2, r3
 8002904:	897b      	ldrh	r3, [r7, #10]
 8002906:	4313      	orrs	r3, r2
 8002908:	817b      	strh	r3, [r7, #10]

        ucRegByteCount = pucFrame[MB_PDU_FUNC_WRITE_MUL_BYTECNT_OFF];
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	795b      	ldrb	r3, [r3, #5]
 800290e:	727b      	strb	r3, [r7, #9]

        if( ( usRegCount >= 1 ) &&
 8002910:	897b      	ldrh	r3, [r7, #10]
 8002912:	2b00      	cmp	r3, #0
 8002914:	d020      	beq.n	8002958 <eMBFuncWriteMultipleHoldingRegister+0x9e>
 8002916:	897b      	ldrh	r3, [r7, #10]
 8002918:	2b78      	cmp	r3, #120	; 0x78
 800291a:	d81d      	bhi.n	8002958 <eMBFuncWriteMultipleHoldingRegister+0x9e>
            ( usRegCount <= MB_PDU_FUNC_WRITE_MUL_REGCNT_MAX ) &&
            ( ucRegByteCount == ( UCHAR ) ( 2 * usRegCount ) ) )
 800291c:	897b      	ldrh	r3, [r7, #10]
 800291e:	b2db      	uxtb	r3, r3
 8002920:	005b      	lsls	r3, r3, #1
 8002922:	b2db      	uxtb	r3, r3
            ( usRegCount <= MB_PDU_FUNC_WRITE_MUL_REGCNT_MAX ) &&
 8002924:	7a7a      	ldrb	r2, [r7, #9]
 8002926:	429a      	cmp	r2, r3
 8002928:	d116      	bne.n	8002958 <eMBFuncWriteMultipleHoldingRegister+0x9e>
        {
            /* Make callback to update the register values. */
            eRegStatus =
                eMBRegHoldingCB( &pucFrame[MB_PDU_FUNC_WRITE_MUL_VALUES_OFF],
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	1d98      	adds	r0, r3, #6
 800292e:	897a      	ldrh	r2, [r7, #10]
 8002930:	89b9      	ldrh	r1, [r7, #12]
 8002932:	2301      	movs	r3, #1
 8002934:	f7fd fd60 	bl	80003f8 <eMBRegHoldingCB>
 8002938:	4603      	mov	r3, r0
 800293a:	723b      	strb	r3, [r7, #8]
                                 usRegAddress, usRegCount, MB_REG_WRITE );

            /* If an error occured convert it into a Modbus exception. */
            if( eRegStatus != MB_ENOERR )
 800293c:	7a3b      	ldrb	r3, [r7, #8]
 800293e:	2b00      	cmp	r3, #0
 8002940:	d006      	beq.n	8002950 <eMBFuncWriteMultipleHoldingRegister+0x96>
            {
                eStatus = prveMBError2Exception( eRegStatus );
 8002942:	7a3b      	ldrb	r3, [r7, #8]
 8002944:	4618      	mov	r0, r3
 8002946:	f000 fbcf 	bl	80030e8 <prveMBError2Exception>
 800294a:	4603      	mov	r3, r0
 800294c:	73fb      	strb	r3, [r7, #15]
            if( eRegStatus != MB_ENOERR )
 800294e:	e008      	b.n	8002962 <eMBFuncWriteMultipleHoldingRegister+0xa8>
            {
                /* The response contains the function code, the starting
                 * address and the quantity of registers. We reuse the
                 * old values in the buffer because they are still valid.
                 */
                *usLen = MB_PDU_FUNC_WRITE_MUL_BYTECNT_OFF;
 8002950:	683b      	ldr	r3, [r7, #0]
 8002952:	2205      	movs	r2, #5
 8002954:	801a      	strh	r2, [r3, #0]
            if( eRegStatus != MB_ENOERR )
 8002956:	e004      	b.n	8002962 <eMBFuncWriteMultipleHoldingRegister+0xa8>
            }
        }
        else
        {
            eStatus = MB_EX_ILLEGAL_DATA_VALUE;
 8002958:	2303      	movs	r3, #3
 800295a:	73fb      	strb	r3, [r7, #15]
 800295c:	e001      	b.n	8002962 <eMBFuncWriteMultipleHoldingRegister+0xa8>
        }
    }
    else
    {
        /* Can't be a valid request because the length is incorrect. */
        eStatus = MB_EX_ILLEGAL_DATA_VALUE;
 800295e:	2303      	movs	r3, #3
 8002960:	73fb      	strb	r3, [r7, #15]
    }
    return eStatus;
 8002962:	7bfb      	ldrb	r3, [r7, #15]
}
 8002964:	4618      	mov	r0, r3
 8002966:	3710      	adds	r7, #16
 8002968:	46bd      	mov	sp, r7
 800296a:	bd80      	pop	{r7, pc}

0800296c <eMBFuncReadHoldingRegister>:

#if MB_FUNC_READ_HOLDING_ENABLED > 0

eMBException
eMBFuncReadHoldingRegister( UCHAR * pucFrame, USHORT * usLen )
{
 800296c:	b580      	push	{r7, lr}
 800296e:	b086      	sub	sp, #24
 8002970:	af00      	add	r7, sp, #0
 8002972:	6078      	str	r0, [r7, #4]
 8002974:	6039      	str	r1, [r7, #0]
    USHORT          usRegAddress;
    USHORT          usRegCount;
    UCHAR          *pucFrameCur;

    eMBException    eStatus = MB_EX_NONE;
 8002976:	2300      	movs	r3, #0
 8002978:	75fb      	strb	r3, [r7, #23]
    eMBErrorCode    eRegStatus;

    if( *usLen == ( MB_PDU_FUNC_READ_SIZE + MB_PDU_SIZE_MIN ) )
 800297a:	683b      	ldr	r3, [r7, #0]
 800297c:	881b      	ldrh	r3, [r3, #0]
 800297e:	2b05      	cmp	r3, #5
 8002980:	d15c      	bne.n	8002a3c <eMBFuncReadHoldingRegister+0xd0>
    {
        usRegAddress = ( USHORT )( pucFrame[MB_PDU_FUNC_READ_ADDR_OFF] << 8 );
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	3301      	adds	r3, #1
 8002986:	781b      	ldrb	r3, [r3, #0]
 8002988:	b29b      	uxth	r3, r3
 800298a:	021b      	lsls	r3, r3, #8
 800298c:	82bb      	strh	r3, [r7, #20]
        usRegAddress |= ( USHORT )( pucFrame[MB_PDU_FUNC_READ_ADDR_OFF + 1] );
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	3302      	adds	r3, #2
 8002992:	781b      	ldrb	r3, [r3, #0]
 8002994:	b29a      	uxth	r2, r3
 8002996:	8abb      	ldrh	r3, [r7, #20]
 8002998:	4313      	orrs	r3, r2
 800299a:	82bb      	strh	r3, [r7, #20]
        usRegAddress++;
 800299c:	8abb      	ldrh	r3, [r7, #20]
 800299e:	3301      	adds	r3, #1
 80029a0:	82bb      	strh	r3, [r7, #20]

        usRegCount = ( USHORT )( pucFrame[MB_PDU_FUNC_READ_REGCNT_OFF] << 8 );
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	3303      	adds	r3, #3
 80029a6:	781b      	ldrb	r3, [r3, #0]
 80029a8:	b29b      	uxth	r3, r3
 80029aa:	021b      	lsls	r3, r3, #8
 80029ac:	827b      	strh	r3, [r7, #18]
        usRegCount = ( USHORT )( pucFrame[MB_PDU_FUNC_READ_REGCNT_OFF + 1] );
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	3304      	adds	r3, #4
 80029b2:	781b      	ldrb	r3, [r3, #0]
 80029b4:	827b      	strh	r3, [r7, #18]

        /* Check if the number of registers to read is valid. If not
         * return Modbus illegal data value exception. 
         */
        if( ( usRegCount >= 1 ) && ( usRegCount <= MB_PDU_FUNC_READ_REGCNT_MAX ) )
 80029b6:	8a7b      	ldrh	r3, [r7, #18]
 80029b8:	2b00      	cmp	r3, #0
 80029ba:	d03c      	beq.n	8002a36 <eMBFuncReadHoldingRegister+0xca>
 80029bc:	8a7b      	ldrh	r3, [r7, #18]
 80029be:	2b7d      	cmp	r3, #125	; 0x7d
 80029c0:	d839      	bhi.n	8002a36 <eMBFuncReadHoldingRegister+0xca>
        {
            /* Set the current PDU data pointer to the beginning. */
            pucFrameCur = &pucFrame[MB_PDU_FUNC_OFF];
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	60fb      	str	r3, [r7, #12]
            *usLen = MB_PDU_FUNC_OFF;
 80029c6:	683b      	ldr	r3, [r7, #0]
 80029c8:	2200      	movs	r2, #0
 80029ca:	801a      	strh	r2, [r3, #0]

            /* First byte contains the function code. */
            *pucFrameCur++ = MB_FUNC_READ_HOLDING_REGISTER;
 80029cc:	68fb      	ldr	r3, [r7, #12]
 80029ce:	1c5a      	adds	r2, r3, #1
 80029d0:	60fa      	str	r2, [r7, #12]
 80029d2:	2203      	movs	r2, #3
 80029d4:	701a      	strb	r2, [r3, #0]
            *usLen += 1;
 80029d6:	683b      	ldr	r3, [r7, #0]
 80029d8:	881b      	ldrh	r3, [r3, #0]
 80029da:	3301      	adds	r3, #1
 80029dc:	b29a      	uxth	r2, r3
 80029de:	683b      	ldr	r3, [r7, #0]
 80029e0:	801a      	strh	r2, [r3, #0]

            /* Second byte in the response contain the number of bytes. */
            *pucFrameCur++ = ( UCHAR ) ( usRegCount * 2 );
 80029e2:	8a7b      	ldrh	r3, [r7, #18]
 80029e4:	b2da      	uxtb	r2, r3
 80029e6:	68fb      	ldr	r3, [r7, #12]
 80029e8:	1c59      	adds	r1, r3, #1
 80029ea:	60f9      	str	r1, [r7, #12]
 80029ec:	0052      	lsls	r2, r2, #1
 80029ee:	b2d2      	uxtb	r2, r2
 80029f0:	701a      	strb	r2, [r3, #0]
            *usLen += 1;
 80029f2:	683b      	ldr	r3, [r7, #0]
 80029f4:	881b      	ldrh	r3, [r3, #0]
 80029f6:	3301      	adds	r3, #1
 80029f8:	b29a      	uxth	r2, r3
 80029fa:	683b      	ldr	r3, [r7, #0]
 80029fc:	801a      	strh	r2, [r3, #0]

            /* Make callback to fill the buffer. */
            eRegStatus = eMBRegHoldingCB( pucFrameCur, usRegAddress, usRegCount, MB_REG_READ );
 80029fe:	8a7a      	ldrh	r2, [r7, #18]
 8002a00:	8ab9      	ldrh	r1, [r7, #20]
 8002a02:	2300      	movs	r3, #0
 8002a04:	68f8      	ldr	r0, [r7, #12]
 8002a06:	f7fd fcf7 	bl	80003f8 <eMBRegHoldingCB>
 8002a0a:	4603      	mov	r3, r0
 8002a0c:	72fb      	strb	r3, [r7, #11]
            /* If an error occured convert it into a Modbus exception. */
            if( eRegStatus != MB_ENOERR )
 8002a0e:	7afb      	ldrb	r3, [r7, #11]
 8002a10:	2b00      	cmp	r3, #0
 8002a12:	d006      	beq.n	8002a22 <eMBFuncReadHoldingRegister+0xb6>
            {
                eStatus = prveMBError2Exception( eRegStatus );
 8002a14:	7afb      	ldrb	r3, [r7, #11]
 8002a16:	4618      	mov	r0, r3
 8002a18:	f000 fb66 	bl	80030e8 <prveMBError2Exception>
 8002a1c:	4603      	mov	r3, r0
 8002a1e:	75fb      	strb	r3, [r7, #23]
            if( eRegStatus != MB_ENOERR )
 8002a20:	e00e      	b.n	8002a40 <eMBFuncReadHoldingRegister+0xd4>
            }
            else
            {
                *usLen += usRegCount * 2;
 8002a22:	683b      	ldr	r3, [r7, #0]
 8002a24:	881a      	ldrh	r2, [r3, #0]
 8002a26:	8a7b      	ldrh	r3, [r7, #18]
 8002a28:	005b      	lsls	r3, r3, #1
 8002a2a:	b29b      	uxth	r3, r3
 8002a2c:	4413      	add	r3, r2
 8002a2e:	b29a      	uxth	r2, r3
 8002a30:	683b      	ldr	r3, [r7, #0]
 8002a32:	801a      	strh	r2, [r3, #0]
            if( eRegStatus != MB_ENOERR )
 8002a34:	e004      	b.n	8002a40 <eMBFuncReadHoldingRegister+0xd4>
            }
        }
        else
        {
            eStatus = MB_EX_ILLEGAL_DATA_VALUE;
 8002a36:	2303      	movs	r3, #3
 8002a38:	75fb      	strb	r3, [r7, #23]
 8002a3a:	e001      	b.n	8002a40 <eMBFuncReadHoldingRegister+0xd4>
        }
    }
    else
    {
        /* Can't be a valid request because the length is incorrect. */
        eStatus = MB_EX_ILLEGAL_DATA_VALUE;
 8002a3c:	2303      	movs	r3, #3
 8002a3e:	75fb      	strb	r3, [r7, #23]
    }
    return eStatus;
 8002a40:	7dfb      	ldrb	r3, [r7, #23]
}
 8002a42:	4618      	mov	r0, r3
 8002a44:	3718      	adds	r7, #24
 8002a46:	46bd      	mov	sp, r7
 8002a48:	bd80      	pop	{r7, pc}

08002a4a <eMBFuncReadWriteMultipleHoldingRegister>:

#if MB_FUNC_READWRITE_HOLDING_ENABLED > 0

eMBException
eMBFuncReadWriteMultipleHoldingRegister( UCHAR * pucFrame, USHORT * usLen )
{
 8002a4a:	b580      	push	{r7, lr}
 8002a4c:	b086      	sub	sp, #24
 8002a4e:	af00      	add	r7, sp, #0
 8002a50:	6078      	str	r0, [r7, #4]
 8002a52:	6039      	str	r1, [r7, #0]
    USHORT          usRegWriteAddress;
    USHORT          usRegWriteCount;
    UCHAR           ucRegWriteByteCount;
    UCHAR          *pucFrameCur;

    eMBException    eStatus = MB_EX_NONE;
 8002a54:	2300      	movs	r3, #0
 8002a56:	75fb      	strb	r3, [r7, #23]
    eMBErrorCode    eRegStatus;

    if( *usLen >= ( MB_PDU_FUNC_READWRITE_SIZE_MIN + MB_PDU_SIZE_MIN ) )
 8002a58:	683b      	ldr	r3, [r7, #0]
 8002a5a:	881b      	ldrh	r3, [r3, #0]
 8002a5c:	2b09      	cmp	r3, #9
 8002a5e:	f240 8099 	bls.w	8002b94 <eMBFuncReadWriteMultipleHoldingRegister+0x14a>
    {
        usRegReadAddress = ( USHORT )( pucFrame[MB_PDU_FUNC_READWRITE_READ_ADDR_OFF] << 8U );
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	3301      	adds	r3, #1
 8002a66:	781b      	ldrb	r3, [r3, #0]
 8002a68:	b29b      	uxth	r3, r3
 8002a6a:	021b      	lsls	r3, r3, #8
 8002a6c:	82bb      	strh	r3, [r7, #20]
        usRegReadAddress |= ( USHORT )( pucFrame[MB_PDU_FUNC_READWRITE_READ_ADDR_OFF + 1] );
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	3302      	adds	r3, #2
 8002a72:	781b      	ldrb	r3, [r3, #0]
 8002a74:	b29a      	uxth	r2, r3
 8002a76:	8abb      	ldrh	r3, [r7, #20]
 8002a78:	4313      	orrs	r3, r2
 8002a7a:	82bb      	strh	r3, [r7, #20]
        usRegReadAddress++;
 8002a7c:	8abb      	ldrh	r3, [r7, #20]
 8002a7e:	3301      	adds	r3, #1
 8002a80:	82bb      	strh	r3, [r7, #20]

        usRegReadCount = ( USHORT )( pucFrame[MB_PDU_FUNC_READWRITE_READ_REGCNT_OFF] << 8U );
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	3303      	adds	r3, #3
 8002a86:	781b      	ldrb	r3, [r3, #0]
 8002a88:	b29b      	uxth	r3, r3
 8002a8a:	021b      	lsls	r3, r3, #8
 8002a8c:	827b      	strh	r3, [r7, #18]
        usRegReadCount |= ( USHORT )( pucFrame[MB_PDU_FUNC_READWRITE_READ_REGCNT_OFF + 1] );
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	3304      	adds	r3, #4
 8002a92:	781b      	ldrb	r3, [r3, #0]
 8002a94:	b29a      	uxth	r2, r3
 8002a96:	8a7b      	ldrh	r3, [r7, #18]
 8002a98:	4313      	orrs	r3, r2
 8002a9a:	827b      	strh	r3, [r7, #18]

        usRegWriteAddress = ( USHORT )( pucFrame[MB_PDU_FUNC_READWRITE_WRITE_ADDR_OFF] << 8U );
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	3305      	adds	r3, #5
 8002aa0:	781b      	ldrb	r3, [r3, #0]
 8002aa2:	b29b      	uxth	r3, r3
 8002aa4:	021b      	lsls	r3, r3, #8
 8002aa6:	823b      	strh	r3, [r7, #16]
        usRegWriteAddress |= ( USHORT )( pucFrame[MB_PDU_FUNC_READWRITE_WRITE_ADDR_OFF + 1] );
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	3306      	adds	r3, #6
 8002aac:	781b      	ldrb	r3, [r3, #0]
 8002aae:	b29a      	uxth	r2, r3
 8002ab0:	8a3b      	ldrh	r3, [r7, #16]
 8002ab2:	4313      	orrs	r3, r2
 8002ab4:	823b      	strh	r3, [r7, #16]
        usRegWriteAddress++;
 8002ab6:	8a3b      	ldrh	r3, [r7, #16]
 8002ab8:	3301      	adds	r3, #1
 8002aba:	823b      	strh	r3, [r7, #16]

        usRegWriteCount = ( USHORT )( pucFrame[MB_PDU_FUNC_READWRITE_WRITE_REGCNT_OFF] << 8U );
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	3307      	adds	r3, #7
 8002ac0:	781b      	ldrb	r3, [r3, #0]
 8002ac2:	b29b      	uxth	r3, r3
 8002ac4:	021b      	lsls	r3, r3, #8
 8002ac6:	81fb      	strh	r3, [r7, #14]
        usRegWriteCount |= ( USHORT )( pucFrame[MB_PDU_FUNC_READWRITE_WRITE_REGCNT_OFF + 1] );
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	3308      	adds	r3, #8
 8002acc:	781b      	ldrb	r3, [r3, #0]
 8002ace:	b29a      	uxth	r2, r3
 8002ad0:	89fb      	ldrh	r3, [r7, #14]
 8002ad2:	4313      	orrs	r3, r2
 8002ad4:	81fb      	strh	r3, [r7, #14]

        ucRegWriteByteCount = pucFrame[MB_PDU_FUNC_READWRITE_BYTECNT_OFF];
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	7a5b      	ldrb	r3, [r3, #9]
 8002ada:	737b      	strb	r3, [r7, #13]

        if( ( usRegReadCount >= 1 ) && ( usRegReadCount <= 0x7D ) &&
 8002adc:	8a7b      	ldrh	r3, [r7, #18]
 8002ade:	2b00      	cmp	r3, #0
 8002ae0:	d056      	beq.n	8002b90 <eMBFuncReadWriteMultipleHoldingRegister+0x146>
 8002ae2:	8a7b      	ldrh	r3, [r7, #18]
 8002ae4:	2b7d      	cmp	r3, #125	; 0x7d
 8002ae6:	d853      	bhi.n	8002b90 <eMBFuncReadWriteMultipleHoldingRegister+0x146>
 8002ae8:	89fb      	ldrh	r3, [r7, #14]
 8002aea:	2b00      	cmp	r3, #0
 8002aec:	d050      	beq.n	8002b90 <eMBFuncReadWriteMultipleHoldingRegister+0x146>
            ( usRegWriteCount >= 1 ) && ( usRegWriteCount <= 0x79 ) &&
 8002aee:	89fb      	ldrh	r3, [r7, #14]
 8002af0:	2b79      	cmp	r3, #121	; 0x79
 8002af2:	d84d      	bhi.n	8002b90 <eMBFuncReadWriteMultipleHoldingRegister+0x146>
            ( ( 2 * usRegWriteCount ) == ucRegWriteByteCount ) )
 8002af4:	89fb      	ldrh	r3, [r7, #14]
 8002af6:	005a      	lsls	r2, r3, #1
 8002af8:	7b7b      	ldrb	r3, [r7, #13]
            ( usRegWriteCount >= 1 ) && ( usRegWriteCount <= 0x79 ) &&
 8002afa:	429a      	cmp	r2, r3
 8002afc:	d148      	bne.n	8002b90 <eMBFuncReadWriteMultipleHoldingRegister+0x146>
        {
            /* Make callback to update the register values. */
            eRegStatus = eMBRegHoldingCB( &pucFrame[MB_PDU_FUNC_READWRITE_WRITE_VALUES_OFF],
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	f103 000a 	add.w	r0, r3, #10
 8002b04:	89fa      	ldrh	r2, [r7, #14]
 8002b06:	8a39      	ldrh	r1, [r7, #16]
 8002b08:	2301      	movs	r3, #1
 8002b0a:	f7fd fc75 	bl	80003f8 <eMBRegHoldingCB>
 8002b0e:	4603      	mov	r3, r0
 8002b10:	75bb      	strb	r3, [r7, #22]
                                          usRegWriteAddress, usRegWriteCount, MB_REG_WRITE );

            if( eRegStatus == MB_ENOERR )
 8002b12:	7dbb      	ldrb	r3, [r7, #22]
 8002b14:	2b00      	cmp	r3, #0
 8002b16:	d131      	bne.n	8002b7c <eMBFuncReadWriteMultipleHoldingRegister+0x132>
            {
                /* Set the current PDU data pointer to the beginning. */
                pucFrameCur = &pucFrame[MB_PDU_FUNC_OFF];
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	60bb      	str	r3, [r7, #8]
                *usLen = MB_PDU_FUNC_OFF;
 8002b1c:	683b      	ldr	r3, [r7, #0]
 8002b1e:	2200      	movs	r2, #0
 8002b20:	801a      	strh	r2, [r3, #0]

                /* First byte contains the function code. */
                *pucFrameCur++ = MB_FUNC_READWRITE_MULTIPLE_REGISTERS;
 8002b22:	68bb      	ldr	r3, [r7, #8]
 8002b24:	1c5a      	adds	r2, r3, #1
 8002b26:	60ba      	str	r2, [r7, #8]
 8002b28:	2217      	movs	r2, #23
 8002b2a:	701a      	strb	r2, [r3, #0]
                *usLen += 1;
 8002b2c:	683b      	ldr	r3, [r7, #0]
 8002b2e:	881b      	ldrh	r3, [r3, #0]
 8002b30:	3301      	adds	r3, #1
 8002b32:	b29a      	uxth	r2, r3
 8002b34:	683b      	ldr	r3, [r7, #0]
 8002b36:	801a      	strh	r2, [r3, #0]

                /* Second byte in the response contain the number of bytes. */
                *pucFrameCur++ = ( UCHAR ) ( usRegReadCount * 2 );
 8002b38:	8a7b      	ldrh	r3, [r7, #18]
 8002b3a:	b2da      	uxtb	r2, r3
 8002b3c:	68bb      	ldr	r3, [r7, #8]
 8002b3e:	1c59      	adds	r1, r3, #1
 8002b40:	60b9      	str	r1, [r7, #8]
 8002b42:	0052      	lsls	r2, r2, #1
 8002b44:	b2d2      	uxtb	r2, r2
 8002b46:	701a      	strb	r2, [r3, #0]
                *usLen += 1;
 8002b48:	683b      	ldr	r3, [r7, #0]
 8002b4a:	881b      	ldrh	r3, [r3, #0]
 8002b4c:	3301      	adds	r3, #1
 8002b4e:	b29a      	uxth	r2, r3
 8002b50:	683b      	ldr	r3, [r7, #0]
 8002b52:	801a      	strh	r2, [r3, #0]

                /* Make the read callback. */
                eRegStatus =
                    eMBRegHoldingCB( pucFrameCur, usRegReadAddress, usRegReadCount, MB_REG_READ );
 8002b54:	8a7a      	ldrh	r2, [r7, #18]
 8002b56:	8ab9      	ldrh	r1, [r7, #20]
 8002b58:	2300      	movs	r3, #0
 8002b5a:	68b8      	ldr	r0, [r7, #8]
 8002b5c:	f7fd fc4c 	bl	80003f8 <eMBRegHoldingCB>
 8002b60:	4603      	mov	r3, r0
 8002b62:	75bb      	strb	r3, [r7, #22]
                if( eRegStatus == MB_ENOERR )
 8002b64:	7dbb      	ldrb	r3, [r7, #22]
 8002b66:	2b00      	cmp	r3, #0
 8002b68:	d108      	bne.n	8002b7c <eMBFuncReadWriteMultipleHoldingRegister+0x132>
                {
                    *usLen += 2 * usRegReadCount;
 8002b6a:	683b      	ldr	r3, [r7, #0]
 8002b6c:	881a      	ldrh	r2, [r3, #0]
 8002b6e:	8a7b      	ldrh	r3, [r7, #18]
 8002b70:	005b      	lsls	r3, r3, #1
 8002b72:	b29b      	uxth	r3, r3
 8002b74:	4413      	add	r3, r2
 8002b76:	b29a      	uxth	r2, r3
 8002b78:	683b      	ldr	r3, [r7, #0]
 8002b7a:	801a      	strh	r2, [r3, #0]
                }
            }
            if( eRegStatus != MB_ENOERR )
 8002b7c:	7dbb      	ldrb	r3, [r7, #22]
 8002b7e:	2b00      	cmp	r3, #0
 8002b80:	d008      	beq.n	8002b94 <eMBFuncReadWriteMultipleHoldingRegister+0x14a>
            {
                eStatus = prveMBError2Exception( eRegStatus );
 8002b82:	7dbb      	ldrb	r3, [r7, #22]
 8002b84:	4618      	mov	r0, r3
 8002b86:	f000 faaf 	bl	80030e8 <prveMBError2Exception>
 8002b8a:	4603      	mov	r3, r0
 8002b8c:	75fb      	strb	r3, [r7, #23]
            if( eRegStatus != MB_ENOERR )
 8002b8e:	e001      	b.n	8002b94 <eMBFuncReadWriteMultipleHoldingRegister+0x14a>
            }
        }
        else
        {
            eStatus = MB_EX_ILLEGAL_DATA_VALUE;
 8002b90:	2303      	movs	r3, #3
 8002b92:	75fb      	strb	r3, [r7, #23]
        }
    }
    return eStatus;
 8002b94:	7dfb      	ldrb	r3, [r7, #23]
}
 8002b96:	4618      	mov	r0, r3
 8002b98:	3718      	adds	r7, #24
 8002b9a:	46bd      	mov	sp, r7
 8002b9c:	bd80      	pop	{r7, pc}

08002b9e <eMBFuncReadInputRegister>:
/* ----------------------- Start implementation -----------------------------*/
#if MB_FUNC_READ_INPUT_ENABLED > 0

eMBException
eMBFuncReadInputRegister( UCHAR * pucFrame, USHORT * usLen )
{
 8002b9e:	b580      	push	{r7, lr}
 8002ba0:	b086      	sub	sp, #24
 8002ba2:	af00      	add	r7, sp, #0
 8002ba4:	6078      	str	r0, [r7, #4]
 8002ba6:	6039      	str	r1, [r7, #0]
    USHORT          usRegAddress;
    USHORT          usRegCount;
    UCHAR          *pucFrameCur;

    eMBException    eStatus = MB_EX_NONE;
 8002ba8:	2300      	movs	r3, #0
 8002baa:	75fb      	strb	r3, [r7, #23]
    eMBErrorCode    eRegStatus;

    if( *usLen == ( MB_PDU_FUNC_READ_SIZE + MB_PDU_SIZE_MIN ) )
 8002bac:	683b      	ldr	r3, [r7, #0]
 8002bae:	881b      	ldrh	r3, [r3, #0]
 8002bb0:	2b05      	cmp	r3, #5
 8002bb2:	d15f      	bne.n	8002c74 <eMBFuncReadInputRegister+0xd6>
    {
        usRegAddress = ( USHORT )( pucFrame[MB_PDU_FUNC_READ_ADDR_OFF] << 8 );
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	3301      	adds	r3, #1
 8002bb8:	781b      	ldrb	r3, [r3, #0]
 8002bba:	b29b      	uxth	r3, r3
 8002bbc:	021b      	lsls	r3, r3, #8
 8002bbe:	82bb      	strh	r3, [r7, #20]
        usRegAddress |= ( USHORT )( pucFrame[MB_PDU_FUNC_READ_ADDR_OFF + 1] );
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	3302      	adds	r3, #2
 8002bc4:	781b      	ldrb	r3, [r3, #0]
 8002bc6:	b29a      	uxth	r2, r3
 8002bc8:	8abb      	ldrh	r3, [r7, #20]
 8002bca:	4313      	orrs	r3, r2
 8002bcc:	82bb      	strh	r3, [r7, #20]
        usRegAddress++;
 8002bce:	8abb      	ldrh	r3, [r7, #20]
 8002bd0:	3301      	adds	r3, #1
 8002bd2:	82bb      	strh	r3, [r7, #20]

        usRegCount = ( USHORT )( pucFrame[MB_PDU_FUNC_READ_REGCNT_OFF] << 8 );
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	3303      	adds	r3, #3
 8002bd8:	781b      	ldrb	r3, [r3, #0]
 8002bda:	b29b      	uxth	r3, r3
 8002bdc:	021b      	lsls	r3, r3, #8
 8002bde:	827b      	strh	r3, [r7, #18]
        usRegCount |= ( USHORT )( pucFrame[MB_PDU_FUNC_READ_REGCNT_OFF + 1] );
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	3304      	adds	r3, #4
 8002be4:	781b      	ldrb	r3, [r3, #0]
 8002be6:	b29a      	uxth	r2, r3
 8002be8:	8a7b      	ldrh	r3, [r7, #18]
 8002bea:	4313      	orrs	r3, r2
 8002bec:	827b      	strh	r3, [r7, #18]

        /* Check if the number of registers to read is valid. If not
         * return Modbus illegal data value exception. 
         */
        if( ( usRegCount >= 1 )
 8002bee:	8a7b      	ldrh	r3, [r7, #18]
 8002bf0:	2b00      	cmp	r3, #0
 8002bf2:	d03c      	beq.n	8002c6e <eMBFuncReadInputRegister+0xd0>
            && ( usRegCount < MB_PDU_FUNC_READ_REGCNT_MAX ) )
 8002bf4:	8a7b      	ldrh	r3, [r7, #18]
 8002bf6:	2b7c      	cmp	r3, #124	; 0x7c
 8002bf8:	d839      	bhi.n	8002c6e <eMBFuncReadInputRegister+0xd0>
        {
            /* Set the current PDU data pointer to the beginning. */
            pucFrameCur = &pucFrame[MB_PDU_FUNC_OFF];
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	60fb      	str	r3, [r7, #12]
            *usLen = MB_PDU_FUNC_OFF;
 8002bfe:	683b      	ldr	r3, [r7, #0]
 8002c00:	2200      	movs	r2, #0
 8002c02:	801a      	strh	r2, [r3, #0]

            /* First byte contains the function code. */
            *pucFrameCur++ = MB_FUNC_READ_INPUT_REGISTER;
 8002c04:	68fb      	ldr	r3, [r7, #12]
 8002c06:	1c5a      	adds	r2, r3, #1
 8002c08:	60fa      	str	r2, [r7, #12]
 8002c0a:	2204      	movs	r2, #4
 8002c0c:	701a      	strb	r2, [r3, #0]
            *usLen += 1;
 8002c0e:	683b      	ldr	r3, [r7, #0]
 8002c10:	881b      	ldrh	r3, [r3, #0]
 8002c12:	3301      	adds	r3, #1
 8002c14:	b29a      	uxth	r2, r3
 8002c16:	683b      	ldr	r3, [r7, #0]
 8002c18:	801a      	strh	r2, [r3, #0]

            /* Second byte in the response contain the number of bytes. */
            *pucFrameCur++ = ( UCHAR )( usRegCount * 2 );
 8002c1a:	8a7b      	ldrh	r3, [r7, #18]
 8002c1c:	b2da      	uxtb	r2, r3
 8002c1e:	68fb      	ldr	r3, [r7, #12]
 8002c20:	1c59      	adds	r1, r3, #1
 8002c22:	60f9      	str	r1, [r7, #12]
 8002c24:	0052      	lsls	r2, r2, #1
 8002c26:	b2d2      	uxtb	r2, r2
 8002c28:	701a      	strb	r2, [r3, #0]
            *usLen += 1;
 8002c2a:	683b      	ldr	r3, [r7, #0]
 8002c2c:	881b      	ldrh	r3, [r3, #0]
 8002c2e:	3301      	adds	r3, #1
 8002c30:	b29a      	uxth	r2, r3
 8002c32:	683b      	ldr	r3, [r7, #0]
 8002c34:	801a      	strh	r2, [r3, #0]

            eRegStatus =
                eMBRegInputCB( pucFrameCur, usRegAddress, usRegCount );
 8002c36:	8a7a      	ldrh	r2, [r7, #18]
 8002c38:	8abb      	ldrh	r3, [r7, #20]
 8002c3a:	4619      	mov	r1, r3
 8002c3c:	68f8      	ldr	r0, [r7, #12]
 8002c3e:	f7fd fb95 	bl	800036c <eMBRegInputCB>
 8002c42:	4603      	mov	r3, r0
 8002c44:	72fb      	strb	r3, [r7, #11]

            /* If an error occured convert it into a Modbus exception. */
            if( eRegStatus != MB_ENOERR )
 8002c46:	7afb      	ldrb	r3, [r7, #11]
 8002c48:	2b00      	cmp	r3, #0
 8002c4a:	d006      	beq.n	8002c5a <eMBFuncReadInputRegister+0xbc>
            {
                eStatus = prveMBError2Exception( eRegStatus );
 8002c4c:	7afb      	ldrb	r3, [r7, #11]
 8002c4e:	4618      	mov	r0, r3
 8002c50:	f000 fa4a 	bl	80030e8 <prveMBError2Exception>
 8002c54:	4603      	mov	r3, r0
 8002c56:	75fb      	strb	r3, [r7, #23]
            if( eRegStatus != MB_ENOERR )
 8002c58:	e00e      	b.n	8002c78 <eMBFuncReadInputRegister+0xda>
            }
            else
            {
                *usLen += usRegCount * 2;
 8002c5a:	683b      	ldr	r3, [r7, #0]
 8002c5c:	881a      	ldrh	r2, [r3, #0]
 8002c5e:	8a7b      	ldrh	r3, [r7, #18]
 8002c60:	005b      	lsls	r3, r3, #1
 8002c62:	b29b      	uxth	r3, r3
 8002c64:	4413      	add	r3, r2
 8002c66:	b29a      	uxth	r2, r3
 8002c68:	683b      	ldr	r3, [r7, #0]
 8002c6a:	801a      	strh	r2, [r3, #0]
            if( eRegStatus != MB_ENOERR )
 8002c6c:	e004      	b.n	8002c78 <eMBFuncReadInputRegister+0xda>
            }
        }
        else
        {
            eStatus = MB_EX_ILLEGAL_DATA_VALUE;
 8002c6e:	2303      	movs	r3, #3
 8002c70:	75fb      	strb	r3, [r7, #23]
 8002c72:	e001      	b.n	8002c78 <eMBFuncReadInputRegister+0xda>
    }
    else
    {
        /* Can't be a valid read input register request because the length
         * is incorrect. */
        eStatus = MB_EX_ILLEGAL_DATA_VALUE;
 8002c74:	2303      	movs	r3, #3
 8002c76:	75fb      	strb	r3, [r7, #23]
    }
    return eStatus;
 8002c78:	7dfb      	ldrb	r3, [r7, #23]
}
 8002c7a:	4618      	mov	r0, r3
 8002c7c:	3718      	adds	r7, #24
 8002c7e:	46bd      	mov	sp, r7
 8002c80:	bd80      	pop	{r7, pc}
	...

08002c84 <eMBFuncReportSlaveID>:
    return eStatus;
}

eMBException
eMBFuncReportSlaveID( UCHAR * pucFrame, USHORT * usLen )
{
 8002c84:	b580      	push	{r7, lr}
 8002c86:	b082      	sub	sp, #8
 8002c88:	af00      	add	r7, sp, #0
 8002c8a:	6078      	str	r0, [r7, #4]
 8002c8c:	6039      	str	r1, [r7, #0]
    memcpy( &pucFrame[MB_PDU_DATA_OFF], &ucMBSlaveID[0], ( size_t )usMBSlaveIDLen );
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	3301      	adds	r3, #1
 8002c92:	4a08      	ldr	r2, [pc, #32]	; (8002cb4 <eMBFuncReportSlaveID+0x30>)
 8002c94:	8812      	ldrh	r2, [r2, #0]
 8002c96:	4908      	ldr	r1, [pc, #32]	; (8002cb8 <eMBFuncReportSlaveID+0x34>)
 8002c98:	4618      	mov	r0, r3
 8002c9a:	f000 fd2a 	bl	80036f2 <memcpy>
    *usLen = ( USHORT )( MB_PDU_DATA_OFF + usMBSlaveIDLen );
 8002c9e:	4b05      	ldr	r3, [pc, #20]	; (8002cb4 <eMBFuncReportSlaveID+0x30>)
 8002ca0:	881b      	ldrh	r3, [r3, #0]
 8002ca2:	3301      	adds	r3, #1
 8002ca4:	b29a      	uxth	r2, r3
 8002ca6:	683b      	ldr	r3, [r7, #0]
 8002ca8:	801a      	strh	r2, [r3, #0]
    return MB_EX_NONE;
 8002caa:	2300      	movs	r3, #0
}
 8002cac:	4618      	mov	r0, r3
 8002cae:	3708      	adds	r7, #8
 8002cb0:	46bd      	mov	sp, r7
 8002cb2:	bd80      	pop	{r7, pc}
 8002cb4:	200001f8 	.word	0x200001f8
 8002cb8:	200001d8 	.word	0x200001d8

08002cbc <eMBRTUInit>:
static volatile USHORT usRcvBufferPos;

/* ----------------------- Start implementation -----------------------------*/
eMBErrorCode
eMBRTUInit( UCHAR ucSlaveAddress, UCHAR ucPort, ULONG ulBaudRate, eMBParity eParity )
{
 8002cbc:	b580      	push	{r7, lr}
 8002cbe:	b084      	sub	sp, #16
 8002cc0:	af00      	add	r7, sp, #0
 8002cc2:	603a      	str	r2, [r7, #0]
 8002cc4:	461a      	mov	r2, r3
 8002cc6:	4603      	mov	r3, r0
 8002cc8:	71fb      	strb	r3, [r7, #7]
 8002cca:	460b      	mov	r3, r1
 8002ccc:	71bb      	strb	r3, [r7, #6]
 8002cce:	4613      	mov	r3, r2
 8002cd0:	717b      	strb	r3, [r7, #5]
    eMBErrorCode    eStatus = MB_ENOERR;
 8002cd2:	2300      	movs	r3, #0
 8002cd4:	73fb      	strb	r3, [r7, #15]
    ULONG           usTimerT35_50us;

    ( void )ucSlaveAddress;
    ENTER_CRITICAL_SECTION(  );
 8002cd6:	f000 fa29 	bl	800312c <critical_enter>

    /* Modbus RTU uses 8 Databits. */
    if( xMBPortSerialInit( ucPort, ulBaudRate, 8, eParity ) != TRUE )
 8002cda:	797b      	ldrb	r3, [r7, #5]
 8002cdc:	79b8      	ldrb	r0, [r7, #6]
 8002cde:	2208      	movs	r2, #8
 8002ce0:	6839      	ldr	r1, [r7, #0]
 8002ce2:	f000 fae5 	bl	80032b0 <xMBPortSerialInit>
 8002ce6:	4603      	mov	r3, r0
 8002ce8:	2b01      	cmp	r3, #1
 8002cea:	d002      	beq.n	8002cf2 <eMBRTUInit+0x36>
    {
        eStatus = MB_EPORTERR;
 8002cec:	2303      	movs	r3, #3
 8002cee:	73fb      	strb	r3, [r7, #15]
 8002cf0:	e016      	b.n	8002d20 <eMBRTUInit+0x64>
    else
    {
        /* If baudrate > 19200 then we should use the fixed timer values
         * t35 = 1750us. Otherwise t35 must be 3.5 times the character time.
         */
        if( ulBaudRate > 19200 )
 8002cf2:	683b      	ldr	r3, [r7, #0]
 8002cf4:	f5b3 4f96 	cmp.w	r3, #19200	; 0x4b00
 8002cf8:	d902      	bls.n	8002d00 <eMBRTUInit+0x44>
        {
            usTimerT35_50us = 35;       /* 1800us. */
 8002cfa:	2323      	movs	r3, #35	; 0x23
 8002cfc:	60bb      	str	r3, [r7, #8]
 8002cfe:	e005      	b.n	8002d0c <eMBRTUInit+0x50>
             *             = 11 * Ticks_per_1s / Baudrate
             *             = 220000 / Baudrate
             * The reload for t3.5 is 1.5 times this value and similary
             * for t3.5.
             */
            usTimerT35_50us = ( 7UL * 220000UL ) / ( 2UL * ulBaudRate );
 8002d00:	683b      	ldr	r3, [r7, #0]
 8002d02:	005b      	lsls	r3, r3, #1
 8002d04:	4a0a      	ldr	r2, [pc, #40]	; (8002d30 <eMBRTUInit+0x74>)
 8002d06:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d0a:	60bb      	str	r3, [r7, #8]
        }
        if( xMBPortTimersInit( ( USHORT ) usTimerT35_50us ) != TRUE )
 8002d0c:	68bb      	ldr	r3, [r7, #8]
 8002d0e:	b29b      	uxth	r3, r3
 8002d10:	4618      	mov	r0, r3
 8002d12:	f000 fb11 	bl	8003338 <xMBPortTimersInit>
 8002d16:	4603      	mov	r3, r0
 8002d18:	2b01      	cmp	r3, #1
 8002d1a:	d001      	beq.n	8002d20 <eMBRTUInit+0x64>
        {
            eStatus = MB_EPORTERR;
 8002d1c:	2303      	movs	r3, #3
 8002d1e:	73fb      	strb	r3, [r7, #15]
        }
    }
    EXIT_CRITICAL_SECTION(  );
 8002d20:	f000 fa14 	bl	800314c <critical_exit>

    return eStatus;
 8002d24:	7bfb      	ldrb	r3, [r7, #15]
}
 8002d26:	4618      	mov	r0, r3
 8002d28:	3710      	adds	r7, #16
 8002d2a:	46bd      	mov	sp, r7
 8002d2c:	bd80      	pop	{r7, pc}
 8002d2e:	bf00      	nop
 8002d30:	00177fa0 	.word	0x00177fa0

08002d34 <eMBRTUStart>:

void
eMBRTUStart( void )
{
 8002d34:	b580      	push	{r7, lr}
 8002d36:	af00      	add	r7, sp, #0
    ENTER_CRITICAL_SECTION(  );
 8002d38:	f000 f9f8 	bl	800312c <critical_enter>
    /* Initially the receiver is in the state STATE_RX_INIT. we start
     * the timer and if no character is received within t3.5 we change
     * to STATE_RX_IDLE. This makes sure that we delay startup of the
     * modbus protocol stack until the bus is free.
     */
    eRcvState = STATE_RX_INIT;
 8002d3c:	4b06      	ldr	r3, [pc, #24]	; (8002d58 <eMBRTUStart+0x24>)
 8002d3e:	2200      	movs	r2, #0
 8002d40:	701a      	strb	r2, [r3, #0]
    vMBPortSerialEnable( TRUE, FALSE );
 8002d42:	2100      	movs	r1, #0
 8002d44:	2001      	movs	r0, #1
 8002d46:	f000 fa55 	bl	80031f4 <vMBPortSerialEnable>
    vMBPortTimersEnable(  );
 8002d4a:	f000 fb05 	bl	8003358 <vMBPortTimersEnable>

    EXIT_CRITICAL_SECTION(  );
 8002d4e:	f000 f9fd 	bl	800314c <critical_exit>
}
 8002d52:	bf00      	nop
 8002d54:	bd80      	pop	{r7, pc}
 8002d56:	bf00      	nop
 8002d58:	200001fb 	.word	0x200001fb

08002d5c <eMBRTUStop>:

void
eMBRTUStop( void )
{
 8002d5c:	b580      	push	{r7, lr}
 8002d5e:	af00      	add	r7, sp, #0
    ENTER_CRITICAL_SECTION(  );
 8002d60:	f000 f9e4 	bl	800312c <critical_enter>
    vMBPortSerialEnable( FALSE, FALSE );
 8002d64:	2100      	movs	r1, #0
 8002d66:	2000      	movs	r0, #0
 8002d68:	f000 fa44 	bl	80031f4 <vMBPortSerialEnable>
    vMBPortTimersDisable(  );
 8002d6c:	f000 fb04 	bl	8003378 <vMBPortTimersDisable>
    EXIT_CRITICAL_SECTION(  );
 8002d70:	f000 f9ec 	bl	800314c <critical_exit>
}
 8002d74:	bf00      	nop
 8002d76:	bd80      	pop	{r7, pc}

08002d78 <eMBRTUReceive>:

eMBErrorCode
eMBRTUReceive( UCHAR * pucRcvAddress, UCHAR ** pucFrame, USHORT * pusLength )
{
 8002d78:	b580      	push	{r7, lr}
 8002d7a:	b086      	sub	sp, #24
 8002d7c:	af00      	add	r7, sp, #0
 8002d7e:	60f8      	str	r0, [r7, #12]
 8002d80:	60b9      	str	r1, [r7, #8]
 8002d82:	607a      	str	r2, [r7, #4]
    BOOL            xFrameReceived = FALSE;
 8002d84:	2300      	movs	r3, #0
 8002d86:	75bb      	strb	r3, [r7, #22]
    eMBErrorCode    eStatus = MB_ENOERR;
 8002d88:	2300      	movs	r3, #0
 8002d8a:	75fb      	strb	r3, [r7, #23]

    ENTER_CRITICAL_SECTION(  );
 8002d8c:	f000 f9ce 	bl	800312c <critical_enter>
    assert( usRcvBufferPos < MB_SER_PDU_SIZE_MAX );
 8002d90:	4b1a      	ldr	r3, [pc, #104]	; (8002dfc <eMBRTUReceive+0x84>)
 8002d92:	881b      	ldrh	r3, [r3, #0]
 8002d94:	b29b      	uxth	r3, r3
 8002d96:	2bff      	cmp	r3, #255	; 0xff
 8002d98:	d905      	bls.n	8002da6 <eMBRTUReceive+0x2e>
 8002d9a:	4b19      	ldr	r3, [pc, #100]	; (8002e00 <eMBRTUReceive+0x88>)
 8002d9c:	4a19      	ldr	r2, [pc, #100]	; (8002e04 <eMBRTUReceive+0x8c>)
 8002d9e:	219c      	movs	r1, #156	; 0x9c
 8002da0:	4819      	ldr	r0, [pc, #100]	; (8002e08 <eMBRTUReceive+0x90>)
 8002da2:	f000 faf5 	bl	8003390 <__assert_func>

    /* Length and CRC check */
    if( ( usRcvBufferPos >= MB_SER_PDU_SIZE_MIN )
 8002da6:	4b15      	ldr	r3, [pc, #84]	; (8002dfc <eMBRTUReceive+0x84>)
 8002da8:	881b      	ldrh	r3, [r3, #0]
 8002daa:	b29b      	uxth	r3, r3
 8002dac:	2b03      	cmp	r3, #3
 8002dae:	d91b      	bls.n	8002de8 <eMBRTUReceive+0x70>
        && ( usMBCRC16( ( UCHAR * ) ucRTUBuf, usRcvBufferPos ) == 0 ) )
 8002db0:	4b12      	ldr	r3, [pc, #72]	; (8002dfc <eMBRTUReceive+0x84>)
 8002db2:	881b      	ldrh	r3, [r3, #0]
 8002db4:	b29b      	uxth	r3, r3
 8002db6:	4619      	mov	r1, r3
 8002db8:	4814      	ldr	r0, [pc, #80]	; (8002e0c <eMBRTUReceive+0x94>)
 8002dba:	f7ff fb5b 	bl	8002474 <usMBCRC16>
 8002dbe:	4603      	mov	r3, r0
 8002dc0:	2b00      	cmp	r3, #0
 8002dc2:	d111      	bne.n	8002de8 <eMBRTUReceive+0x70>
    {
        /* Save the address field. All frames are passed to the upper layed
         * and the decision if a frame is used is done there.
         */
        *pucRcvAddress = ucRTUBuf[MB_SER_PDU_ADDR_OFF];
 8002dc4:	4b11      	ldr	r3, [pc, #68]	; (8002e0c <eMBRTUReceive+0x94>)
 8002dc6:	781b      	ldrb	r3, [r3, #0]
 8002dc8:	b2da      	uxtb	r2, r3
 8002dca:	68fb      	ldr	r3, [r7, #12]
 8002dcc:	701a      	strb	r2, [r3, #0]

        /* Total length of Modbus-PDU is Modbus-Serial-Line-PDU minus
         * size of address field and CRC checksum.
         */
        *pusLength = ( USHORT )( usRcvBufferPos - MB_SER_PDU_PDU_OFF - MB_SER_PDU_SIZE_CRC );
 8002dce:	4b0b      	ldr	r3, [pc, #44]	; (8002dfc <eMBRTUReceive+0x84>)
 8002dd0:	881b      	ldrh	r3, [r3, #0]
 8002dd2:	b29b      	uxth	r3, r3
 8002dd4:	3b03      	subs	r3, #3
 8002dd6:	b29a      	uxth	r2, r3
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	801a      	strh	r2, [r3, #0]

        /* Return the start of the Modbus PDU to the caller. */
        *pucFrame = ( UCHAR * ) & ucRTUBuf[MB_SER_PDU_PDU_OFF];
 8002ddc:	68bb      	ldr	r3, [r7, #8]
 8002dde:	4a0c      	ldr	r2, [pc, #48]	; (8002e10 <eMBRTUReceive+0x98>)
 8002de0:	601a      	str	r2, [r3, #0]
        xFrameReceived = TRUE;
 8002de2:	2301      	movs	r3, #1
 8002de4:	75bb      	strb	r3, [r7, #22]
 8002de6:	e001      	b.n	8002dec <eMBRTUReceive+0x74>
    }
    else
    {
        eStatus = MB_EIO;
 8002de8:	2305      	movs	r3, #5
 8002dea:	75fb      	strb	r3, [r7, #23]
    }

    EXIT_CRITICAL_SECTION(  );
 8002dec:	f000 f9ae 	bl	800314c <critical_exit>
    return eStatus;
 8002df0:	7dfb      	ldrb	r3, [r7, #23]
}
 8002df2:	4618      	mov	r0, r3
 8002df4:	3718      	adds	r7, #24
 8002df6:	46bd      	mov	sp, r7
 8002df8:	bd80      	pop	{r7, pc}
 8002dfa:	bf00      	nop
 8002dfc:	20000302 	.word	0x20000302
 8002e00:	08004314 	.word	0x08004314
 8002e04:	08004640 	.word	0x08004640
 8002e08:	0800433c 	.word	0x0800433c
 8002e0c:	200001fc 	.word	0x200001fc
 8002e10:	200001fd 	.word	0x200001fd

08002e14 <eMBRTUSend>:

eMBErrorCode
eMBRTUSend( UCHAR ucSlaveAddress, const UCHAR * pucFrame, USHORT usLength )
{
 8002e14:	b580      	push	{r7, lr}
 8002e16:	b084      	sub	sp, #16
 8002e18:	af00      	add	r7, sp, #0
 8002e1a:	4603      	mov	r3, r0
 8002e1c:	6039      	str	r1, [r7, #0]
 8002e1e:	71fb      	strb	r3, [r7, #7]
 8002e20:	4613      	mov	r3, r2
 8002e22:	80bb      	strh	r3, [r7, #4]
    eMBErrorCode    eStatus = MB_ENOERR;
 8002e24:	2300      	movs	r3, #0
 8002e26:	73fb      	strb	r3, [r7, #15]
    USHORT          usCRC16;

    ENTER_CRITICAL_SECTION(  );
 8002e28:	f000 f980 	bl	800312c <critical_enter>

    /* Check if the receiver is still in idle state. If not we where to
     * slow with processing the received frame and the master sent another
     * frame on the network. We have to abort sending the frame.
     */
    if( eRcvState == STATE_RX_IDLE )
 8002e2c:	4b26      	ldr	r3, [pc, #152]	; (8002ec8 <eMBRTUSend+0xb4>)
 8002e2e:	781b      	ldrb	r3, [r3, #0]
 8002e30:	b2db      	uxtb	r3, r3
 8002e32:	2b01      	cmp	r3, #1
 8002e34:	d13f      	bne.n	8002eb6 <eMBRTUSend+0xa2>
    {
        /* First byte before the Modbus-PDU is the slave address. */
        pucSndBufferCur = ( UCHAR * ) pucFrame - 1;
 8002e36:	683b      	ldr	r3, [r7, #0]
 8002e38:	3b01      	subs	r3, #1
 8002e3a:	4a24      	ldr	r2, [pc, #144]	; (8002ecc <eMBRTUSend+0xb8>)
 8002e3c:	6013      	str	r3, [r2, #0]
        usSndBufferCount = 1;
 8002e3e:	4b24      	ldr	r3, [pc, #144]	; (8002ed0 <eMBRTUSend+0xbc>)
 8002e40:	2201      	movs	r2, #1
 8002e42:	801a      	strh	r2, [r3, #0]

        /* Now copy the Modbus-PDU into the Modbus-Serial-Line-PDU. */
        pucSndBufferCur[MB_SER_PDU_ADDR_OFF] = ucSlaveAddress;
 8002e44:	4b21      	ldr	r3, [pc, #132]	; (8002ecc <eMBRTUSend+0xb8>)
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	79fa      	ldrb	r2, [r7, #7]
 8002e4a:	701a      	strb	r2, [r3, #0]
        usSndBufferCount += usLength;
 8002e4c:	4b20      	ldr	r3, [pc, #128]	; (8002ed0 <eMBRTUSend+0xbc>)
 8002e4e:	881b      	ldrh	r3, [r3, #0]
 8002e50:	b29a      	uxth	r2, r3
 8002e52:	88bb      	ldrh	r3, [r7, #4]
 8002e54:	4413      	add	r3, r2
 8002e56:	b29a      	uxth	r2, r3
 8002e58:	4b1d      	ldr	r3, [pc, #116]	; (8002ed0 <eMBRTUSend+0xbc>)
 8002e5a:	801a      	strh	r2, [r3, #0]

        /* Calculate CRC16 checksum for Modbus-Serial-Line-PDU. */
        usCRC16 = usMBCRC16( ( UCHAR * ) pucSndBufferCur, usSndBufferCount );
 8002e5c:	4b1b      	ldr	r3, [pc, #108]	; (8002ecc <eMBRTUSend+0xb8>)
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	4a1b      	ldr	r2, [pc, #108]	; (8002ed0 <eMBRTUSend+0xbc>)
 8002e62:	8812      	ldrh	r2, [r2, #0]
 8002e64:	b292      	uxth	r2, r2
 8002e66:	4611      	mov	r1, r2
 8002e68:	4618      	mov	r0, r3
 8002e6a:	f7ff fb03 	bl	8002474 <usMBCRC16>
 8002e6e:	4603      	mov	r3, r0
 8002e70:	81bb      	strh	r3, [r7, #12]
        ucRTUBuf[usSndBufferCount++] = ( UCHAR )( usCRC16 & 0xFF );
 8002e72:	4b17      	ldr	r3, [pc, #92]	; (8002ed0 <eMBRTUSend+0xbc>)
 8002e74:	881b      	ldrh	r3, [r3, #0]
 8002e76:	b29b      	uxth	r3, r3
 8002e78:	1c5a      	adds	r2, r3, #1
 8002e7a:	b291      	uxth	r1, r2
 8002e7c:	4a14      	ldr	r2, [pc, #80]	; (8002ed0 <eMBRTUSend+0xbc>)
 8002e7e:	8011      	strh	r1, [r2, #0]
 8002e80:	461a      	mov	r2, r3
 8002e82:	89bb      	ldrh	r3, [r7, #12]
 8002e84:	b2d9      	uxtb	r1, r3
 8002e86:	4b13      	ldr	r3, [pc, #76]	; (8002ed4 <eMBRTUSend+0xc0>)
 8002e88:	5499      	strb	r1, [r3, r2]
        ucRTUBuf[usSndBufferCount++] = ( UCHAR )( usCRC16 >> 8 );
 8002e8a:	89bb      	ldrh	r3, [r7, #12]
 8002e8c:	0a1b      	lsrs	r3, r3, #8
 8002e8e:	b299      	uxth	r1, r3
 8002e90:	4b0f      	ldr	r3, [pc, #60]	; (8002ed0 <eMBRTUSend+0xbc>)
 8002e92:	881b      	ldrh	r3, [r3, #0]
 8002e94:	b29b      	uxth	r3, r3
 8002e96:	1c5a      	adds	r2, r3, #1
 8002e98:	b290      	uxth	r0, r2
 8002e9a:	4a0d      	ldr	r2, [pc, #52]	; (8002ed0 <eMBRTUSend+0xbc>)
 8002e9c:	8010      	strh	r0, [r2, #0]
 8002e9e:	461a      	mov	r2, r3
 8002ea0:	b2c9      	uxtb	r1, r1
 8002ea2:	4b0c      	ldr	r3, [pc, #48]	; (8002ed4 <eMBRTUSend+0xc0>)
 8002ea4:	5499      	strb	r1, [r3, r2]
        /* Activate the transmitter. */
        eSndState = STATE_TX_XMIT;
 8002ea6:	4b0c      	ldr	r3, [pc, #48]	; (8002ed8 <eMBRTUSend+0xc4>)
 8002ea8:	2201      	movs	r2, #1
 8002eaa:	701a      	strb	r2, [r3, #0]
        vMBPortSerialEnable( FALSE, TRUE );
 8002eac:	2101      	movs	r1, #1
 8002eae:	2000      	movs	r0, #0
 8002eb0:	f000 f9a0 	bl	80031f4 <vMBPortSerialEnable>
 8002eb4:	e001      	b.n	8002eba <eMBRTUSend+0xa6>
    }
    else
    {
        eStatus = MB_EIO;
 8002eb6:	2305      	movs	r3, #5
 8002eb8:	73fb      	strb	r3, [r7, #15]
    }
    EXIT_CRITICAL_SECTION(  );
 8002eba:	f000 f947 	bl	800314c <critical_exit>
    return eStatus;
 8002ebe:	7bfb      	ldrb	r3, [r7, #15]
}
 8002ec0:	4618      	mov	r0, r3
 8002ec2:	3710      	adds	r7, #16
 8002ec4:	46bd      	mov	sp, r7
 8002ec6:	bd80      	pop	{r7, pc}
 8002ec8:	200001fb 	.word	0x200001fb
 8002ecc:	200002fc 	.word	0x200002fc
 8002ed0:	20000300 	.word	0x20000300
 8002ed4:	200001fc 	.word	0x200001fc
 8002ed8:	200001fa 	.word	0x200001fa

08002edc <xMBRTUReceiveFSM>:

BOOL
xMBRTUReceiveFSM( void )
{
 8002edc:	b580      	push	{r7, lr}
 8002ede:	b082      	sub	sp, #8
 8002ee0:	af00      	add	r7, sp, #0
    BOOL            xTaskNeedSwitch = FALSE;
 8002ee2:	2300      	movs	r3, #0
 8002ee4:	71fb      	strb	r3, [r7, #7]
    UCHAR           ucByte;

    assert( eSndState == STATE_TX_IDLE );
 8002ee6:	4b2a      	ldr	r3, [pc, #168]	; (8002f90 <xMBRTUReceiveFSM+0xb4>)
 8002ee8:	781b      	ldrb	r3, [r3, #0]
 8002eea:	b2db      	uxtb	r3, r3
 8002eec:	2b00      	cmp	r3, #0
 8002eee:	d005      	beq.n	8002efc <xMBRTUReceiveFSM+0x20>
 8002ef0:	4b28      	ldr	r3, [pc, #160]	; (8002f94 <xMBRTUReceiveFSM+0xb8>)
 8002ef2:	4a29      	ldr	r2, [pc, #164]	; (8002f98 <xMBRTUReceiveFSM+0xbc>)
 8002ef4:	21e5      	movs	r1, #229	; 0xe5
 8002ef6:	4829      	ldr	r0, [pc, #164]	; (8002f9c <xMBRTUReceiveFSM+0xc0>)
 8002ef8:	f000 fa4a 	bl	8003390 <__assert_func>

    /* Always read the character. */
    ( void )xMBPortSerialGetByte( ( CHAR * ) & ucByte );
 8002efc:	1dbb      	adds	r3, r7, #6
 8002efe:	4618      	mov	r0, r3
 8002f00:	f000 f9fc 	bl	80032fc <xMBPortSerialGetByte>

    switch ( eRcvState )
 8002f04:	4b26      	ldr	r3, [pc, #152]	; (8002fa0 <xMBRTUReceiveFSM+0xc4>)
 8002f06:	781b      	ldrb	r3, [r3, #0]
 8002f08:	b2db      	uxtb	r3, r3
 8002f0a:	2b03      	cmp	r3, #3
 8002f0c:	d83b      	bhi.n	8002f86 <xMBRTUReceiveFSM+0xaa>
 8002f0e:	a201      	add	r2, pc, #4	; (adr r2, 8002f14 <xMBRTUReceiveFSM+0x38>)
 8002f10:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002f14:	08002f25 	.word	0x08002f25
 8002f18:	08002f31 	.word	0x08002f31
 8002f1c:	08002f59 	.word	0x08002f59
 8002f20:	08002f2b 	.word	0x08002f2b
    {
        /* If we have received a character in the init state we have to
         * wait until the frame is finished.
         */
    case STATE_RX_INIT:
        vMBPortTimersEnable(  );
 8002f24:	f000 fa18 	bl	8003358 <vMBPortTimersEnable>
        break;
 8002f28:	e02d      	b.n	8002f86 <xMBRTUReceiveFSM+0xaa>

        /* In the error state we wait until all characters in the
         * damaged frame are transmitted.
         */
    case STATE_RX_ERROR:
        vMBPortTimersEnable(  );
 8002f2a:	f000 fa15 	bl	8003358 <vMBPortTimersEnable>
        break;
 8002f2e:	e02a      	b.n	8002f86 <xMBRTUReceiveFSM+0xaa>
        /* In the idle state we wait for a new character. If a character
         * is received the t1.5 and t3.5 timers are started and the
         * receiver is in the state STATE_RX_RECEIVCE.
         */
    case STATE_RX_IDLE:
        usRcvBufferPos = 0;
 8002f30:	4b1c      	ldr	r3, [pc, #112]	; (8002fa4 <xMBRTUReceiveFSM+0xc8>)
 8002f32:	2200      	movs	r2, #0
 8002f34:	801a      	strh	r2, [r3, #0]
        ucRTUBuf[usRcvBufferPos++] = ucByte;
 8002f36:	4b1b      	ldr	r3, [pc, #108]	; (8002fa4 <xMBRTUReceiveFSM+0xc8>)
 8002f38:	881b      	ldrh	r3, [r3, #0]
 8002f3a:	b29b      	uxth	r3, r3
 8002f3c:	1c5a      	adds	r2, r3, #1
 8002f3e:	b291      	uxth	r1, r2
 8002f40:	4a18      	ldr	r2, [pc, #96]	; (8002fa4 <xMBRTUReceiveFSM+0xc8>)
 8002f42:	8011      	strh	r1, [r2, #0]
 8002f44:	461a      	mov	r2, r3
 8002f46:	79b9      	ldrb	r1, [r7, #6]
 8002f48:	4b17      	ldr	r3, [pc, #92]	; (8002fa8 <xMBRTUReceiveFSM+0xcc>)
 8002f4a:	5499      	strb	r1, [r3, r2]
        eRcvState = STATE_RX_RCV;
 8002f4c:	4b14      	ldr	r3, [pc, #80]	; (8002fa0 <xMBRTUReceiveFSM+0xc4>)
 8002f4e:	2202      	movs	r2, #2
 8002f50:	701a      	strb	r2, [r3, #0]

        /* Enable t3.5 timers. */
        vMBPortTimersEnable(  );
 8002f52:	f000 fa01 	bl	8003358 <vMBPortTimersEnable>
        break;
 8002f56:	e016      	b.n	8002f86 <xMBRTUReceiveFSM+0xaa>
         * every character received. If more than the maximum possible
         * number of bytes in a modbus frame is received the frame is
         * ignored.
         */
    case STATE_RX_RCV:
        if( usRcvBufferPos < MB_SER_PDU_SIZE_MAX )
 8002f58:	4b12      	ldr	r3, [pc, #72]	; (8002fa4 <xMBRTUReceiveFSM+0xc8>)
 8002f5a:	881b      	ldrh	r3, [r3, #0]
 8002f5c:	b29b      	uxth	r3, r3
 8002f5e:	2bff      	cmp	r3, #255	; 0xff
 8002f60:	d80b      	bhi.n	8002f7a <xMBRTUReceiveFSM+0x9e>
        {
            ucRTUBuf[usRcvBufferPos++] = ucByte;
 8002f62:	4b10      	ldr	r3, [pc, #64]	; (8002fa4 <xMBRTUReceiveFSM+0xc8>)
 8002f64:	881b      	ldrh	r3, [r3, #0]
 8002f66:	b29b      	uxth	r3, r3
 8002f68:	1c5a      	adds	r2, r3, #1
 8002f6a:	b291      	uxth	r1, r2
 8002f6c:	4a0d      	ldr	r2, [pc, #52]	; (8002fa4 <xMBRTUReceiveFSM+0xc8>)
 8002f6e:	8011      	strh	r1, [r2, #0]
 8002f70:	461a      	mov	r2, r3
 8002f72:	79b9      	ldrb	r1, [r7, #6]
 8002f74:	4b0c      	ldr	r3, [pc, #48]	; (8002fa8 <xMBRTUReceiveFSM+0xcc>)
 8002f76:	5499      	strb	r1, [r3, r2]
 8002f78:	e002      	b.n	8002f80 <xMBRTUReceiveFSM+0xa4>
        }
        else
        {
            eRcvState = STATE_RX_ERROR;
 8002f7a:	4b09      	ldr	r3, [pc, #36]	; (8002fa0 <xMBRTUReceiveFSM+0xc4>)
 8002f7c:	2203      	movs	r2, #3
 8002f7e:	701a      	strb	r2, [r3, #0]
        }
        vMBPortTimersEnable(  );
 8002f80:	f000 f9ea 	bl	8003358 <vMBPortTimersEnable>
        break;
 8002f84:	bf00      	nop
    }
    return xTaskNeedSwitch;
 8002f86:	79fb      	ldrb	r3, [r7, #7]
}
 8002f88:	4618      	mov	r0, r3
 8002f8a:	3708      	adds	r7, #8
 8002f8c:	46bd      	mov	sp, r7
 8002f8e:	bd80      	pop	{r7, pc}
 8002f90:	200001fa 	.word	0x200001fa
 8002f94:	08004378 	.word	0x08004378
 8002f98:	08004650 	.word	0x08004650
 8002f9c:	0800433c 	.word	0x0800433c
 8002fa0:	200001fb 	.word	0x200001fb
 8002fa4:	20000302 	.word	0x20000302
 8002fa8:	200001fc 	.word	0x200001fc

08002fac <xMBRTUTransmitFSM>:

BOOL
xMBRTUTransmitFSM( void )
{
 8002fac:	b580      	push	{r7, lr}
 8002fae:	b082      	sub	sp, #8
 8002fb0:	af00      	add	r7, sp, #0
    BOOL            xNeedPoll = FALSE;
 8002fb2:	2300      	movs	r3, #0
 8002fb4:	71fb      	strb	r3, [r7, #7]

    assert( eRcvState == STATE_RX_IDLE );
 8002fb6:	4b22      	ldr	r3, [pc, #136]	; (8003040 <xMBRTUTransmitFSM+0x94>)
 8002fb8:	781b      	ldrb	r3, [r3, #0]
 8002fba:	b2db      	uxtb	r3, r3
 8002fbc:	2b01      	cmp	r3, #1
 8002fbe:	d006      	beq.n	8002fce <xMBRTUTransmitFSM+0x22>
 8002fc0:	4b20      	ldr	r3, [pc, #128]	; (8003044 <xMBRTUTransmitFSM+0x98>)
 8002fc2:	4a21      	ldr	r2, [pc, #132]	; (8003048 <xMBRTUTransmitFSM+0x9c>)
 8002fc4:	f44f 7190 	mov.w	r1, #288	; 0x120
 8002fc8:	4820      	ldr	r0, [pc, #128]	; (800304c <xMBRTUTransmitFSM+0xa0>)
 8002fca:	f000 f9e1 	bl	8003390 <__assert_func>

    switch ( eSndState )
 8002fce:	4b20      	ldr	r3, [pc, #128]	; (8003050 <xMBRTUTransmitFSM+0xa4>)
 8002fd0:	781b      	ldrb	r3, [r3, #0]
 8002fd2:	b2db      	uxtb	r3, r3
 8002fd4:	2b00      	cmp	r3, #0
 8002fd6:	d002      	beq.n	8002fde <xMBRTUTransmitFSM+0x32>
 8002fd8:	2b01      	cmp	r3, #1
 8002fda:	d005      	beq.n	8002fe8 <xMBRTUTransmitFSM+0x3c>
 8002fdc:	e02a      	b.n	8003034 <xMBRTUTransmitFSM+0x88>
    {
        /* We should not get a transmitter event if the transmitter is in
         * idle state.  */
    case STATE_TX_IDLE:
        /* enable receiver/disable transmitter. */
        vMBPortSerialEnable( TRUE, FALSE );
 8002fde:	2100      	movs	r1, #0
 8002fe0:	2001      	movs	r0, #1
 8002fe2:	f000 f907 	bl	80031f4 <vMBPortSerialEnable>
        break;
 8002fe6:	e025      	b.n	8003034 <xMBRTUTransmitFSM+0x88>

    case STATE_TX_XMIT:
        /* check if we are finished. */
        if( usSndBufferCount != 0 )
 8002fe8:	4b1a      	ldr	r3, [pc, #104]	; (8003054 <xMBRTUTransmitFSM+0xa8>)
 8002fea:	881b      	ldrh	r3, [r3, #0]
 8002fec:	b29b      	uxth	r3, r3
 8002fee:	2b00      	cmp	r3, #0
 8002ff0:	d013      	beq.n	800301a <xMBRTUTransmitFSM+0x6e>
        {
            xMBPortSerialPutByte( ( CHAR )*pucSndBufferCur );
 8002ff2:	4b19      	ldr	r3, [pc, #100]	; (8003058 <xMBRTUTransmitFSM+0xac>)
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	781b      	ldrb	r3, [r3, #0]
 8002ff8:	b2db      	uxtb	r3, r3
 8002ffa:	4618      	mov	r0, r3
 8002ffc:	f000 f96a 	bl	80032d4 <xMBPortSerialPutByte>
            pucSndBufferCur++;  /* next byte in sendbuffer. */
 8003000:	4b15      	ldr	r3, [pc, #84]	; (8003058 <xMBRTUTransmitFSM+0xac>)
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	3301      	adds	r3, #1
 8003006:	4a14      	ldr	r2, [pc, #80]	; (8003058 <xMBRTUTransmitFSM+0xac>)
 8003008:	6013      	str	r3, [r2, #0]
            usSndBufferCount--;
 800300a:	4b12      	ldr	r3, [pc, #72]	; (8003054 <xMBRTUTransmitFSM+0xa8>)
 800300c:	881b      	ldrh	r3, [r3, #0]
 800300e:	b29b      	uxth	r3, r3
 8003010:	3b01      	subs	r3, #1
 8003012:	b29a      	uxth	r2, r3
 8003014:	4b0f      	ldr	r3, [pc, #60]	; (8003054 <xMBRTUTransmitFSM+0xa8>)
 8003016:	801a      	strh	r2, [r3, #0]
            /* Disable transmitter. This prevents another transmit buffer
             * empty interrupt. */
            vMBPortSerialEnable( TRUE, FALSE );
            eSndState = STATE_TX_IDLE;
        }
        break;
 8003018:	e00b      	b.n	8003032 <xMBRTUTransmitFSM+0x86>
            xNeedPoll = xMBPortEventPost( EV_FRAME_SENT );
 800301a:	2003      	movs	r0, #3
 800301c:	f000 f8b6 	bl	800318c <xMBPortEventPost>
 8003020:	4603      	mov	r3, r0
 8003022:	71fb      	strb	r3, [r7, #7]
            vMBPortSerialEnable( TRUE, FALSE );
 8003024:	2100      	movs	r1, #0
 8003026:	2001      	movs	r0, #1
 8003028:	f000 f8e4 	bl	80031f4 <vMBPortSerialEnable>
            eSndState = STATE_TX_IDLE;
 800302c:	4b08      	ldr	r3, [pc, #32]	; (8003050 <xMBRTUTransmitFSM+0xa4>)
 800302e:	2200      	movs	r2, #0
 8003030:	701a      	strb	r2, [r3, #0]
        break;
 8003032:	bf00      	nop
    }

    return xNeedPoll;
 8003034:	79fb      	ldrb	r3, [r7, #7]
}
 8003036:	4618      	mov	r0, r3
 8003038:	3708      	adds	r7, #8
 800303a:	46bd      	mov	sp, r7
 800303c:	bd80      	pop	{r7, pc}
 800303e:	bf00      	nop
 8003040:	200001fb 	.word	0x200001fb
 8003044:	08004394 	.word	0x08004394
 8003048:	08004664 	.word	0x08004664
 800304c:	0800433c 	.word	0x0800433c
 8003050:	200001fa 	.word	0x200001fa
 8003054:	20000300 	.word	0x20000300
 8003058:	200002fc 	.word	0x200002fc

0800305c <xMBRTUTimerT35Expired>:

BOOL
xMBRTUTimerT35Expired( void )
{
 800305c:	b580      	push	{r7, lr}
 800305e:	b082      	sub	sp, #8
 8003060:	af00      	add	r7, sp, #0
    BOOL            xNeedPoll = FALSE;
 8003062:	2300      	movs	r3, #0
 8003064:	71fb      	strb	r3, [r7, #7]

    switch ( eRcvState )
 8003066:	4b1c      	ldr	r3, [pc, #112]	; (80030d8 <xMBRTUTimerT35Expired+0x7c>)
 8003068:	781b      	ldrb	r3, [r3, #0]
 800306a:	b2db      	uxtb	r3, r3
 800306c:	2b03      	cmp	r3, #3
 800306e:	d028      	beq.n	80030c2 <xMBRTUTimerT35Expired+0x66>
 8003070:	2b03      	cmp	r3, #3
 8003072:	dc10      	bgt.n	8003096 <xMBRTUTimerT35Expired+0x3a>
 8003074:	2b00      	cmp	r3, #0
 8003076:	d002      	beq.n	800307e <xMBRTUTimerT35Expired+0x22>
 8003078:	2b02      	cmp	r3, #2
 800307a:	d006      	beq.n	800308a <xMBRTUTimerT35Expired+0x2e>
 800307c:	e00b      	b.n	8003096 <xMBRTUTimerT35Expired+0x3a>
    {
        /* Timer t35 expired. Startup phase is finished. */
    case STATE_RX_INIT:
        xNeedPoll = xMBPortEventPost( EV_READY );
 800307e:	2000      	movs	r0, #0
 8003080:	f000 f884 	bl	800318c <xMBPortEventPost>
 8003084:	4603      	mov	r3, r0
 8003086:	71fb      	strb	r3, [r7, #7]
        break;
 8003088:	e01c      	b.n	80030c4 <xMBRTUTimerT35Expired+0x68>

        /* A frame was received and t35 expired. Notify the listener that
         * a new frame was received. */
    case STATE_RX_RCV:
        xNeedPoll = xMBPortEventPost( EV_FRAME_RECEIVED );
 800308a:	2001      	movs	r0, #1
 800308c:	f000 f87e 	bl	800318c <xMBPortEventPost>
 8003090:	4603      	mov	r3, r0
 8003092:	71fb      	strb	r3, [r7, #7]
        break;
 8003094:	e016      	b.n	80030c4 <xMBRTUTimerT35Expired+0x68>
    case STATE_RX_ERROR:
        break;

        /* Function called in an illegal state. */
    default:
        assert( ( eRcvState == STATE_RX_INIT ) ||
 8003096:	4b10      	ldr	r3, [pc, #64]	; (80030d8 <xMBRTUTimerT35Expired+0x7c>)
 8003098:	781b      	ldrb	r3, [r3, #0]
 800309a:	b2db      	uxtb	r3, r3
 800309c:	2b00      	cmp	r3, #0
 800309e:	d011      	beq.n	80030c4 <xMBRTUTimerT35Expired+0x68>
 80030a0:	4b0d      	ldr	r3, [pc, #52]	; (80030d8 <xMBRTUTimerT35Expired+0x7c>)
 80030a2:	781b      	ldrb	r3, [r3, #0]
 80030a4:	b2db      	uxtb	r3, r3
 80030a6:	2b02      	cmp	r3, #2
 80030a8:	d00c      	beq.n	80030c4 <xMBRTUTimerT35Expired+0x68>
 80030aa:	4b0b      	ldr	r3, [pc, #44]	; (80030d8 <xMBRTUTimerT35Expired+0x7c>)
 80030ac:	781b      	ldrb	r3, [r3, #0]
 80030ae:	b2db      	uxtb	r3, r3
 80030b0:	2b03      	cmp	r3, #3
 80030b2:	d007      	beq.n	80030c4 <xMBRTUTimerT35Expired+0x68>
 80030b4:	4b09      	ldr	r3, [pc, #36]	; (80030dc <xMBRTUTimerT35Expired+0x80>)
 80030b6:	4a0a      	ldr	r2, [pc, #40]	; (80030e0 <xMBRTUTimerT35Expired+0x84>)
 80030b8:	f240 1159 	movw	r1, #345	; 0x159
 80030bc:	4809      	ldr	r0, [pc, #36]	; (80030e4 <xMBRTUTimerT35Expired+0x88>)
 80030be:	f000 f967 	bl	8003390 <__assert_func>
        break;
 80030c2:	bf00      	nop
                ( eRcvState == STATE_RX_RCV ) || ( eRcvState == STATE_RX_ERROR ) );
    }

    vMBPortTimersDisable(  );
 80030c4:	f000 f958 	bl	8003378 <vMBPortTimersDisable>
    eRcvState = STATE_RX_IDLE;
 80030c8:	4b03      	ldr	r3, [pc, #12]	; (80030d8 <xMBRTUTimerT35Expired+0x7c>)
 80030ca:	2201      	movs	r2, #1
 80030cc:	701a      	strb	r2, [r3, #0]

    return xNeedPoll;
 80030ce:	79fb      	ldrb	r3, [r7, #7]
}
 80030d0:	4618      	mov	r0, r3
 80030d2:	3708      	adds	r7, #8
 80030d4:	46bd      	mov	sp, r7
 80030d6:	bd80      	pop	{r7, pc}
 80030d8:	200001fb 	.word	0x200001fb
 80030dc:	080043b0 	.word	0x080043b0
 80030e0:	08004678 	.word	0x08004678
 80030e4:	0800433c 	.word	0x0800433c

080030e8 <prveMBError2Exception>:
    return ( UCHAR ) usWordBuf;
}

eMBException
prveMBError2Exception( eMBErrorCode eErrorCode )
{
 80030e8:	b480      	push	{r7}
 80030ea:	b085      	sub	sp, #20
 80030ec:	af00      	add	r7, sp, #0
 80030ee:	4603      	mov	r3, r0
 80030f0:	71fb      	strb	r3, [r7, #7]
    eMBException    eStatus;

    switch ( eErrorCode )
 80030f2:	79fb      	ldrb	r3, [r7, #7]
 80030f4:	2b07      	cmp	r3, #7
 80030f6:	d00c      	beq.n	8003112 <prveMBError2Exception+0x2a>
 80030f8:	2b07      	cmp	r3, #7
 80030fa:	dc0d      	bgt.n	8003118 <prveMBError2Exception+0x30>
 80030fc:	2b00      	cmp	r3, #0
 80030fe:	d002      	beq.n	8003106 <prveMBError2Exception+0x1e>
 8003100:	2b01      	cmp	r3, #1
 8003102:	d003      	beq.n	800310c <prveMBError2Exception+0x24>
 8003104:	e008      	b.n	8003118 <prveMBError2Exception+0x30>
    {
        case MB_ENOERR:
            eStatus = MB_EX_NONE;
 8003106:	2300      	movs	r3, #0
 8003108:	73fb      	strb	r3, [r7, #15]
            break;
 800310a:	e008      	b.n	800311e <prveMBError2Exception+0x36>

        case MB_ENOREG:
            eStatus = MB_EX_ILLEGAL_DATA_ADDRESS;
 800310c:	2302      	movs	r3, #2
 800310e:	73fb      	strb	r3, [r7, #15]
            break;
 8003110:	e005      	b.n	800311e <prveMBError2Exception+0x36>

        case MB_ETIMEDOUT:
            eStatus = MB_EX_SLAVE_BUSY;
 8003112:	2306      	movs	r3, #6
 8003114:	73fb      	strb	r3, [r7, #15]
            break;
 8003116:	e002      	b.n	800311e <prveMBError2Exception+0x36>

        default:
            eStatus = MB_EX_SLAVE_DEVICE_FAILURE;
 8003118:	2304      	movs	r3, #4
 800311a:	73fb      	strb	r3, [r7, #15]
            break;
 800311c:	bf00      	nop
    }

    return eStatus;
 800311e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003120:	4618      	mov	r0, r3
 8003122:	3714      	adds	r7, #20
 8003124:	46bd      	mov	sp, r7
 8003126:	bc80      	pop	{r7}
 8003128:	4770      	bx	lr
	...

0800312c <critical_enter>:
#include "port.h"

static uint32_t lock_nesting_count = 0;

void critical_enter(void)
{
 800312c:	b480      	push	{r7}
 800312e:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8003130:	b672      	cpsid	i
}
 8003132:	bf00      	nop
    __disable_irq();
    ++lock_nesting_count;
 8003134:	4b04      	ldr	r3, [pc, #16]	; (8003148 <critical_enter+0x1c>)
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	3301      	adds	r3, #1
 800313a:	4a03      	ldr	r2, [pc, #12]	; (8003148 <critical_enter+0x1c>)
 800313c:	6013      	str	r3, [r2, #0]
}
 800313e:	bf00      	nop
 8003140:	46bd      	mov	sp, r7
 8003142:	bc80      	pop	{r7}
 8003144:	4770      	bx	lr
 8003146:	bf00      	nop
 8003148:	20000304 	.word	0x20000304

0800314c <critical_exit>:

void critical_exit(void)
{
 800314c:	b480      	push	{r7}
 800314e:	af00      	add	r7, sp, #0
    /* Unlock interrupts only when we are exiting the outermost nested call. */
    --lock_nesting_count;
 8003150:	4b07      	ldr	r3, [pc, #28]	; (8003170 <critical_exit+0x24>)
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	3b01      	subs	r3, #1
 8003156:	4a06      	ldr	r2, [pc, #24]	; (8003170 <critical_exit+0x24>)
 8003158:	6013      	str	r3, [r2, #0]
    if (lock_nesting_count == 0) {
 800315a:	4b05      	ldr	r3, [pc, #20]	; (8003170 <critical_exit+0x24>)
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	2b00      	cmp	r3, #0
 8003160:	d101      	bne.n	8003166 <critical_exit+0x1a>
  __ASM volatile ("cpsie i" : : : "memory");
 8003162:	b662      	cpsie	i
}
 8003164:	bf00      	nop
        __enable_irq();
    }
}
 8003166:	bf00      	nop
 8003168:	46bd      	mov	sp, r7
 800316a:	bc80      	pop	{r7}
 800316c:	4770      	bx	lr
 800316e:	bf00      	nop
 8003170:	20000304 	.word	0x20000304

08003174 <xMBPortEventInit>:
static BOOL     xEventInQueue;

/* ----------------------- Start implementation -----------------------------*/
BOOL
xMBPortEventInit( void )
{
 8003174:	b480      	push	{r7}
 8003176:	af00      	add	r7, sp, #0
    xEventInQueue = FALSE;
 8003178:	4b03      	ldr	r3, [pc, #12]	; (8003188 <xMBPortEventInit+0x14>)
 800317a:	2200      	movs	r2, #0
 800317c:	701a      	strb	r2, [r3, #0]
    return TRUE;
 800317e:	2301      	movs	r3, #1
}
 8003180:	4618      	mov	r0, r3
 8003182:	46bd      	mov	sp, r7
 8003184:	bc80      	pop	{r7}
 8003186:	4770      	bx	lr
 8003188:	20000309 	.word	0x20000309

0800318c <xMBPortEventPost>:

BOOL
xMBPortEventPost( eMBEventType eEvent )
{
 800318c:	b480      	push	{r7}
 800318e:	b083      	sub	sp, #12
 8003190:	af00      	add	r7, sp, #0
 8003192:	4603      	mov	r3, r0
 8003194:	71fb      	strb	r3, [r7, #7]
    xEventInQueue = TRUE;
 8003196:	4b06      	ldr	r3, [pc, #24]	; (80031b0 <xMBPortEventPost+0x24>)
 8003198:	2201      	movs	r2, #1
 800319a:	701a      	strb	r2, [r3, #0]
    eQueuedEvent = eEvent;
 800319c:	4a05      	ldr	r2, [pc, #20]	; (80031b4 <xMBPortEventPost+0x28>)
 800319e:	79fb      	ldrb	r3, [r7, #7]
 80031a0:	7013      	strb	r3, [r2, #0]
    return TRUE;
 80031a2:	2301      	movs	r3, #1
}
 80031a4:	4618      	mov	r0, r3
 80031a6:	370c      	adds	r7, #12
 80031a8:	46bd      	mov	sp, r7
 80031aa:	bc80      	pop	{r7}
 80031ac:	4770      	bx	lr
 80031ae:	bf00      	nop
 80031b0:	20000309 	.word	0x20000309
 80031b4:	20000308 	.word	0x20000308

080031b8 <xMBPortEventGet>:

BOOL
xMBPortEventGet( eMBEventType * eEvent )
{
 80031b8:	b480      	push	{r7}
 80031ba:	b085      	sub	sp, #20
 80031bc:	af00      	add	r7, sp, #0
 80031be:	6078      	str	r0, [r7, #4]
    BOOL            xEventHappened = FALSE;
 80031c0:	2300      	movs	r3, #0
 80031c2:	73fb      	strb	r3, [r7, #15]

    if( xEventInQueue )
 80031c4:	4b09      	ldr	r3, [pc, #36]	; (80031ec <xMBPortEventGet+0x34>)
 80031c6:	781b      	ldrb	r3, [r3, #0]
 80031c8:	2b00      	cmp	r3, #0
 80031ca:	d008      	beq.n	80031de <xMBPortEventGet+0x26>
    {
        *eEvent = eQueuedEvent;
 80031cc:	4b08      	ldr	r3, [pc, #32]	; (80031f0 <xMBPortEventGet+0x38>)
 80031ce:	781a      	ldrb	r2, [r3, #0]
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	701a      	strb	r2, [r3, #0]
        xEventInQueue = FALSE;
 80031d4:	4b05      	ldr	r3, [pc, #20]	; (80031ec <xMBPortEventGet+0x34>)
 80031d6:	2200      	movs	r2, #0
 80031d8:	701a      	strb	r2, [r3, #0]
        xEventHappened = TRUE;
 80031da:	2301      	movs	r3, #1
 80031dc:	73fb      	strb	r3, [r7, #15]
    }
    return xEventHappened;
 80031de:	7bfb      	ldrb	r3, [r7, #15]
}
 80031e0:	4618      	mov	r0, r3
 80031e2:	3714      	adds	r7, #20
 80031e4:	46bd      	mov	sp, r7
 80031e6:	bc80      	pop	{r7}
 80031e8:	4770      	bx	lr
 80031ea:	bf00      	nop
 80031ec:	20000309 	.word	0x20000309
 80031f0:	20000308 	.word	0x20000308

080031f4 <vMBPortSerialEnable>:
//static void prvvUARTRxISR( void );

/* ----------------------- Start implementation -----------------------------*/
void
vMBPortSerialEnable( BOOL xRxEnable, BOOL xTxEnable )
{
 80031f4:	b580      	push	{r7, lr}
 80031f6:	b082      	sub	sp, #8
 80031f8:	af00      	add	r7, sp, #0
 80031fa:	4603      	mov	r3, r0
 80031fc:	460a      	mov	r2, r1
 80031fe:	71fb      	strb	r3, [r7, #7]
 8003200:	4613      	mov	r3, r2
 8003202:	71bb      	strb	r3, [r7, #6]
    /* If xRxEnable enable serial receive interrupts. If xTxENable enable
     * transmitter empty interrupts.
     */
	if (xRxEnable) {
 8003204:	79fb      	ldrb	r3, [r7, #7]
 8003206:	2b00      	cmp	r3, #0
 8003208:	d00f      	beq.n	800322a <vMBPortSerialEnable+0x36>
		HAL_GPIO_WritePin(TX_Enable_GPIO, TX_Enable_Pin, GPIO_PIN_RESET);
 800320a:	4b16      	ldr	r3, [pc, #88]	; (8003264 <vMBPortSerialEnable+0x70>)
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	4a16      	ldr	r2, [pc, #88]	; (8003268 <vMBPortSerialEnable+0x74>)
 8003210:	8811      	ldrh	r1, [r2, #0]
 8003212:	2200      	movs	r2, #0
 8003214:	4618      	mov	r0, r3
 8003216:	f7fd fe49 	bl	8000eac <HAL_GPIO_WritePin>
		HAL_UART_Receive_IT(huart, &Byte_Received, 1);
 800321a:	4b14      	ldr	r3, [pc, #80]	; (800326c <vMBPortSerialEnable+0x78>)
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	2201      	movs	r2, #1
 8003220:	4913      	ldr	r1, [pc, #76]	; (8003270 <vMBPortSerialEnable+0x7c>)
 8003222:	4618      	mov	r0, r3
 8003224:	f7fe fddd 	bl	8001de2 <HAL_UART_Receive_IT>
 8003228:	e004      	b.n	8003234 <vMBPortSerialEnable+0x40>
	} else {
		HAL_UART_AbortReceive(huart);
 800322a:	4b10      	ldr	r3, [pc, #64]	; (800326c <vMBPortSerialEnable+0x78>)
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	4618      	mov	r0, r3
 8003230:	f7fe fe64 	bl	8001efc <HAL_UART_AbortReceive>
	}

	if (xTxEnable) {
 8003234:	79bb      	ldrb	r3, [r7, #6]
 8003236:	2b00      	cmp	r3, #0
 8003238:	d00b      	beq.n	8003252 <vMBPortSerialEnable+0x5e>
		HAL_GPIO_WritePin(TX_Enable_GPIO, TX_Enable_Pin, GPIO_PIN_SET);
 800323a:	4b0a      	ldr	r3, [pc, #40]	; (8003264 <vMBPortSerialEnable+0x70>)
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	4a0a      	ldr	r2, [pc, #40]	; (8003268 <vMBPortSerialEnable+0x74>)
 8003240:	8811      	ldrh	r1, [r2, #0]
 8003242:	2201      	movs	r2, #1
 8003244:	4618      	mov	r0, r3
 8003246:	f7fd fe31 	bl	8000eac <HAL_GPIO_WritePin>
	    ( void )pxMBFrameCBTransmitterEmpty(  );
 800324a:	4b0a      	ldr	r3, [pc, #40]	; (8003274 <vMBPortSerialEnable+0x80>)
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	4798      	blx	r3
	} else {
		HAL_UART_AbortTransmit(huart);
	}
}
 8003250:	e004      	b.n	800325c <vMBPortSerialEnable+0x68>
		HAL_UART_AbortTransmit(huart);
 8003252:	4b06      	ldr	r3, [pc, #24]	; (800326c <vMBPortSerialEnable+0x78>)
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	4618      	mov	r0, r3
 8003258:	f7fe fde8 	bl	8001e2c <HAL_UART_AbortTransmit>
}
 800325c:	bf00      	nop
 800325e:	3708      	adds	r7, #8
 8003260:	46bd      	mov	sp, r7
 8003262:	bd80      	pop	{r7, pc}
 8003264:	20000314 	.word	0x20000314
 8003268:	20000310 	.word	0x20000310
 800326c:	2000030c 	.word	0x2000030c
 8003270:	20000318 	.word	0x20000318
 8003274:	200001c4 	.word	0x200001c4

08003278 <Modbus_UART_Init>:

void
Modbus_UART_Init(UART_HandleTypeDef *uart, GPIO_TypeDef *GPIOx, uint16_t Pin)
{
 8003278:	b480      	push	{r7}
 800327a:	b085      	sub	sp, #20
 800327c:	af00      	add	r7, sp, #0
 800327e:	60f8      	str	r0, [r7, #12]
 8003280:	60b9      	str	r1, [r7, #8]
 8003282:	4613      	mov	r3, r2
 8003284:	80fb      	strh	r3, [r7, #6]
	huart = uart;
 8003286:	4a07      	ldr	r2, [pc, #28]	; (80032a4 <Modbus_UART_Init+0x2c>)
 8003288:	68fb      	ldr	r3, [r7, #12]
 800328a:	6013      	str	r3, [r2, #0]
	TX_Enable_GPIO = GPIOx;
 800328c:	4a06      	ldr	r2, [pc, #24]	; (80032a8 <Modbus_UART_Init+0x30>)
 800328e:	68bb      	ldr	r3, [r7, #8]
 8003290:	6013      	str	r3, [r2, #0]
	TX_Enable_Pin = Pin;
 8003292:	4a06      	ldr	r2, [pc, #24]	; (80032ac <Modbus_UART_Init+0x34>)
 8003294:	88fb      	ldrh	r3, [r7, #6]
 8003296:	8013      	strh	r3, [r2, #0]
}
 8003298:	bf00      	nop
 800329a:	3714      	adds	r7, #20
 800329c:	46bd      	mov	sp, r7
 800329e:	bc80      	pop	{r7}
 80032a0:	4770      	bx	lr
 80032a2:	bf00      	nop
 80032a4:	2000030c 	.word	0x2000030c
 80032a8:	20000314 	.word	0x20000314
 80032ac:	20000310 	.word	0x20000310

080032b0 <xMBPortSerialInit>:

BOOL
xMBPortSerialInit( UCHAR ucPort, ULONG ulBaudRate, UCHAR ucDataBits, eMBParity eParity )
{
 80032b0:	b480      	push	{r7}
 80032b2:	b083      	sub	sp, #12
 80032b4:	af00      	add	r7, sp, #0
 80032b6:	6039      	str	r1, [r7, #0]
 80032b8:	4611      	mov	r1, r2
 80032ba:	461a      	mov	r2, r3
 80032bc:	4603      	mov	r3, r0
 80032be:	71fb      	strb	r3, [r7, #7]
 80032c0:	460b      	mov	r3, r1
 80032c2:	71bb      	strb	r3, [r7, #6]
 80032c4:	4613      	mov	r3, r2
 80032c6:	717b      	strb	r3, [r7, #5]
	(void) ucPort;
	(void) ulBaudRate;
	(void) ucDataBits;
	(void) eParity;

	return TRUE;
 80032c8:	2301      	movs	r3, #1
}
 80032ca:	4618      	mov	r0, r3
 80032cc:	370c      	adds	r7, #12
 80032ce:	46bd      	mov	sp, r7
 80032d0:	bc80      	pop	{r7}
 80032d2:	4770      	bx	lr

080032d4 <xMBPortSerialPutByte>:

BOOL
xMBPortSerialPutByte( CHAR ucByte )
{
 80032d4:	b580      	push	{r7, lr}
 80032d6:	b082      	sub	sp, #8
 80032d8:	af00      	add	r7, sp, #0
 80032da:	4603      	mov	r3, r0
 80032dc:	71fb      	strb	r3, [r7, #7]
    /* Put a byte in the UARTs transmit buffer. This function is called
     * by the protocol stack if pxMBFrameCBTransmitterEmpty( ) has been
     * called. */
	HAL_UART_Transmit_IT(huart, (uint8_t *)&ucByte, 1);
 80032de:	4b06      	ldr	r3, [pc, #24]	; (80032f8 <xMBPortSerialPutByte+0x24>)
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	1df9      	adds	r1, r7, #7
 80032e4:	2201      	movs	r2, #1
 80032e6:	4618      	mov	r0, r3
 80032e8:	f7fe fd46 	bl	8001d78 <HAL_UART_Transmit_IT>

    return TRUE;
 80032ec:	2301      	movs	r3, #1
}
 80032ee:	4618      	mov	r0, r3
 80032f0:	3708      	adds	r7, #8
 80032f2:	46bd      	mov	sp, r7
 80032f4:	bd80      	pop	{r7, pc}
 80032f6:	bf00      	nop
 80032f8:	2000030c 	.word	0x2000030c

080032fc <xMBPortSerialGetByte>:

BOOL
xMBPortSerialGetByte( CHAR * pucByte )
{
 80032fc:	b480      	push	{r7}
 80032fe:	b083      	sub	sp, #12
 8003300:	af00      	add	r7, sp, #0
 8003302:	6078      	str	r0, [r7, #4]
    /* Return the byte in the UARTs receive buffer. This function is called
     * by the protocol stack after pxMBFrameCBByteReceived( ) has been called.
     */
	*pucByte = Byte_Received;
 8003304:	4b04      	ldr	r3, [pc, #16]	; (8003318 <xMBPortSerialGetByte+0x1c>)
 8003306:	781a      	ldrb	r2, [r3, #0]
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	701a      	strb	r2, [r3, #0]

    return TRUE;
 800330c:	2301      	movs	r3, #1
}
 800330e:	4618      	mov	r0, r3
 8003310:	370c      	adds	r7, #12
 8003312:	46bd      	mov	sp, r7
 8003314:	bc80      	pop	{r7}
 8003316:	4770      	bx	lr
 8003318:	20000318 	.word	0x20000318

0800331c <Modbus_HTIM_Init>:
/* ----------------------- static functions ---------------------------------*/

/* ----------------------- Start implementation -----------------------------*/
void
Modbus_HTIM_Init(TIM_HandleTypeDef *set_htim)
{
 800331c:	b480      	push	{r7}
 800331e:	b083      	sub	sp, #12
 8003320:	af00      	add	r7, sp, #0
 8003322:	6078      	str	r0, [r7, #4]
	htim = set_htim;
 8003324:	4a03      	ldr	r2, [pc, #12]	; (8003334 <Modbus_HTIM_Init+0x18>)
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	6013      	str	r3, [r2, #0]
}
 800332a:	bf00      	nop
 800332c:	370c      	adds	r7, #12
 800332e:	46bd      	mov	sp, r7
 8003330:	bc80      	pop	{r7}
 8003332:	4770      	bx	lr
 8003334:	2000031c 	.word	0x2000031c

08003338 <xMBPortTimersInit>:

BOOL
xMBPortTimersInit( USHORT usTim1Timerout50us )
{
 8003338:	b480      	push	{r7}
 800333a:	b083      	sub	sp, #12
 800333c:	af00      	add	r7, sp, #0
 800333e:	4603      	mov	r3, r0
 8003340:	80fb      	strh	r3, [r7, #6]
	timeout = usTim1Timerout50us;
 8003342:	4a04      	ldr	r2, [pc, #16]	; (8003354 <xMBPortTimersInit+0x1c>)
 8003344:	88fb      	ldrh	r3, [r7, #6]
 8003346:	8013      	strh	r3, [r2, #0]

    return TRUE;
 8003348:	2301      	movs	r3, #1
}
 800334a:	4618      	mov	r0, r3
 800334c:	370c      	adds	r7, #12
 800334e:	46bd      	mov	sp, r7
 8003350:	bc80      	pop	{r7}
 8003352:	4770      	bx	lr
 8003354:	20000320 	.word	0x20000320

08003358 <vMBPortTimersEnable>:


inline void
vMBPortTimersEnable(  )
{
 8003358:	b580      	push	{r7, lr}
 800335a:	af00      	add	r7, sp, #0
    /* Enable the timer with the timeout passed to xMBPortTimersInit( ) */
	counter = 0;
 800335c:	4b04      	ldr	r3, [pc, #16]	; (8003370 <vMBPortTimersEnable+0x18>)
 800335e:	2200      	movs	r2, #0
 8003360:	801a      	strh	r2, [r3, #0]
	HAL_TIM_Base_Start_IT(htim);
 8003362:	4b04      	ldr	r3, [pc, #16]	; (8003374 <vMBPortTimersEnable+0x1c>)
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	4618      	mov	r0, r3
 8003368:	f7fe fa18 	bl	800179c <HAL_TIM_Base_Start_IT>
}
 800336c:	bf00      	nop
 800336e:	bd80      	pop	{r7, pc}
 8003370:	20000322 	.word	0x20000322
 8003374:	2000031c 	.word	0x2000031c

08003378 <vMBPortTimersDisable>:

inline void
vMBPortTimersDisable(  )
{
 8003378:	b580      	push	{r7, lr}
 800337a:	af00      	add	r7, sp, #0
    /* Disable any pending timers. */
	HAL_TIM_Base_Stop_IT(htim);
 800337c:	4b03      	ldr	r3, [pc, #12]	; (800338c <vMBPortTimersDisable+0x14>)
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	4618      	mov	r0, r3
 8003382:	f7fe fa5d 	bl	8001840 <HAL_TIM_Base_Stop_IT>
}
 8003386:	bf00      	nop
 8003388:	bd80      	pop	{r7, pc}
 800338a:	bf00      	nop
 800338c:	2000031c 	.word	0x2000031c

08003390 <__assert_func>:
 8003390:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8003392:	4614      	mov	r4, r2
 8003394:	461a      	mov	r2, r3
 8003396:	4b09      	ldr	r3, [pc, #36]	; (80033bc <__assert_func+0x2c>)
 8003398:	4605      	mov	r5, r0
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	68d8      	ldr	r0, [r3, #12]
 800339e:	b14c      	cbz	r4, 80033b4 <__assert_func+0x24>
 80033a0:	4b07      	ldr	r3, [pc, #28]	; (80033c0 <__assert_func+0x30>)
 80033a2:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80033a6:	9100      	str	r1, [sp, #0]
 80033a8:	462b      	mov	r3, r5
 80033aa:	4906      	ldr	r1, [pc, #24]	; (80033c4 <__assert_func+0x34>)
 80033ac:	f000 f8b2 	bl	8003514 <fiprintf>
 80033b0:	f000 f9ad 	bl	800370e <abort>
 80033b4:	4b04      	ldr	r3, [pc, #16]	; (80033c8 <__assert_func+0x38>)
 80033b6:	461c      	mov	r4, r3
 80033b8:	e7f3      	b.n	80033a2 <__assert_func+0x12>
 80033ba:	bf00      	nop
 80033bc:	200000e8 	.word	0x200000e8
 80033c0:	0800468e 	.word	0x0800468e
 80033c4:	0800469b 	.word	0x0800469b
 80033c8:	080046c9 	.word	0x080046c9

080033cc <std>:
 80033cc:	2300      	movs	r3, #0
 80033ce:	b510      	push	{r4, lr}
 80033d0:	4604      	mov	r4, r0
 80033d2:	e9c0 3300 	strd	r3, r3, [r0]
 80033d6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80033da:	6083      	str	r3, [r0, #8]
 80033dc:	8181      	strh	r1, [r0, #12]
 80033de:	6643      	str	r3, [r0, #100]	; 0x64
 80033e0:	81c2      	strh	r2, [r0, #14]
 80033e2:	6183      	str	r3, [r0, #24]
 80033e4:	4619      	mov	r1, r3
 80033e6:	2208      	movs	r2, #8
 80033e8:	305c      	adds	r0, #92	; 0x5c
 80033ea:	f000 f906 	bl	80035fa <memset>
 80033ee:	4b0d      	ldr	r3, [pc, #52]	; (8003424 <std+0x58>)
 80033f0:	6224      	str	r4, [r4, #32]
 80033f2:	6263      	str	r3, [r4, #36]	; 0x24
 80033f4:	4b0c      	ldr	r3, [pc, #48]	; (8003428 <std+0x5c>)
 80033f6:	62a3      	str	r3, [r4, #40]	; 0x28
 80033f8:	4b0c      	ldr	r3, [pc, #48]	; (800342c <std+0x60>)
 80033fa:	62e3      	str	r3, [r4, #44]	; 0x2c
 80033fc:	4b0c      	ldr	r3, [pc, #48]	; (8003430 <std+0x64>)
 80033fe:	6323      	str	r3, [r4, #48]	; 0x30
 8003400:	4b0c      	ldr	r3, [pc, #48]	; (8003434 <std+0x68>)
 8003402:	429c      	cmp	r4, r3
 8003404:	d006      	beq.n	8003414 <std+0x48>
 8003406:	f103 0268 	add.w	r2, r3, #104	; 0x68
 800340a:	4294      	cmp	r4, r2
 800340c:	d002      	beq.n	8003414 <std+0x48>
 800340e:	33d0      	adds	r3, #208	; 0xd0
 8003410:	429c      	cmp	r4, r3
 8003412:	d105      	bne.n	8003420 <std+0x54>
 8003414:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8003418:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800341c:	f000 b966 	b.w	80036ec <__retarget_lock_init_recursive>
 8003420:	bd10      	pop	{r4, pc}
 8003422:	bf00      	nop
 8003424:	08003575 	.word	0x08003575
 8003428:	08003597 	.word	0x08003597
 800342c:	080035cf 	.word	0x080035cf
 8003430:	080035f3 	.word	0x080035f3
 8003434:	20000324 	.word	0x20000324

08003438 <stdio_exit_handler>:
 8003438:	4a02      	ldr	r2, [pc, #8]	; (8003444 <stdio_exit_handler+0xc>)
 800343a:	4903      	ldr	r1, [pc, #12]	; (8003448 <stdio_exit_handler+0x10>)
 800343c:	4803      	ldr	r0, [pc, #12]	; (800344c <stdio_exit_handler+0x14>)
 800343e:	f000 b87b 	b.w	8003538 <_fwalk_sglue>
 8003442:	bf00      	nop
 8003444:	20000090 	.word	0x20000090
 8003448:	08003fb5 	.word	0x08003fb5
 800344c:	2000009c 	.word	0x2000009c

08003450 <cleanup_stdio>:
 8003450:	6841      	ldr	r1, [r0, #4]
 8003452:	4b0c      	ldr	r3, [pc, #48]	; (8003484 <cleanup_stdio+0x34>)
 8003454:	b510      	push	{r4, lr}
 8003456:	4299      	cmp	r1, r3
 8003458:	4604      	mov	r4, r0
 800345a:	d001      	beq.n	8003460 <cleanup_stdio+0x10>
 800345c:	f000 fdaa 	bl	8003fb4 <_fflush_r>
 8003460:	68a1      	ldr	r1, [r4, #8]
 8003462:	4b09      	ldr	r3, [pc, #36]	; (8003488 <cleanup_stdio+0x38>)
 8003464:	4299      	cmp	r1, r3
 8003466:	d002      	beq.n	800346e <cleanup_stdio+0x1e>
 8003468:	4620      	mov	r0, r4
 800346a:	f000 fda3 	bl	8003fb4 <_fflush_r>
 800346e:	68e1      	ldr	r1, [r4, #12]
 8003470:	4b06      	ldr	r3, [pc, #24]	; (800348c <cleanup_stdio+0x3c>)
 8003472:	4299      	cmp	r1, r3
 8003474:	d004      	beq.n	8003480 <cleanup_stdio+0x30>
 8003476:	4620      	mov	r0, r4
 8003478:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800347c:	f000 bd9a 	b.w	8003fb4 <_fflush_r>
 8003480:	bd10      	pop	{r4, pc}
 8003482:	bf00      	nop
 8003484:	20000324 	.word	0x20000324
 8003488:	2000038c 	.word	0x2000038c
 800348c:	200003f4 	.word	0x200003f4

08003490 <global_stdio_init.part.0>:
 8003490:	b510      	push	{r4, lr}
 8003492:	4b0b      	ldr	r3, [pc, #44]	; (80034c0 <global_stdio_init.part.0+0x30>)
 8003494:	4c0b      	ldr	r4, [pc, #44]	; (80034c4 <global_stdio_init.part.0+0x34>)
 8003496:	4a0c      	ldr	r2, [pc, #48]	; (80034c8 <global_stdio_init.part.0+0x38>)
 8003498:	4620      	mov	r0, r4
 800349a:	601a      	str	r2, [r3, #0]
 800349c:	2104      	movs	r1, #4
 800349e:	2200      	movs	r2, #0
 80034a0:	f7ff ff94 	bl	80033cc <std>
 80034a4:	f104 0068 	add.w	r0, r4, #104	; 0x68
 80034a8:	2201      	movs	r2, #1
 80034aa:	2109      	movs	r1, #9
 80034ac:	f7ff ff8e 	bl	80033cc <std>
 80034b0:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 80034b4:	2202      	movs	r2, #2
 80034b6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80034ba:	2112      	movs	r1, #18
 80034bc:	f7ff bf86 	b.w	80033cc <std>
 80034c0:	2000045c 	.word	0x2000045c
 80034c4:	20000324 	.word	0x20000324
 80034c8:	08003439 	.word	0x08003439

080034cc <__sfp_lock_acquire>:
 80034cc:	4801      	ldr	r0, [pc, #4]	; (80034d4 <__sfp_lock_acquire+0x8>)
 80034ce:	f000 b90e 	b.w	80036ee <__retarget_lock_acquire_recursive>
 80034d2:	bf00      	nop
 80034d4:	20000465 	.word	0x20000465

080034d8 <__sfp_lock_release>:
 80034d8:	4801      	ldr	r0, [pc, #4]	; (80034e0 <__sfp_lock_release+0x8>)
 80034da:	f000 b909 	b.w	80036f0 <__retarget_lock_release_recursive>
 80034de:	bf00      	nop
 80034e0:	20000465 	.word	0x20000465

080034e4 <__sinit>:
 80034e4:	b510      	push	{r4, lr}
 80034e6:	4604      	mov	r4, r0
 80034e8:	f7ff fff0 	bl	80034cc <__sfp_lock_acquire>
 80034ec:	6a23      	ldr	r3, [r4, #32]
 80034ee:	b11b      	cbz	r3, 80034f8 <__sinit+0x14>
 80034f0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80034f4:	f7ff bff0 	b.w	80034d8 <__sfp_lock_release>
 80034f8:	4b04      	ldr	r3, [pc, #16]	; (800350c <__sinit+0x28>)
 80034fa:	6223      	str	r3, [r4, #32]
 80034fc:	4b04      	ldr	r3, [pc, #16]	; (8003510 <__sinit+0x2c>)
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	2b00      	cmp	r3, #0
 8003502:	d1f5      	bne.n	80034f0 <__sinit+0xc>
 8003504:	f7ff ffc4 	bl	8003490 <global_stdio_init.part.0>
 8003508:	e7f2      	b.n	80034f0 <__sinit+0xc>
 800350a:	bf00      	nop
 800350c:	08003451 	.word	0x08003451
 8003510:	2000045c 	.word	0x2000045c

08003514 <fiprintf>:
 8003514:	b40e      	push	{r1, r2, r3}
 8003516:	b503      	push	{r0, r1, lr}
 8003518:	4601      	mov	r1, r0
 800351a:	ab03      	add	r3, sp, #12
 800351c:	4805      	ldr	r0, [pc, #20]	; (8003534 <fiprintf+0x20>)
 800351e:	f853 2b04 	ldr.w	r2, [r3], #4
 8003522:	6800      	ldr	r0, [r0, #0]
 8003524:	9301      	str	r3, [sp, #4]
 8003526:	f000 fa15 	bl	8003954 <_vfiprintf_r>
 800352a:	b002      	add	sp, #8
 800352c:	f85d eb04 	ldr.w	lr, [sp], #4
 8003530:	b003      	add	sp, #12
 8003532:	4770      	bx	lr
 8003534:	200000e8 	.word	0x200000e8

08003538 <_fwalk_sglue>:
 8003538:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800353c:	4607      	mov	r7, r0
 800353e:	4688      	mov	r8, r1
 8003540:	4614      	mov	r4, r2
 8003542:	2600      	movs	r6, #0
 8003544:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8003548:	f1b9 0901 	subs.w	r9, r9, #1
 800354c:	d505      	bpl.n	800355a <_fwalk_sglue+0x22>
 800354e:	6824      	ldr	r4, [r4, #0]
 8003550:	2c00      	cmp	r4, #0
 8003552:	d1f7      	bne.n	8003544 <_fwalk_sglue+0xc>
 8003554:	4630      	mov	r0, r6
 8003556:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800355a:	89ab      	ldrh	r3, [r5, #12]
 800355c:	2b01      	cmp	r3, #1
 800355e:	d907      	bls.n	8003570 <_fwalk_sglue+0x38>
 8003560:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8003564:	3301      	adds	r3, #1
 8003566:	d003      	beq.n	8003570 <_fwalk_sglue+0x38>
 8003568:	4629      	mov	r1, r5
 800356a:	4638      	mov	r0, r7
 800356c:	47c0      	blx	r8
 800356e:	4306      	orrs	r6, r0
 8003570:	3568      	adds	r5, #104	; 0x68
 8003572:	e7e9      	b.n	8003548 <_fwalk_sglue+0x10>

08003574 <__sread>:
 8003574:	b510      	push	{r4, lr}
 8003576:	460c      	mov	r4, r1
 8003578:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800357c:	f000 f868 	bl	8003650 <_read_r>
 8003580:	2800      	cmp	r0, #0
 8003582:	bfab      	itete	ge
 8003584:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8003586:	89a3      	ldrhlt	r3, [r4, #12]
 8003588:	181b      	addge	r3, r3, r0
 800358a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800358e:	bfac      	ite	ge
 8003590:	6563      	strge	r3, [r4, #84]	; 0x54
 8003592:	81a3      	strhlt	r3, [r4, #12]
 8003594:	bd10      	pop	{r4, pc}

08003596 <__swrite>:
 8003596:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800359a:	461f      	mov	r7, r3
 800359c:	898b      	ldrh	r3, [r1, #12]
 800359e:	4605      	mov	r5, r0
 80035a0:	05db      	lsls	r3, r3, #23
 80035a2:	460c      	mov	r4, r1
 80035a4:	4616      	mov	r6, r2
 80035a6:	d505      	bpl.n	80035b4 <__swrite+0x1e>
 80035a8:	2302      	movs	r3, #2
 80035aa:	2200      	movs	r2, #0
 80035ac:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80035b0:	f000 f83c 	bl	800362c <_lseek_r>
 80035b4:	89a3      	ldrh	r3, [r4, #12]
 80035b6:	4632      	mov	r2, r6
 80035b8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80035bc:	81a3      	strh	r3, [r4, #12]
 80035be:	4628      	mov	r0, r5
 80035c0:	463b      	mov	r3, r7
 80035c2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80035c6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80035ca:	f000 b853 	b.w	8003674 <_write_r>

080035ce <__sseek>:
 80035ce:	b510      	push	{r4, lr}
 80035d0:	460c      	mov	r4, r1
 80035d2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80035d6:	f000 f829 	bl	800362c <_lseek_r>
 80035da:	1c43      	adds	r3, r0, #1
 80035dc:	89a3      	ldrh	r3, [r4, #12]
 80035de:	bf15      	itete	ne
 80035e0:	6560      	strne	r0, [r4, #84]	; 0x54
 80035e2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80035e6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80035ea:	81a3      	strheq	r3, [r4, #12]
 80035ec:	bf18      	it	ne
 80035ee:	81a3      	strhne	r3, [r4, #12]
 80035f0:	bd10      	pop	{r4, pc}

080035f2 <__sclose>:
 80035f2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80035f6:	f000 b809 	b.w	800360c <_close_r>

080035fa <memset>:
 80035fa:	4603      	mov	r3, r0
 80035fc:	4402      	add	r2, r0
 80035fe:	4293      	cmp	r3, r2
 8003600:	d100      	bne.n	8003604 <memset+0xa>
 8003602:	4770      	bx	lr
 8003604:	f803 1b01 	strb.w	r1, [r3], #1
 8003608:	e7f9      	b.n	80035fe <memset+0x4>
	...

0800360c <_close_r>:
 800360c:	b538      	push	{r3, r4, r5, lr}
 800360e:	2300      	movs	r3, #0
 8003610:	4d05      	ldr	r5, [pc, #20]	; (8003628 <_close_r+0x1c>)
 8003612:	4604      	mov	r4, r0
 8003614:	4608      	mov	r0, r1
 8003616:	602b      	str	r3, [r5, #0]
 8003618:	f7fd f8a5 	bl	8000766 <_close>
 800361c:	1c43      	adds	r3, r0, #1
 800361e:	d102      	bne.n	8003626 <_close_r+0x1a>
 8003620:	682b      	ldr	r3, [r5, #0]
 8003622:	b103      	cbz	r3, 8003626 <_close_r+0x1a>
 8003624:	6023      	str	r3, [r4, #0]
 8003626:	bd38      	pop	{r3, r4, r5, pc}
 8003628:	20000460 	.word	0x20000460

0800362c <_lseek_r>:
 800362c:	b538      	push	{r3, r4, r5, lr}
 800362e:	4604      	mov	r4, r0
 8003630:	4608      	mov	r0, r1
 8003632:	4611      	mov	r1, r2
 8003634:	2200      	movs	r2, #0
 8003636:	4d05      	ldr	r5, [pc, #20]	; (800364c <_lseek_r+0x20>)
 8003638:	602a      	str	r2, [r5, #0]
 800363a:	461a      	mov	r2, r3
 800363c:	f7fd f8b7 	bl	80007ae <_lseek>
 8003640:	1c43      	adds	r3, r0, #1
 8003642:	d102      	bne.n	800364a <_lseek_r+0x1e>
 8003644:	682b      	ldr	r3, [r5, #0]
 8003646:	b103      	cbz	r3, 800364a <_lseek_r+0x1e>
 8003648:	6023      	str	r3, [r4, #0]
 800364a:	bd38      	pop	{r3, r4, r5, pc}
 800364c:	20000460 	.word	0x20000460

08003650 <_read_r>:
 8003650:	b538      	push	{r3, r4, r5, lr}
 8003652:	4604      	mov	r4, r0
 8003654:	4608      	mov	r0, r1
 8003656:	4611      	mov	r1, r2
 8003658:	2200      	movs	r2, #0
 800365a:	4d05      	ldr	r5, [pc, #20]	; (8003670 <_read_r+0x20>)
 800365c:	602a      	str	r2, [r5, #0]
 800365e:	461a      	mov	r2, r3
 8003660:	f7fd f848 	bl	80006f4 <_read>
 8003664:	1c43      	adds	r3, r0, #1
 8003666:	d102      	bne.n	800366e <_read_r+0x1e>
 8003668:	682b      	ldr	r3, [r5, #0]
 800366a:	b103      	cbz	r3, 800366e <_read_r+0x1e>
 800366c:	6023      	str	r3, [r4, #0]
 800366e:	bd38      	pop	{r3, r4, r5, pc}
 8003670:	20000460 	.word	0x20000460

08003674 <_write_r>:
 8003674:	b538      	push	{r3, r4, r5, lr}
 8003676:	4604      	mov	r4, r0
 8003678:	4608      	mov	r0, r1
 800367a:	4611      	mov	r1, r2
 800367c:	2200      	movs	r2, #0
 800367e:	4d05      	ldr	r5, [pc, #20]	; (8003694 <_write_r+0x20>)
 8003680:	602a      	str	r2, [r5, #0]
 8003682:	461a      	mov	r2, r3
 8003684:	f7fd f853 	bl	800072e <_write>
 8003688:	1c43      	adds	r3, r0, #1
 800368a:	d102      	bne.n	8003692 <_write_r+0x1e>
 800368c:	682b      	ldr	r3, [r5, #0]
 800368e:	b103      	cbz	r3, 8003692 <_write_r+0x1e>
 8003690:	6023      	str	r3, [r4, #0]
 8003692:	bd38      	pop	{r3, r4, r5, pc}
 8003694:	20000460 	.word	0x20000460

08003698 <__errno>:
 8003698:	4b01      	ldr	r3, [pc, #4]	; (80036a0 <__errno+0x8>)
 800369a:	6818      	ldr	r0, [r3, #0]
 800369c:	4770      	bx	lr
 800369e:	bf00      	nop
 80036a0:	200000e8 	.word	0x200000e8

080036a4 <__libc_init_array>:
 80036a4:	b570      	push	{r4, r5, r6, lr}
 80036a6:	2600      	movs	r6, #0
 80036a8:	4d0c      	ldr	r5, [pc, #48]	; (80036dc <__libc_init_array+0x38>)
 80036aa:	4c0d      	ldr	r4, [pc, #52]	; (80036e0 <__libc_init_array+0x3c>)
 80036ac:	1b64      	subs	r4, r4, r5
 80036ae:	10a4      	asrs	r4, r4, #2
 80036b0:	42a6      	cmp	r6, r4
 80036b2:	d109      	bne.n	80036c8 <__libc_init_array+0x24>
 80036b4:	f000 fe22 	bl	80042fc <_init>
 80036b8:	2600      	movs	r6, #0
 80036ba:	4d0a      	ldr	r5, [pc, #40]	; (80036e4 <__libc_init_array+0x40>)
 80036bc:	4c0a      	ldr	r4, [pc, #40]	; (80036e8 <__libc_init_array+0x44>)
 80036be:	1b64      	subs	r4, r4, r5
 80036c0:	10a4      	asrs	r4, r4, #2
 80036c2:	42a6      	cmp	r6, r4
 80036c4:	d105      	bne.n	80036d2 <__libc_init_array+0x2e>
 80036c6:	bd70      	pop	{r4, r5, r6, pc}
 80036c8:	f855 3b04 	ldr.w	r3, [r5], #4
 80036cc:	4798      	blx	r3
 80036ce:	3601      	adds	r6, #1
 80036d0:	e7ee      	b.n	80036b0 <__libc_init_array+0xc>
 80036d2:	f855 3b04 	ldr.w	r3, [r5], #4
 80036d6:	4798      	blx	r3
 80036d8:	3601      	adds	r6, #1
 80036da:	e7f2      	b.n	80036c2 <__libc_init_array+0x1e>
 80036dc:	08004700 	.word	0x08004700
 80036e0:	08004700 	.word	0x08004700
 80036e4:	08004700 	.word	0x08004700
 80036e8:	08004704 	.word	0x08004704

080036ec <__retarget_lock_init_recursive>:
 80036ec:	4770      	bx	lr

080036ee <__retarget_lock_acquire_recursive>:
 80036ee:	4770      	bx	lr

080036f0 <__retarget_lock_release_recursive>:
 80036f0:	4770      	bx	lr

080036f2 <memcpy>:
 80036f2:	440a      	add	r2, r1
 80036f4:	4291      	cmp	r1, r2
 80036f6:	f100 33ff 	add.w	r3, r0, #4294967295
 80036fa:	d100      	bne.n	80036fe <memcpy+0xc>
 80036fc:	4770      	bx	lr
 80036fe:	b510      	push	{r4, lr}
 8003700:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003704:	4291      	cmp	r1, r2
 8003706:	f803 4f01 	strb.w	r4, [r3, #1]!
 800370a:	d1f9      	bne.n	8003700 <memcpy+0xe>
 800370c:	bd10      	pop	{r4, pc}

0800370e <abort>:
 800370e:	2006      	movs	r0, #6
 8003710:	b508      	push	{r3, lr}
 8003712:	f000 fd35 	bl	8004180 <raise>
 8003716:	2001      	movs	r0, #1
 8003718:	f7fc ffe2 	bl	80006e0 <_exit>

0800371c <_free_r>:
 800371c:	b538      	push	{r3, r4, r5, lr}
 800371e:	4605      	mov	r5, r0
 8003720:	2900      	cmp	r1, #0
 8003722:	d040      	beq.n	80037a6 <_free_r+0x8a>
 8003724:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003728:	1f0c      	subs	r4, r1, #4
 800372a:	2b00      	cmp	r3, #0
 800372c:	bfb8      	it	lt
 800372e:	18e4      	addlt	r4, r4, r3
 8003730:	f000 f8dc 	bl	80038ec <__malloc_lock>
 8003734:	4a1c      	ldr	r2, [pc, #112]	; (80037a8 <_free_r+0x8c>)
 8003736:	6813      	ldr	r3, [r2, #0]
 8003738:	b933      	cbnz	r3, 8003748 <_free_r+0x2c>
 800373a:	6063      	str	r3, [r4, #4]
 800373c:	6014      	str	r4, [r2, #0]
 800373e:	4628      	mov	r0, r5
 8003740:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003744:	f000 b8d8 	b.w	80038f8 <__malloc_unlock>
 8003748:	42a3      	cmp	r3, r4
 800374a:	d908      	bls.n	800375e <_free_r+0x42>
 800374c:	6820      	ldr	r0, [r4, #0]
 800374e:	1821      	adds	r1, r4, r0
 8003750:	428b      	cmp	r3, r1
 8003752:	bf01      	itttt	eq
 8003754:	6819      	ldreq	r1, [r3, #0]
 8003756:	685b      	ldreq	r3, [r3, #4]
 8003758:	1809      	addeq	r1, r1, r0
 800375a:	6021      	streq	r1, [r4, #0]
 800375c:	e7ed      	b.n	800373a <_free_r+0x1e>
 800375e:	461a      	mov	r2, r3
 8003760:	685b      	ldr	r3, [r3, #4]
 8003762:	b10b      	cbz	r3, 8003768 <_free_r+0x4c>
 8003764:	42a3      	cmp	r3, r4
 8003766:	d9fa      	bls.n	800375e <_free_r+0x42>
 8003768:	6811      	ldr	r1, [r2, #0]
 800376a:	1850      	adds	r0, r2, r1
 800376c:	42a0      	cmp	r0, r4
 800376e:	d10b      	bne.n	8003788 <_free_r+0x6c>
 8003770:	6820      	ldr	r0, [r4, #0]
 8003772:	4401      	add	r1, r0
 8003774:	1850      	adds	r0, r2, r1
 8003776:	4283      	cmp	r3, r0
 8003778:	6011      	str	r1, [r2, #0]
 800377a:	d1e0      	bne.n	800373e <_free_r+0x22>
 800377c:	6818      	ldr	r0, [r3, #0]
 800377e:	685b      	ldr	r3, [r3, #4]
 8003780:	4408      	add	r0, r1
 8003782:	6010      	str	r0, [r2, #0]
 8003784:	6053      	str	r3, [r2, #4]
 8003786:	e7da      	b.n	800373e <_free_r+0x22>
 8003788:	d902      	bls.n	8003790 <_free_r+0x74>
 800378a:	230c      	movs	r3, #12
 800378c:	602b      	str	r3, [r5, #0]
 800378e:	e7d6      	b.n	800373e <_free_r+0x22>
 8003790:	6820      	ldr	r0, [r4, #0]
 8003792:	1821      	adds	r1, r4, r0
 8003794:	428b      	cmp	r3, r1
 8003796:	bf01      	itttt	eq
 8003798:	6819      	ldreq	r1, [r3, #0]
 800379a:	685b      	ldreq	r3, [r3, #4]
 800379c:	1809      	addeq	r1, r1, r0
 800379e:	6021      	streq	r1, [r4, #0]
 80037a0:	6063      	str	r3, [r4, #4]
 80037a2:	6054      	str	r4, [r2, #4]
 80037a4:	e7cb      	b.n	800373e <_free_r+0x22>
 80037a6:	bd38      	pop	{r3, r4, r5, pc}
 80037a8:	20000468 	.word	0x20000468

080037ac <sbrk_aligned>:
 80037ac:	b570      	push	{r4, r5, r6, lr}
 80037ae:	4e0e      	ldr	r6, [pc, #56]	; (80037e8 <sbrk_aligned+0x3c>)
 80037b0:	460c      	mov	r4, r1
 80037b2:	6831      	ldr	r1, [r6, #0]
 80037b4:	4605      	mov	r5, r0
 80037b6:	b911      	cbnz	r1, 80037be <sbrk_aligned+0x12>
 80037b8:	f000 fcfe 	bl	80041b8 <_sbrk_r>
 80037bc:	6030      	str	r0, [r6, #0]
 80037be:	4621      	mov	r1, r4
 80037c0:	4628      	mov	r0, r5
 80037c2:	f000 fcf9 	bl	80041b8 <_sbrk_r>
 80037c6:	1c43      	adds	r3, r0, #1
 80037c8:	d00a      	beq.n	80037e0 <sbrk_aligned+0x34>
 80037ca:	1cc4      	adds	r4, r0, #3
 80037cc:	f024 0403 	bic.w	r4, r4, #3
 80037d0:	42a0      	cmp	r0, r4
 80037d2:	d007      	beq.n	80037e4 <sbrk_aligned+0x38>
 80037d4:	1a21      	subs	r1, r4, r0
 80037d6:	4628      	mov	r0, r5
 80037d8:	f000 fcee 	bl	80041b8 <_sbrk_r>
 80037dc:	3001      	adds	r0, #1
 80037de:	d101      	bne.n	80037e4 <sbrk_aligned+0x38>
 80037e0:	f04f 34ff 	mov.w	r4, #4294967295
 80037e4:	4620      	mov	r0, r4
 80037e6:	bd70      	pop	{r4, r5, r6, pc}
 80037e8:	2000046c 	.word	0x2000046c

080037ec <_malloc_r>:
 80037ec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80037f0:	1ccd      	adds	r5, r1, #3
 80037f2:	f025 0503 	bic.w	r5, r5, #3
 80037f6:	3508      	adds	r5, #8
 80037f8:	2d0c      	cmp	r5, #12
 80037fa:	bf38      	it	cc
 80037fc:	250c      	movcc	r5, #12
 80037fe:	2d00      	cmp	r5, #0
 8003800:	4607      	mov	r7, r0
 8003802:	db01      	blt.n	8003808 <_malloc_r+0x1c>
 8003804:	42a9      	cmp	r1, r5
 8003806:	d905      	bls.n	8003814 <_malloc_r+0x28>
 8003808:	230c      	movs	r3, #12
 800380a:	2600      	movs	r6, #0
 800380c:	603b      	str	r3, [r7, #0]
 800380e:	4630      	mov	r0, r6
 8003810:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003814:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 80038e8 <_malloc_r+0xfc>
 8003818:	f000 f868 	bl	80038ec <__malloc_lock>
 800381c:	f8d8 3000 	ldr.w	r3, [r8]
 8003820:	461c      	mov	r4, r3
 8003822:	bb5c      	cbnz	r4, 800387c <_malloc_r+0x90>
 8003824:	4629      	mov	r1, r5
 8003826:	4638      	mov	r0, r7
 8003828:	f7ff ffc0 	bl	80037ac <sbrk_aligned>
 800382c:	1c43      	adds	r3, r0, #1
 800382e:	4604      	mov	r4, r0
 8003830:	d155      	bne.n	80038de <_malloc_r+0xf2>
 8003832:	f8d8 4000 	ldr.w	r4, [r8]
 8003836:	4626      	mov	r6, r4
 8003838:	2e00      	cmp	r6, #0
 800383a:	d145      	bne.n	80038c8 <_malloc_r+0xdc>
 800383c:	2c00      	cmp	r4, #0
 800383e:	d048      	beq.n	80038d2 <_malloc_r+0xe6>
 8003840:	6823      	ldr	r3, [r4, #0]
 8003842:	4631      	mov	r1, r6
 8003844:	4638      	mov	r0, r7
 8003846:	eb04 0903 	add.w	r9, r4, r3
 800384a:	f000 fcb5 	bl	80041b8 <_sbrk_r>
 800384e:	4581      	cmp	r9, r0
 8003850:	d13f      	bne.n	80038d2 <_malloc_r+0xe6>
 8003852:	6821      	ldr	r1, [r4, #0]
 8003854:	4638      	mov	r0, r7
 8003856:	1a6d      	subs	r5, r5, r1
 8003858:	4629      	mov	r1, r5
 800385a:	f7ff ffa7 	bl	80037ac <sbrk_aligned>
 800385e:	3001      	adds	r0, #1
 8003860:	d037      	beq.n	80038d2 <_malloc_r+0xe6>
 8003862:	6823      	ldr	r3, [r4, #0]
 8003864:	442b      	add	r3, r5
 8003866:	6023      	str	r3, [r4, #0]
 8003868:	f8d8 3000 	ldr.w	r3, [r8]
 800386c:	2b00      	cmp	r3, #0
 800386e:	d038      	beq.n	80038e2 <_malloc_r+0xf6>
 8003870:	685a      	ldr	r2, [r3, #4]
 8003872:	42a2      	cmp	r2, r4
 8003874:	d12b      	bne.n	80038ce <_malloc_r+0xe2>
 8003876:	2200      	movs	r2, #0
 8003878:	605a      	str	r2, [r3, #4]
 800387a:	e00f      	b.n	800389c <_malloc_r+0xb0>
 800387c:	6822      	ldr	r2, [r4, #0]
 800387e:	1b52      	subs	r2, r2, r5
 8003880:	d41f      	bmi.n	80038c2 <_malloc_r+0xd6>
 8003882:	2a0b      	cmp	r2, #11
 8003884:	d917      	bls.n	80038b6 <_malloc_r+0xca>
 8003886:	1961      	adds	r1, r4, r5
 8003888:	42a3      	cmp	r3, r4
 800388a:	6025      	str	r5, [r4, #0]
 800388c:	bf18      	it	ne
 800388e:	6059      	strne	r1, [r3, #4]
 8003890:	6863      	ldr	r3, [r4, #4]
 8003892:	bf08      	it	eq
 8003894:	f8c8 1000 	streq.w	r1, [r8]
 8003898:	5162      	str	r2, [r4, r5]
 800389a:	604b      	str	r3, [r1, #4]
 800389c:	4638      	mov	r0, r7
 800389e:	f104 060b 	add.w	r6, r4, #11
 80038a2:	f000 f829 	bl	80038f8 <__malloc_unlock>
 80038a6:	f026 0607 	bic.w	r6, r6, #7
 80038aa:	1d23      	adds	r3, r4, #4
 80038ac:	1af2      	subs	r2, r6, r3
 80038ae:	d0ae      	beq.n	800380e <_malloc_r+0x22>
 80038b0:	1b9b      	subs	r3, r3, r6
 80038b2:	50a3      	str	r3, [r4, r2]
 80038b4:	e7ab      	b.n	800380e <_malloc_r+0x22>
 80038b6:	42a3      	cmp	r3, r4
 80038b8:	6862      	ldr	r2, [r4, #4]
 80038ba:	d1dd      	bne.n	8003878 <_malloc_r+0x8c>
 80038bc:	f8c8 2000 	str.w	r2, [r8]
 80038c0:	e7ec      	b.n	800389c <_malloc_r+0xb0>
 80038c2:	4623      	mov	r3, r4
 80038c4:	6864      	ldr	r4, [r4, #4]
 80038c6:	e7ac      	b.n	8003822 <_malloc_r+0x36>
 80038c8:	4634      	mov	r4, r6
 80038ca:	6876      	ldr	r6, [r6, #4]
 80038cc:	e7b4      	b.n	8003838 <_malloc_r+0x4c>
 80038ce:	4613      	mov	r3, r2
 80038d0:	e7cc      	b.n	800386c <_malloc_r+0x80>
 80038d2:	230c      	movs	r3, #12
 80038d4:	4638      	mov	r0, r7
 80038d6:	603b      	str	r3, [r7, #0]
 80038d8:	f000 f80e 	bl	80038f8 <__malloc_unlock>
 80038dc:	e797      	b.n	800380e <_malloc_r+0x22>
 80038de:	6025      	str	r5, [r4, #0]
 80038e0:	e7dc      	b.n	800389c <_malloc_r+0xb0>
 80038e2:	605b      	str	r3, [r3, #4]
 80038e4:	deff      	udf	#255	; 0xff
 80038e6:	bf00      	nop
 80038e8:	20000468 	.word	0x20000468

080038ec <__malloc_lock>:
 80038ec:	4801      	ldr	r0, [pc, #4]	; (80038f4 <__malloc_lock+0x8>)
 80038ee:	f7ff befe 	b.w	80036ee <__retarget_lock_acquire_recursive>
 80038f2:	bf00      	nop
 80038f4:	20000464 	.word	0x20000464

080038f8 <__malloc_unlock>:
 80038f8:	4801      	ldr	r0, [pc, #4]	; (8003900 <__malloc_unlock+0x8>)
 80038fa:	f7ff bef9 	b.w	80036f0 <__retarget_lock_release_recursive>
 80038fe:	bf00      	nop
 8003900:	20000464 	.word	0x20000464

08003904 <__sfputc_r>:
 8003904:	6893      	ldr	r3, [r2, #8]
 8003906:	b410      	push	{r4}
 8003908:	3b01      	subs	r3, #1
 800390a:	2b00      	cmp	r3, #0
 800390c:	6093      	str	r3, [r2, #8]
 800390e:	da07      	bge.n	8003920 <__sfputc_r+0x1c>
 8003910:	6994      	ldr	r4, [r2, #24]
 8003912:	42a3      	cmp	r3, r4
 8003914:	db01      	blt.n	800391a <__sfputc_r+0x16>
 8003916:	290a      	cmp	r1, #10
 8003918:	d102      	bne.n	8003920 <__sfputc_r+0x1c>
 800391a:	bc10      	pop	{r4}
 800391c:	f000 bb72 	b.w	8004004 <__swbuf_r>
 8003920:	6813      	ldr	r3, [r2, #0]
 8003922:	1c58      	adds	r0, r3, #1
 8003924:	6010      	str	r0, [r2, #0]
 8003926:	7019      	strb	r1, [r3, #0]
 8003928:	4608      	mov	r0, r1
 800392a:	bc10      	pop	{r4}
 800392c:	4770      	bx	lr

0800392e <__sfputs_r>:
 800392e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003930:	4606      	mov	r6, r0
 8003932:	460f      	mov	r7, r1
 8003934:	4614      	mov	r4, r2
 8003936:	18d5      	adds	r5, r2, r3
 8003938:	42ac      	cmp	r4, r5
 800393a:	d101      	bne.n	8003940 <__sfputs_r+0x12>
 800393c:	2000      	movs	r0, #0
 800393e:	e007      	b.n	8003950 <__sfputs_r+0x22>
 8003940:	463a      	mov	r2, r7
 8003942:	4630      	mov	r0, r6
 8003944:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003948:	f7ff ffdc 	bl	8003904 <__sfputc_r>
 800394c:	1c43      	adds	r3, r0, #1
 800394e:	d1f3      	bne.n	8003938 <__sfputs_r+0xa>
 8003950:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08003954 <_vfiprintf_r>:
 8003954:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003958:	460d      	mov	r5, r1
 800395a:	4614      	mov	r4, r2
 800395c:	4698      	mov	r8, r3
 800395e:	4606      	mov	r6, r0
 8003960:	b09d      	sub	sp, #116	; 0x74
 8003962:	b118      	cbz	r0, 800396c <_vfiprintf_r+0x18>
 8003964:	6a03      	ldr	r3, [r0, #32]
 8003966:	b90b      	cbnz	r3, 800396c <_vfiprintf_r+0x18>
 8003968:	f7ff fdbc 	bl	80034e4 <__sinit>
 800396c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800396e:	07d9      	lsls	r1, r3, #31
 8003970:	d405      	bmi.n	800397e <_vfiprintf_r+0x2a>
 8003972:	89ab      	ldrh	r3, [r5, #12]
 8003974:	059a      	lsls	r2, r3, #22
 8003976:	d402      	bmi.n	800397e <_vfiprintf_r+0x2a>
 8003978:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800397a:	f7ff feb8 	bl	80036ee <__retarget_lock_acquire_recursive>
 800397e:	89ab      	ldrh	r3, [r5, #12]
 8003980:	071b      	lsls	r3, r3, #28
 8003982:	d501      	bpl.n	8003988 <_vfiprintf_r+0x34>
 8003984:	692b      	ldr	r3, [r5, #16]
 8003986:	b99b      	cbnz	r3, 80039b0 <_vfiprintf_r+0x5c>
 8003988:	4629      	mov	r1, r5
 800398a:	4630      	mov	r0, r6
 800398c:	f000 fb78 	bl	8004080 <__swsetup_r>
 8003990:	b170      	cbz	r0, 80039b0 <_vfiprintf_r+0x5c>
 8003992:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8003994:	07dc      	lsls	r4, r3, #31
 8003996:	d504      	bpl.n	80039a2 <_vfiprintf_r+0x4e>
 8003998:	f04f 30ff 	mov.w	r0, #4294967295
 800399c:	b01d      	add	sp, #116	; 0x74
 800399e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80039a2:	89ab      	ldrh	r3, [r5, #12]
 80039a4:	0598      	lsls	r0, r3, #22
 80039a6:	d4f7      	bmi.n	8003998 <_vfiprintf_r+0x44>
 80039a8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80039aa:	f7ff fea1 	bl	80036f0 <__retarget_lock_release_recursive>
 80039ae:	e7f3      	b.n	8003998 <_vfiprintf_r+0x44>
 80039b0:	2300      	movs	r3, #0
 80039b2:	9309      	str	r3, [sp, #36]	; 0x24
 80039b4:	2320      	movs	r3, #32
 80039b6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80039ba:	2330      	movs	r3, #48	; 0x30
 80039bc:	f04f 0901 	mov.w	r9, #1
 80039c0:	f8cd 800c 	str.w	r8, [sp, #12]
 80039c4:	f8df 81ac 	ldr.w	r8, [pc, #428]	; 8003b74 <_vfiprintf_r+0x220>
 80039c8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80039cc:	4623      	mov	r3, r4
 80039ce:	469a      	mov	sl, r3
 80039d0:	f813 2b01 	ldrb.w	r2, [r3], #1
 80039d4:	b10a      	cbz	r2, 80039da <_vfiprintf_r+0x86>
 80039d6:	2a25      	cmp	r2, #37	; 0x25
 80039d8:	d1f9      	bne.n	80039ce <_vfiprintf_r+0x7a>
 80039da:	ebba 0b04 	subs.w	fp, sl, r4
 80039de:	d00b      	beq.n	80039f8 <_vfiprintf_r+0xa4>
 80039e0:	465b      	mov	r3, fp
 80039e2:	4622      	mov	r2, r4
 80039e4:	4629      	mov	r1, r5
 80039e6:	4630      	mov	r0, r6
 80039e8:	f7ff ffa1 	bl	800392e <__sfputs_r>
 80039ec:	3001      	adds	r0, #1
 80039ee:	f000 80a9 	beq.w	8003b44 <_vfiprintf_r+0x1f0>
 80039f2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80039f4:	445a      	add	r2, fp
 80039f6:	9209      	str	r2, [sp, #36]	; 0x24
 80039f8:	f89a 3000 	ldrb.w	r3, [sl]
 80039fc:	2b00      	cmp	r3, #0
 80039fe:	f000 80a1 	beq.w	8003b44 <_vfiprintf_r+0x1f0>
 8003a02:	2300      	movs	r3, #0
 8003a04:	f04f 32ff 	mov.w	r2, #4294967295
 8003a08:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003a0c:	f10a 0a01 	add.w	sl, sl, #1
 8003a10:	9304      	str	r3, [sp, #16]
 8003a12:	9307      	str	r3, [sp, #28]
 8003a14:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8003a18:	931a      	str	r3, [sp, #104]	; 0x68
 8003a1a:	4654      	mov	r4, sl
 8003a1c:	2205      	movs	r2, #5
 8003a1e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003a22:	4854      	ldr	r0, [pc, #336]	; (8003b74 <_vfiprintf_r+0x220>)
 8003a24:	f000 fbd8 	bl	80041d8 <memchr>
 8003a28:	9a04      	ldr	r2, [sp, #16]
 8003a2a:	b9d8      	cbnz	r0, 8003a64 <_vfiprintf_r+0x110>
 8003a2c:	06d1      	lsls	r1, r2, #27
 8003a2e:	bf44      	itt	mi
 8003a30:	2320      	movmi	r3, #32
 8003a32:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003a36:	0713      	lsls	r3, r2, #28
 8003a38:	bf44      	itt	mi
 8003a3a:	232b      	movmi	r3, #43	; 0x2b
 8003a3c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003a40:	f89a 3000 	ldrb.w	r3, [sl]
 8003a44:	2b2a      	cmp	r3, #42	; 0x2a
 8003a46:	d015      	beq.n	8003a74 <_vfiprintf_r+0x120>
 8003a48:	4654      	mov	r4, sl
 8003a4a:	2000      	movs	r0, #0
 8003a4c:	f04f 0c0a 	mov.w	ip, #10
 8003a50:	9a07      	ldr	r2, [sp, #28]
 8003a52:	4621      	mov	r1, r4
 8003a54:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003a58:	3b30      	subs	r3, #48	; 0x30
 8003a5a:	2b09      	cmp	r3, #9
 8003a5c:	d94d      	bls.n	8003afa <_vfiprintf_r+0x1a6>
 8003a5e:	b1b0      	cbz	r0, 8003a8e <_vfiprintf_r+0x13a>
 8003a60:	9207      	str	r2, [sp, #28]
 8003a62:	e014      	b.n	8003a8e <_vfiprintf_r+0x13a>
 8003a64:	eba0 0308 	sub.w	r3, r0, r8
 8003a68:	fa09 f303 	lsl.w	r3, r9, r3
 8003a6c:	4313      	orrs	r3, r2
 8003a6e:	46a2      	mov	sl, r4
 8003a70:	9304      	str	r3, [sp, #16]
 8003a72:	e7d2      	b.n	8003a1a <_vfiprintf_r+0xc6>
 8003a74:	9b03      	ldr	r3, [sp, #12]
 8003a76:	1d19      	adds	r1, r3, #4
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	9103      	str	r1, [sp, #12]
 8003a7c:	2b00      	cmp	r3, #0
 8003a7e:	bfbb      	ittet	lt
 8003a80:	425b      	neglt	r3, r3
 8003a82:	f042 0202 	orrlt.w	r2, r2, #2
 8003a86:	9307      	strge	r3, [sp, #28]
 8003a88:	9307      	strlt	r3, [sp, #28]
 8003a8a:	bfb8      	it	lt
 8003a8c:	9204      	strlt	r2, [sp, #16]
 8003a8e:	7823      	ldrb	r3, [r4, #0]
 8003a90:	2b2e      	cmp	r3, #46	; 0x2e
 8003a92:	d10c      	bne.n	8003aae <_vfiprintf_r+0x15a>
 8003a94:	7863      	ldrb	r3, [r4, #1]
 8003a96:	2b2a      	cmp	r3, #42	; 0x2a
 8003a98:	d134      	bne.n	8003b04 <_vfiprintf_r+0x1b0>
 8003a9a:	9b03      	ldr	r3, [sp, #12]
 8003a9c:	3402      	adds	r4, #2
 8003a9e:	1d1a      	adds	r2, r3, #4
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	9203      	str	r2, [sp, #12]
 8003aa4:	2b00      	cmp	r3, #0
 8003aa6:	bfb8      	it	lt
 8003aa8:	f04f 33ff 	movlt.w	r3, #4294967295
 8003aac:	9305      	str	r3, [sp, #20]
 8003aae:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8003b78 <_vfiprintf_r+0x224>
 8003ab2:	2203      	movs	r2, #3
 8003ab4:	4650      	mov	r0, sl
 8003ab6:	7821      	ldrb	r1, [r4, #0]
 8003ab8:	f000 fb8e 	bl	80041d8 <memchr>
 8003abc:	b138      	cbz	r0, 8003ace <_vfiprintf_r+0x17a>
 8003abe:	2240      	movs	r2, #64	; 0x40
 8003ac0:	9b04      	ldr	r3, [sp, #16]
 8003ac2:	eba0 000a 	sub.w	r0, r0, sl
 8003ac6:	4082      	lsls	r2, r0
 8003ac8:	4313      	orrs	r3, r2
 8003aca:	3401      	adds	r4, #1
 8003acc:	9304      	str	r3, [sp, #16]
 8003ace:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003ad2:	2206      	movs	r2, #6
 8003ad4:	4829      	ldr	r0, [pc, #164]	; (8003b7c <_vfiprintf_r+0x228>)
 8003ad6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8003ada:	f000 fb7d 	bl	80041d8 <memchr>
 8003ade:	2800      	cmp	r0, #0
 8003ae0:	d03f      	beq.n	8003b62 <_vfiprintf_r+0x20e>
 8003ae2:	4b27      	ldr	r3, [pc, #156]	; (8003b80 <_vfiprintf_r+0x22c>)
 8003ae4:	bb1b      	cbnz	r3, 8003b2e <_vfiprintf_r+0x1da>
 8003ae6:	9b03      	ldr	r3, [sp, #12]
 8003ae8:	3307      	adds	r3, #7
 8003aea:	f023 0307 	bic.w	r3, r3, #7
 8003aee:	3308      	adds	r3, #8
 8003af0:	9303      	str	r3, [sp, #12]
 8003af2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003af4:	443b      	add	r3, r7
 8003af6:	9309      	str	r3, [sp, #36]	; 0x24
 8003af8:	e768      	b.n	80039cc <_vfiprintf_r+0x78>
 8003afa:	460c      	mov	r4, r1
 8003afc:	2001      	movs	r0, #1
 8003afe:	fb0c 3202 	mla	r2, ip, r2, r3
 8003b02:	e7a6      	b.n	8003a52 <_vfiprintf_r+0xfe>
 8003b04:	2300      	movs	r3, #0
 8003b06:	f04f 0c0a 	mov.w	ip, #10
 8003b0a:	4619      	mov	r1, r3
 8003b0c:	3401      	adds	r4, #1
 8003b0e:	9305      	str	r3, [sp, #20]
 8003b10:	4620      	mov	r0, r4
 8003b12:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003b16:	3a30      	subs	r2, #48	; 0x30
 8003b18:	2a09      	cmp	r2, #9
 8003b1a:	d903      	bls.n	8003b24 <_vfiprintf_r+0x1d0>
 8003b1c:	2b00      	cmp	r3, #0
 8003b1e:	d0c6      	beq.n	8003aae <_vfiprintf_r+0x15a>
 8003b20:	9105      	str	r1, [sp, #20]
 8003b22:	e7c4      	b.n	8003aae <_vfiprintf_r+0x15a>
 8003b24:	4604      	mov	r4, r0
 8003b26:	2301      	movs	r3, #1
 8003b28:	fb0c 2101 	mla	r1, ip, r1, r2
 8003b2c:	e7f0      	b.n	8003b10 <_vfiprintf_r+0x1bc>
 8003b2e:	ab03      	add	r3, sp, #12
 8003b30:	9300      	str	r3, [sp, #0]
 8003b32:	462a      	mov	r2, r5
 8003b34:	4630      	mov	r0, r6
 8003b36:	4b13      	ldr	r3, [pc, #76]	; (8003b84 <_vfiprintf_r+0x230>)
 8003b38:	a904      	add	r1, sp, #16
 8003b3a:	f3af 8000 	nop.w
 8003b3e:	4607      	mov	r7, r0
 8003b40:	1c78      	adds	r0, r7, #1
 8003b42:	d1d6      	bne.n	8003af2 <_vfiprintf_r+0x19e>
 8003b44:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8003b46:	07d9      	lsls	r1, r3, #31
 8003b48:	d405      	bmi.n	8003b56 <_vfiprintf_r+0x202>
 8003b4a:	89ab      	ldrh	r3, [r5, #12]
 8003b4c:	059a      	lsls	r2, r3, #22
 8003b4e:	d402      	bmi.n	8003b56 <_vfiprintf_r+0x202>
 8003b50:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8003b52:	f7ff fdcd 	bl	80036f0 <__retarget_lock_release_recursive>
 8003b56:	89ab      	ldrh	r3, [r5, #12]
 8003b58:	065b      	lsls	r3, r3, #25
 8003b5a:	f53f af1d 	bmi.w	8003998 <_vfiprintf_r+0x44>
 8003b5e:	9809      	ldr	r0, [sp, #36]	; 0x24
 8003b60:	e71c      	b.n	800399c <_vfiprintf_r+0x48>
 8003b62:	ab03      	add	r3, sp, #12
 8003b64:	9300      	str	r3, [sp, #0]
 8003b66:	462a      	mov	r2, r5
 8003b68:	4630      	mov	r0, r6
 8003b6a:	4b06      	ldr	r3, [pc, #24]	; (8003b84 <_vfiprintf_r+0x230>)
 8003b6c:	a904      	add	r1, sp, #16
 8003b6e:	f000 f87d 	bl	8003c6c <_printf_i>
 8003b72:	e7e4      	b.n	8003b3e <_vfiprintf_r+0x1ea>
 8003b74:	080046ca 	.word	0x080046ca
 8003b78:	080046d0 	.word	0x080046d0
 8003b7c:	080046d4 	.word	0x080046d4
 8003b80:	00000000 	.word	0x00000000
 8003b84:	0800392f 	.word	0x0800392f

08003b88 <_printf_common>:
 8003b88:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003b8c:	4616      	mov	r6, r2
 8003b8e:	4699      	mov	r9, r3
 8003b90:	688a      	ldr	r2, [r1, #8]
 8003b92:	690b      	ldr	r3, [r1, #16]
 8003b94:	4607      	mov	r7, r0
 8003b96:	4293      	cmp	r3, r2
 8003b98:	bfb8      	it	lt
 8003b9a:	4613      	movlt	r3, r2
 8003b9c:	6033      	str	r3, [r6, #0]
 8003b9e:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8003ba2:	460c      	mov	r4, r1
 8003ba4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003ba8:	b10a      	cbz	r2, 8003bae <_printf_common+0x26>
 8003baa:	3301      	adds	r3, #1
 8003bac:	6033      	str	r3, [r6, #0]
 8003bae:	6823      	ldr	r3, [r4, #0]
 8003bb0:	0699      	lsls	r1, r3, #26
 8003bb2:	bf42      	ittt	mi
 8003bb4:	6833      	ldrmi	r3, [r6, #0]
 8003bb6:	3302      	addmi	r3, #2
 8003bb8:	6033      	strmi	r3, [r6, #0]
 8003bba:	6825      	ldr	r5, [r4, #0]
 8003bbc:	f015 0506 	ands.w	r5, r5, #6
 8003bc0:	d106      	bne.n	8003bd0 <_printf_common+0x48>
 8003bc2:	f104 0a19 	add.w	sl, r4, #25
 8003bc6:	68e3      	ldr	r3, [r4, #12]
 8003bc8:	6832      	ldr	r2, [r6, #0]
 8003bca:	1a9b      	subs	r3, r3, r2
 8003bcc:	42ab      	cmp	r3, r5
 8003bce:	dc2b      	bgt.n	8003c28 <_printf_common+0xa0>
 8003bd0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8003bd4:	1e13      	subs	r3, r2, #0
 8003bd6:	6822      	ldr	r2, [r4, #0]
 8003bd8:	bf18      	it	ne
 8003bda:	2301      	movne	r3, #1
 8003bdc:	0692      	lsls	r2, r2, #26
 8003bde:	d430      	bmi.n	8003c42 <_printf_common+0xba>
 8003be0:	4649      	mov	r1, r9
 8003be2:	4638      	mov	r0, r7
 8003be4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003be8:	47c0      	blx	r8
 8003bea:	3001      	adds	r0, #1
 8003bec:	d023      	beq.n	8003c36 <_printf_common+0xae>
 8003bee:	6823      	ldr	r3, [r4, #0]
 8003bf0:	6922      	ldr	r2, [r4, #16]
 8003bf2:	f003 0306 	and.w	r3, r3, #6
 8003bf6:	2b04      	cmp	r3, #4
 8003bf8:	bf14      	ite	ne
 8003bfa:	2500      	movne	r5, #0
 8003bfc:	6833      	ldreq	r3, [r6, #0]
 8003bfe:	f04f 0600 	mov.w	r6, #0
 8003c02:	bf08      	it	eq
 8003c04:	68e5      	ldreq	r5, [r4, #12]
 8003c06:	f104 041a 	add.w	r4, r4, #26
 8003c0a:	bf08      	it	eq
 8003c0c:	1aed      	subeq	r5, r5, r3
 8003c0e:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8003c12:	bf08      	it	eq
 8003c14:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003c18:	4293      	cmp	r3, r2
 8003c1a:	bfc4      	itt	gt
 8003c1c:	1a9b      	subgt	r3, r3, r2
 8003c1e:	18ed      	addgt	r5, r5, r3
 8003c20:	42b5      	cmp	r5, r6
 8003c22:	d11a      	bne.n	8003c5a <_printf_common+0xd2>
 8003c24:	2000      	movs	r0, #0
 8003c26:	e008      	b.n	8003c3a <_printf_common+0xb2>
 8003c28:	2301      	movs	r3, #1
 8003c2a:	4652      	mov	r2, sl
 8003c2c:	4649      	mov	r1, r9
 8003c2e:	4638      	mov	r0, r7
 8003c30:	47c0      	blx	r8
 8003c32:	3001      	adds	r0, #1
 8003c34:	d103      	bne.n	8003c3e <_printf_common+0xb6>
 8003c36:	f04f 30ff 	mov.w	r0, #4294967295
 8003c3a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003c3e:	3501      	adds	r5, #1
 8003c40:	e7c1      	b.n	8003bc6 <_printf_common+0x3e>
 8003c42:	2030      	movs	r0, #48	; 0x30
 8003c44:	18e1      	adds	r1, r4, r3
 8003c46:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8003c4a:	1c5a      	adds	r2, r3, #1
 8003c4c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8003c50:	4422      	add	r2, r4
 8003c52:	3302      	adds	r3, #2
 8003c54:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8003c58:	e7c2      	b.n	8003be0 <_printf_common+0x58>
 8003c5a:	2301      	movs	r3, #1
 8003c5c:	4622      	mov	r2, r4
 8003c5e:	4649      	mov	r1, r9
 8003c60:	4638      	mov	r0, r7
 8003c62:	47c0      	blx	r8
 8003c64:	3001      	adds	r0, #1
 8003c66:	d0e6      	beq.n	8003c36 <_printf_common+0xae>
 8003c68:	3601      	adds	r6, #1
 8003c6a:	e7d9      	b.n	8003c20 <_printf_common+0x98>

08003c6c <_printf_i>:
 8003c6c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003c70:	7e0f      	ldrb	r7, [r1, #24]
 8003c72:	4691      	mov	r9, r2
 8003c74:	2f78      	cmp	r7, #120	; 0x78
 8003c76:	4680      	mov	r8, r0
 8003c78:	460c      	mov	r4, r1
 8003c7a:	469a      	mov	sl, r3
 8003c7c:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8003c7e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8003c82:	d807      	bhi.n	8003c94 <_printf_i+0x28>
 8003c84:	2f62      	cmp	r7, #98	; 0x62
 8003c86:	d80a      	bhi.n	8003c9e <_printf_i+0x32>
 8003c88:	2f00      	cmp	r7, #0
 8003c8a:	f000 80d5 	beq.w	8003e38 <_printf_i+0x1cc>
 8003c8e:	2f58      	cmp	r7, #88	; 0x58
 8003c90:	f000 80c1 	beq.w	8003e16 <_printf_i+0x1aa>
 8003c94:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003c98:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8003c9c:	e03a      	b.n	8003d14 <_printf_i+0xa8>
 8003c9e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8003ca2:	2b15      	cmp	r3, #21
 8003ca4:	d8f6      	bhi.n	8003c94 <_printf_i+0x28>
 8003ca6:	a101      	add	r1, pc, #4	; (adr r1, 8003cac <_printf_i+0x40>)
 8003ca8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8003cac:	08003d05 	.word	0x08003d05
 8003cb0:	08003d19 	.word	0x08003d19
 8003cb4:	08003c95 	.word	0x08003c95
 8003cb8:	08003c95 	.word	0x08003c95
 8003cbc:	08003c95 	.word	0x08003c95
 8003cc0:	08003c95 	.word	0x08003c95
 8003cc4:	08003d19 	.word	0x08003d19
 8003cc8:	08003c95 	.word	0x08003c95
 8003ccc:	08003c95 	.word	0x08003c95
 8003cd0:	08003c95 	.word	0x08003c95
 8003cd4:	08003c95 	.word	0x08003c95
 8003cd8:	08003e1f 	.word	0x08003e1f
 8003cdc:	08003d45 	.word	0x08003d45
 8003ce0:	08003dd9 	.word	0x08003dd9
 8003ce4:	08003c95 	.word	0x08003c95
 8003ce8:	08003c95 	.word	0x08003c95
 8003cec:	08003e41 	.word	0x08003e41
 8003cf0:	08003c95 	.word	0x08003c95
 8003cf4:	08003d45 	.word	0x08003d45
 8003cf8:	08003c95 	.word	0x08003c95
 8003cfc:	08003c95 	.word	0x08003c95
 8003d00:	08003de1 	.word	0x08003de1
 8003d04:	682b      	ldr	r3, [r5, #0]
 8003d06:	1d1a      	adds	r2, r3, #4
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	602a      	str	r2, [r5, #0]
 8003d0c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003d10:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003d14:	2301      	movs	r3, #1
 8003d16:	e0a0      	b.n	8003e5a <_printf_i+0x1ee>
 8003d18:	6820      	ldr	r0, [r4, #0]
 8003d1a:	682b      	ldr	r3, [r5, #0]
 8003d1c:	0607      	lsls	r7, r0, #24
 8003d1e:	f103 0104 	add.w	r1, r3, #4
 8003d22:	6029      	str	r1, [r5, #0]
 8003d24:	d501      	bpl.n	8003d2a <_printf_i+0xbe>
 8003d26:	681e      	ldr	r6, [r3, #0]
 8003d28:	e003      	b.n	8003d32 <_printf_i+0xc6>
 8003d2a:	0646      	lsls	r6, r0, #25
 8003d2c:	d5fb      	bpl.n	8003d26 <_printf_i+0xba>
 8003d2e:	f9b3 6000 	ldrsh.w	r6, [r3]
 8003d32:	2e00      	cmp	r6, #0
 8003d34:	da03      	bge.n	8003d3e <_printf_i+0xd2>
 8003d36:	232d      	movs	r3, #45	; 0x2d
 8003d38:	4276      	negs	r6, r6
 8003d3a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003d3e:	230a      	movs	r3, #10
 8003d40:	4859      	ldr	r0, [pc, #356]	; (8003ea8 <_printf_i+0x23c>)
 8003d42:	e012      	b.n	8003d6a <_printf_i+0xfe>
 8003d44:	682b      	ldr	r3, [r5, #0]
 8003d46:	6820      	ldr	r0, [r4, #0]
 8003d48:	1d19      	adds	r1, r3, #4
 8003d4a:	6029      	str	r1, [r5, #0]
 8003d4c:	0605      	lsls	r5, r0, #24
 8003d4e:	d501      	bpl.n	8003d54 <_printf_i+0xe8>
 8003d50:	681e      	ldr	r6, [r3, #0]
 8003d52:	e002      	b.n	8003d5a <_printf_i+0xee>
 8003d54:	0641      	lsls	r1, r0, #25
 8003d56:	d5fb      	bpl.n	8003d50 <_printf_i+0xe4>
 8003d58:	881e      	ldrh	r6, [r3, #0]
 8003d5a:	2f6f      	cmp	r7, #111	; 0x6f
 8003d5c:	bf0c      	ite	eq
 8003d5e:	2308      	moveq	r3, #8
 8003d60:	230a      	movne	r3, #10
 8003d62:	4851      	ldr	r0, [pc, #324]	; (8003ea8 <_printf_i+0x23c>)
 8003d64:	2100      	movs	r1, #0
 8003d66:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8003d6a:	6865      	ldr	r5, [r4, #4]
 8003d6c:	2d00      	cmp	r5, #0
 8003d6e:	bfa8      	it	ge
 8003d70:	6821      	ldrge	r1, [r4, #0]
 8003d72:	60a5      	str	r5, [r4, #8]
 8003d74:	bfa4      	itt	ge
 8003d76:	f021 0104 	bicge.w	r1, r1, #4
 8003d7a:	6021      	strge	r1, [r4, #0]
 8003d7c:	b90e      	cbnz	r6, 8003d82 <_printf_i+0x116>
 8003d7e:	2d00      	cmp	r5, #0
 8003d80:	d04b      	beq.n	8003e1a <_printf_i+0x1ae>
 8003d82:	4615      	mov	r5, r2
 8003d84:	fbb6 f1f3 	udiv	r1, r6, r3
 8003d88:	fb03 6711 	mls	r7, r3, r1, r6
 8003d8c:	5dc7      	ldrb	r7, [r0, r7]
 8003d8e:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8003d92:	4637      	mov	r7, r6
 8003d94:	42bb      	cmp	r3, r7
 8003d96:	460e      	mov	r6, r1
 8003d98:	d9f4      	bls.n	8003d84 <_printf_i+0x118>
 8003d9a:	2b08      	cmp	r3, #8
 8003d9c:	d10b      	bne.n	8003db6 <_printf_i+0x14a>
 8003d9e:	6823      	ldr	r3, [r4, #0]
 8003da0:	07de      	lsls	r6, r3, #31
 8003da2:	d508      	bpl.n	8003db6 <_printf_i+0x14a>
 8003da4:	6923      	ldr	r3, [r4, #16]
 8003da6:	6861      	ldr	r1, [r4, #4]
 8003da8:	4299      	cmp	r1, r3
 8003daa:	bfde      	ittt	le
 8003dac:	2330      	movle	r3, #48	; 0x30
 8003dae:	f805 3c01 	strble.w	r3, [r5, #-1]
 8003db2:	f105 35ff 	addle.w	r5, r5, #4294967295
 8003db6:	1b52      	subs	r2, r2, r5
 8003db8:	6122      	str	r2, [r4, #16]
 8003dba:	464b      	mov	r3, r9
 8003dbc:	4621      	mov	r1, r4
 8003dbe:	4640      	mov	r0, r8
 8003dc0:	f8cd a000 	str.w	sl, [sp]
 8003dc4:	aa03      	add	r2, sp, #12
 8003dc6:	f7ff fedf 	bl	8003b88 <_printf_common>
 8003dca:	3001      	adds	r0, #1
 8003dcc:	d14a      	bne.n	8003e64 <_printf_i+0x1f8>
 8003dce:	f04f 30ff 	mov.w	r0, #4294967295
 8003dd2:	b004      	add	sp, #16
 8003dd4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003dd8:	6823      	ldr	r3, [r4, #0]
 8003dda:	f043 0320 	orr.w	r3, r3, #32
 8003dde:	6023      	str	r3, [r4, #0]
 8003de0:	2778      	movs	r7, #120	; 0x78
 8003de2:	4832      	ldr	r0, [pc, #200]	; (8003eac <_printf_i+0x240>)
 8003de4:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8003de8:	6823      	ldr	r3, [r4, #0]
 8003dea:	6829      	ldr	r1, [r5, #0]
 8003dec:	061f      	lsls	r7, r3, #24
 8003dee:	f851 6b04 	ldr.w	r6, [r1], #4
 8003df2:	d402      	bmi.n	8003dfa <_printf_i+0x18e>
 8003df4:	065f      	lsls	r7, r3, #25
 8003df6:	bf48      	it	mi
 8003df8:	b2b6      	uxthmi	r6, r6
 8003dfa:	07df      	lsls	r7, r3, #31
 8003dfc:	bf48      	it	mi
 8003dfe:	f043 0320 	orrmi.w	r3, r3, #32
 8003e02:	6029      	str	r1, [r5, #0]
 8003e04:	bf48      	it	mi
 8003e06:	6023      	strmi	r3, [r4, #0]
 8003e08:	b91e      	cbnz	r6, 8003e12 <_printf_i+0x1a6>
 8003e0a:	6823      	ldr	r3, [r4, #0]
 8003e0c:	f023 0320 	bic.w	r3, r3, #32
 8003e10:	6023      	str	r3, [r4, #0]
 8003e12:	2310      	movs	r3, #16
 8003e14:	e7a6      	b.n	8003d64 <_printf_i+0xf8>
 8003e16:	4824      	ldr	r0, [pc, #144]	; (8003ea8 <_printf_i+0x23c>)
 8003e18:	e7e4      	b.n	8003de4 <_printf_i+0x178>
 8003e1a:	4615      	mov	r5, r2
 8003e1c:	e7bd      	b.n	8003d9a <_printf_i+0x12e>
 8003e1e:	682b      	ldr	r3, [r5, #0]
 8003e20:	6826      	ldr	r6, [r4, #0]
 8003e22:	1d18      	adds	r0, r3, #4
 8003e24:	6961      	ldr	r1, [r4, #20]
 8003e26:	6028      	str	r0, [r5, #0]
 8003e28:	0635      	lsls	r5, r6, #24
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	d501      	bpl.n	8003e32 <_printf_i+0x1c6>
 8003e2e:	6019      	str	r1, [r3, #0]
 8003e30:	e002      	b.n	8003e38 <_printf_i+0x1cc>
 8003e32:	0670      	lsls	r0, r6, #25
 8003e34:	d5fb      	bpl.n	8003e2e <_printf_i+0x1c2>
 8003e36:	8019      	strh	r1, [r3, #0]
 8003e38:	2300      	movs	r3, #0
 8003e3a:	4615      	mov	r5, r2
 8003e3c:	6123      	str	r3, [r4, #16]
 8003e3e:	e7bc      	b.n	8003dba <_printf_i+0x14e>
 8003e40:	682b      	ldr	r3, [r5, #0]
 8003e42:	2100      	movs	r1, #0
 8003e44:	1d1a      	adds	r2, r3, #4
 8003e46:	602a      	str	r2, [r5, #0]
 8003e48:	681d      	ldr	r5, [r3, #0]
 8003e4a:	6862      	ldr	r2, [r4, #4]
 8003e4c:	4628      	mov	r0, r5
 8003e4e:	f000 f9c3 	bl	80041d8 <memchr>
 8003e52:	b108      	cbz	r0, 8003e58 <_printf_i+0x1ec>
 8003e54:	1b40      	subs	r0, r0, r5
 8003e56:	6060      	str	r0, [r4, #4]
 8003e58:	6863      	ldr	r3, [r4, #4]
 8003e5a:	6123      	str	r3, [r4, #16]
 8003e5c:	2300      	movs	r3, #0
 8003e5e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003e62:	e7aa      	b.n	8003dba <_printf_i+0x14e>
 8003e64:	462a      	mov	r2, r5
 8003e66:	4649      	mov	r1, r9
 8003e68:	4640      	mov	r0, r8
 8003e6a:	6923      	ldr	r3, [r4, #16]
 8003e6c:	47d0      	blx	sl
 8003e6e:	3001      	adds	r0, #1
 8003e70:	d0ad      	beq.n	8003dce <_printf_i+0x162>
 8003e72:	6823      	ldr	r3, [r4, #0]
 8003e74:	079b      	lsls	r3, r3, #30
 8003e76:	d413      	bmi.n	8003ea0 <_printf_i+0x234>
 8003e78:	68e0      	ldr	r0, [r4, #12]
 8003e7a:	9b03      	ldr	r3, [sp, #12]
 8003e7c:	4298      	cmp	r0, r3
 8003e7e:	bfb8      	it	lt
 8003e80:	4618      	movlt	r0, r3
 8003e82:	e7a6      	b.n	8003dd2 <_printf_i+0x166>
 8003e84:	2301      	movs	r3, #1
 8003e86:	4632      	mov	r2, r6
 8003e88:	4649      	mov	r1, r9
 8003e8a:	4640      	mov	r0, r8
 8003e8c:	47d0      	blx	sl
 8003e8e:	3001      	adds	r0, #1
 8003e90:	d09d      	beq.n	8003dce <_printf_i+0x162>
 8003e92:	3501      	adds	r5, #1
 8003e94:	68e3      	ldr	r3, [r4, #12]
 8003e96:	9903      	ldr	r1, [sp, #12]
 8003e98:	1a5b      	subs	r3, r3, r1
 8003e9a:	42ab      	cmp	r3, r5
 8003e9c:	dcf2      	bgt.n	8003e84 <_printf_i+0x218>
 8003e9e:	e7eb      	b.n	8003e78 <_printf_i+0x20c>
 8003ea0:	2500      	movs	r5, #0
 8003ea2:	f104 0619 	add.w	r6, r4, #25
 8003ea6:	e7f5      	b.n	8003e94 <_printf_i+0x228>
 8003ea8:	080046db 	.word	0x080046db
 8003eac:	080046ec 	.word	0x080046ec

08003eb0 <__sflush_r>:
 8003eb0:	898a      	ldrh	r2, [r1, #12]
 8003eb2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003eb4:	4605      	mov	r5, r0
 8003eb6:	0710      	lsls	r0, r2, #28
 8003eb8:	460c      	mov	r4, r1
 8003eba:	d457      	bmi.n	8003f6c <__sflush_r+0xbc>
 8003ebc:	684b      	ldr	r3, [r1, #4]
 8003ebe:	2b00      	cmp	r3, #0
 8003ec0:	dc04      	bgt.n	8003ecc <__sflush_r+0x1c>
 8003ec2:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8003ec4:	2b00      	cmp	r3, #0
 8003ec6:	dc01      	bgt.n	8003ecc <__sflush_r+0x1c>
 8003ec8:	2000      	movs	r0, #0
 8003eca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003ecc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8003ece:	2e00      	cmp	r6, #0
 8003ed0:	d0fa      	beq.n	8003ec8 <__sflush_r+0x18>
 8003ed2:	2300      	movs	r3, #0
 8003ed4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8003ed8:	682f      	ldr	r7, [r5, #0]
 8003eda:	6a21      	ldr	r1, [r4, #32]
 8003edc:	602b      	str	r3, [r5, #0]
 8003ede:	d032      	beq.n	8003f46 <__sflush_r+0x96>
 8003ee0:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8003ee2:	89a3      	ldrh	r3, [r4, #12]
 8003ee4:	075a      	lsls	r2, r3, #29
 8003ee6:	d505      	bpl.n	8003ef4 <__sflush_r+0x44>
 8003ee8:	6863      	ldr	r3, [r4, #4]
 8003eea:	1ac0      	subs	r0, r0, r3
 8003eec:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8003eee:	b10b      	cbz	r3, 8003ef4 <__sflush_r+0x44>
 8003ef0:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8003ef2:	1ac0      	subs	r0, r0, r3
 8003ef4:	2300      	movs	r3, #0
 8003ef6:	4602      	mov	r2, r0
 8003ef8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8003efa:	4628      	mov	r0, r5
 8003efc:	6a21      	ldr	r1, [r4, #32]
 8003efe:	47b0      	blx	r6
 8003f00:	1c43      	adds	r3, r0, #1
 8003f02:	89a3      	ldrh	r3, [r4, #12]
 8003f04:	d106      	bne.n	8003f14 <__sflush_r+0x64>
 8003f06:	6829      	ldr	r1, [r5, #0]
 8003f08:	291d      	cmp	r1, #29
 8003f0a:	d82b      	bhi.n	8003f64 <__sflush_r+0xb4>
 8003f0c:	4a28      	ldr	r2, [pc, #160]	; (8003fb0 <__sflush_r+0x100>)
 8003f0e:	410a      	asrs	r2, r1
 8003f10:	07d6      	lsls	r6, r2, #31
 8003f12:	d427      	bmi.n	8003f64 <__sflush_r+0xb4>
 8003f14:	2200      	movs	r2, #0
 8003f16:	6062      	str	r2, [r4, #4]
 8003f18:	6922      	ldr	r2, [r4, #16]
 8003f1a:	04d9      	lsls	r1, r3, #19
 8003f1c:	6022      	str	r2, [r4, #0]
 8003f1e:	d504      	bpl.n	8003f2a <__sflush_r+0x7a>
 8003f20:	1c42      	adds	r2, r0, #1
 8003f22:	d101      	bne.n	8003f28 <__sflush_r+0x78>
 8003f24:	682b      	ldr	r3, [r5, #0]
 8003f26:	b903      	cbnz	r3, 8003f2a <__sflush_r+0x7a>
 8003f28:	6560      	str	r0, [r4, #84]	; 0x54
 8003f2a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003f2c:	602f      	str	r7, [r5, #0]
 8003f2e:	2900      	cmp	r1, #0
 8003f30:	d0ca      	beq.n	8003ec8 <__sflush_r+0x18>
 8003f32:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8003f36:	4299      	cmp	r1, r3
 8003f38:	d002      	beq.n	8003f40 <__sflush_r+0x90>
 8003f3a:	4628      	mov	r0, r5
 8003f3c:	f7ff fbee 	bl	800371c <_free_r>
 8003f40:	2000      	movs	r0, #0
 8003f42:	6360      	str	r0, [r4, #52]	; 0x34
 8003f44:	e7c1      	b.n	8003eca <__sflush_r+0x1a>
 8003f46:	2301      	movs	r3, #1
 8003f48:	4628      	mov	r0, r5
 8003f4a:	47b0      	blx	r6
 8003f4c:	1c41      	adds	r1, r0, #1
 8003f4e:	d1c8      	bne.n	8003ee2 <__sflush_r+0x32>
 8003f50:	682b      	ldr	r3, [r5, #0]
 8003f52:	2b00      	cmp	r3, #0
 8003f54:	d0c5      	beq.n	8003ee2 <__sflush_r+0x32>
 8003f56:	2b1d      	cmp	r3, #29
 8003f58:	d001      	beq.n	8003f5e <__sflush_r+0xae>
 8003f5a:	2b16      	cmp	r3, #22
 8003f5c:	d101      	bne.n	8003f62 <__sflush_r+0xb2>
 8003f5e:	602f      	str	r7, [r5, #0]
 8003f60:	e7b2      	b.n	8003ec8 <__sflush_r+0x18>
 8003f62:	89a3      	ldrh	r3, [r4, #12]
 8003f64:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003f68:	81a3      	strh	r3, [r4, #12]
 8003f6a:	e7ae      	b.n	8003eca <__sflush_r+0x1a>
 8003f6c:	690f      	ldr	r7, [r1, #16]
 8003f6e:	2f00      	cmp	r7, #0
 8003f70:	d0aa      	beq.n	8003ec8 <__sflush_r+0x18>
 8003f72:	0793      	lsls	r3, r2, #30
 8003f74:	bf18      	it	ne
 8003f76:	2300      	movne	r3, #0
 8003f78:	680e      	ldr	r6, [r1, #0]
 8003f7a:	bf08      	it	eq
 8003f7c:	694b      	ldreq	r3, [r1, #20]
 8003f7e:	1bf6      	subs	r6, r6, r7
 8003f80:	600f      	str	r7, [r1, #0]
 8003f82:	608b      	str	r3, [r1, #8]
 8003f84:	2e00      	cmp	r6, #0
 8003f86:	dd9f      	ble.n	8003ec8 <__sflush_r+0x18>
 8003f88:	4633      	mov	r3, r6
 8003f8a:	463a      	mov	r2, r7
 8003f8c:	4628      	mov	r0, r5
 8003f8e:	6a21      	ldr	r1, [r4, #32]
 8003f90:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 8003f94:	47e0      	blx	ip
 8003f96:	2800      	cmp	r0, #0
 8003f98:	dc06      	bgt.n	8003fa8 <__sflush_r+0xf8>
 8003f9a:	89a3      	ldrh	r3, [r4, #12]
 8003f9c:	f04f 30ff 	mov.w	r0, #4294967295
 8003fa0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003fa4:	81a3      	strh	r3, [r4, #12]
 8003fa6:	e790      	b.n	8003eca <__sflush_r+0x1a>
 8003fa8:	4407      	add	r7, r0
 8003faa:	1a36      	subs	r6, r6, r0
 8003fac:	e7ea      	b.n	8003f84 <__sflush_r+0xd4>
 8003fae:	bf00      	nop
 8003fb0:	dfbffffe 	.word	0xdfbffffe

08003fb4 <_fflush_r>:
 8003fb4:	b538      	push	{r3, r4, r5, lr}
 8003fb6:	690b      	ldr	r3, [r1, #16]
 8003fb8:	4605      	mov	r5, r0
 8003fba:	460c      	mov	r4, r1
 8003fbc:	b913      	cbnz	r3, 8003fc4 <_fflush_r+0x10>
 8003fbe:	2500      	movs	r5, #0
 8003fc0:	4628      	mov	r0, r5
 8003fc2:	bd38      	pop	{r3, r4, r5, pc}
 8003fc4:	b118      	cbz	r0, 8003fce <_fflush_r+0x1a>
 8003fc6:	6a03      	ldr	r3, [r0, #32]
 8003fc8:	b90b      	cbnz	r3, 8003fce <_fflush_r+0x1a>
 8003fca:	f7ff fa8b 	bl	80034e4 <__sinit>
 8003fce:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003fd2:	2b00      	cmp	r3, #0
 8003fd4:	d0f3      	beq.n	8003fbe <_fflush_r+0xa>
 8003fd6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8003fd8:	07d0      	lsls	r0, r2, #31
 8003fda:	d404      	bmi.n	8003fe6 <_fflush_r+0x32>
 8003fdc:	0599      	lsls	r1, r3, #22
 8003fde:	d402      	bmi.n	8003fe6 <_fflush_r+0x32>
 8003fe0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003fe2:	f7ff fb84 	bl	80036ee <__retarget_lock_acquire_recursive>
 8003fe6:	4628      	mov	r0, r5
 8003fe8:	4621      	mov	r1, r4
 8003fea:	f7ff ff61 	bl	8003eb0 <__sflush_r>
 8003fee:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8003ff0:	4605      	mov	r5, r0
 8003ff2:	07da      	lsls	r2, r3, #31
 8003ff4:	d4e4      	bmi.n	8003fc0 <_fflush_r+0xc>
 8003ff6:	89a3      	ldrh	r3, [r4, #12]
 8003ff8:	059b      	lsls	r3, r3, #22
 8003ffa:	d4e1      	bmi.n	8003fc0 <_fflush_r+0xc>
 8003ffc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003ffe:	f7ff fb77 	bl	80036f0 <__retarget_lock_release_recursive>
 8004002:	e7dd      	b.n	8003fc0 <_fflush_r+0xc>

08004004 <__swbuf_r>:
 8004004:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004006:	460e      	mov	r6, r1
 8004008:	4614      	mov	r4, r2
 800400a:	4605      	mov	r5, r0
 800400c:	b118      	cbz	r0, 8004016 <__swbuf_r+0x12>
 800400e:	6a03      	ldr	r3, [r0, #32]
 8004010:	b90b      	cbnz	r3, 8004016 <__swbuf_r+0x12>
 8004012:	f7ff fa67 	bl	80034e4 <__sinit>
 8004016:	69a3      	ldr	r3, [r4, #24]
 8004018:	60a3      	str	r3, [r4, #8]
 800401a:	89a3      	ldrh	r3, [r4, #12]
 800401c:	071a      	lsls	r2, r3, #28
 800401e:	d525      	bpl.n	800406c <__swbuf_r+0x68>
 8004020:	6923      	ldr	r3, [r4, #16]
 8004022:	b31b      	cbz	r3, 800406c <__swbuf_r+0x68>
 8004024:	6823      	ldr	r3, [r4, #0]
 8004026:	6922      	ldr	r2, [r4, #16]
 8004028:	b2f6      	uxtb	r6, r6
 800402a:	1a98      	subs	r0, r3, r2
 800402c:	6963      	ldr	r3, [r4, #20]
 800402e:	4637      	mov	r7, r6
 8004030:	4283      	cmp	r3, r0
 8004032:	dc04      	bgt.n	800403e <__swbuf_r+0x3a>
 8004034:	4621      	mov	r1, r4
 8004036:	4628      	mov	r0, r5
 8004038:	f7ff ffbc 	bl	8003fb4 <_fflush_r>
 800403c:	b9e0      	cbnz	r0, 8004078 <__swbuf_r+0x74>
 800403e:	68a3      	ldr	r3, [r4, #8]
 8004040:	3b01      	subs	r3, #1
 8004042:	60a3      	str	r3, [r4, #8]
 8004044:	6823      	ldr	r3, [r4, #0]
 8004046:	1c5a      	adds	r2, r3, #1
 8004048:	6022      	str	r2, [r4, #0]
 800404a:	701e      	strb	r6, [r3, #0]
 800404c:	6962      	ldr	r2, [r4, #20]
 800404e:	1c43      	adds	r3, r0, #1
 8004050:	429a      	cmp	r2, r3
 8004052:	d004      	beq.n	800405e <__swbuf_r+0x5a>
 8004054:	89a3      	ldrh	r3, [r4, #12]
 8004056:	07db      	lsls	r3, r3, #31
 8004058:	d506      	bpl.n	8004068 <__swbuf_r+0x64>
 800405a:	2e0a      	cmp	r6, #10
 800405c:	d104      	bne.n	8004068 <__swbuf_r+0x64>
 800405e:	4621      	mov	r1, r4
 8004060:	4628      	mov	r0, r5
 8004062:	f7ff ffa7 	bl	8003fb4 <_fflush_r>
 8004066:	b938      	cbnz	r0, 8004078 <__swbuf_r+0x74>
 8004068:	4638      	mov	r0, r7
 800406a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800406c:	4621      	mov	r1, r4
 800406e:	4628      	mov	r0, r5
 8004070:	f000 f806 	bl	8004080 <__swsetup_r>
 8004074:	2800      	cmp	r0, #0
 8004076:	d0d5      	beq.n	8004024 <__swbuf_r+0x20>
 8004078:	f04f 37ff 	mov.w	r7, #4294967295
 800407c:	e7f4      	b.n	8004068 <__swbuf_r+0x64>
	...

08004080 <__swsetup_r>:
 8004080:	b538      	push	{r3, r4, r5, lr}
 8004082:	4b2a      	ldr	r3, [pc, #168]	; (800412c <__swsetup_r+0xac>)
 8004084:	4605      	mov	r5, r0
 8004086:	6818      	ldr	r0, [r3, #0]
 8004088:	460c      	mov	r4, r1
 800408a:	b118      	cbz	r0, 8004094 <__swsetup_r+0x14>
 800408c:	6a03      	ldr	r3, [r0, #32]
 800408e:	b90b      	cbnz	r3, 8004094 <__swsetup_r+0x14>
 8004090:	f7ff fa28 	bl	80034e4 <__sinit>
 8004094:	89a3      	ldrh	r3, [r4, #12]
 8004096:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800409a:	0718      	lsls	r0, r3, #28
 800409c:	d422      	bmi.n	80040e4 <__swsetup_r+0x64>
 800409e:	06d9      	lsls	r1, r3, #27
 80040a0:	d407      	bmi.n	80040b2 <__swsetup_r+0x32>
 80040a2:	2309      	movs	r3, #9
 80040a4:	602b      	str	r3, [r5, #0]
 80040a6:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80040aa:	f04f 30ff 	mov.w	r0, #4294967295
 80040ae:	81a3      	strh	r3, [r4, #12]
 80040b0:	e034      	b.n	800411c <__swsetup_r+0x9c>
 80040b2:	0758      	lsls	r0, r3, #29
 80040b4:	d512      	bpl.n	80040dc <__swsetup_r+0x5c>
 80040b6:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80040b8:	b141      	cbz	r1, 80040cc <__swsetup_r+0x4c>
 80040ba:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80040be:	4299      	cmp	r1, r3
 80040c0:	d002      	beq.n	80040c8 <__swsetup_r+0x48>
 80040c2:	4628      	mov	r0, r5
 80040c4:	f7ff fb2a 	bl	800371c <_free_r>
 80040c8:	2300      	movs	r3, #0
 80040ca:	6363      	str	r3, [r4, #52]	; 0x34
 80040cc:	89a3      	ldrh	r3, [r4, #12]
 80040ce:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80040d2:	81a3      	strh	r3, [r4, #12]
 80040d4:	2300      	movs	r3, #0
 80040d6:	6063      	str	r3, [r4, #4]
 80040d8:	6923      	ldr	r3, [r4, #16]
 80040da:	6023      	str	r3, [r4, #0]
 80040dc:	89a3      	ldrh	r3, [r4, #12]
 80040de:	f043 0308 	orr.w	r3, r3, #8
 80040e2:	81a3      	strh	r3, [r4, #12]
 80040e4:	6923      	ldr	r3, [r4, #16]
 80040e6:	b94b      	cbnz	r3, 80040fc <__swsetup_r+0x7c>
 80040e8:	89a3      	ldrh	r3, [r4, #12]
 80040ea:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80040ee:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80040f2:	d003      	beq.n	80040fc <__swsetup_r+0x7c>
 80040f4:	4621      	mov	r1, r4
 80040f6:	4628      	mov	r0, r5
 80040f8:	f000 f8a1 	bl	800423e <__smakebuf_r>
 80040fc:	89a0      	ldrh	r0, [r4, #12]
 80040fe:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8004102:	f010 0301 	ands.w	r3, r0, #1
 8004106:	d00a      	beq.n	800411e <__swsetup_r+0x9e>
 8004108:	2300      	movs	r3, #0
 800410a:	60a3      	str	r3, [r4, #8]
 800410c:	6963      	ldr	r3, [r4, #20]
 800410e:	425b      	negs	r3, r3
 8004110:	61a3      	str	r3, [r4, #24]
 8004112:	6923      	ldr	r3, [r4, #16]
 8004114:	b943      	cbnz	r3, 8004128 <__swsetup_r+0xa8>
 8004116:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800411a:	d1c4      	bne.n	80040a6 <__swsetup_r+0x26>
 800411c:	bd38      	pop	{r3, r4, r5, pc}
 800411e:	0781      	lsls	r1, r0, #30
 8004120:	bf58      	it	pl
 8004122:	6963      	ldrpl	r3, [r4, #20]
 8004124:	60a3      	str	r3, [r4, #8]
 8004126:	e7f4      	b.n	8004112 <__swsetup_r+0x92>
 8004128:	2000      	movs	r0, #0
 800412a:	e7f7      	b.n	800411c <__swsetup_r+0x9c>
 800412c:	200000e8 	.word	0x200000e8

08004130 <_raise_r>:
 8004130:	291f      	cmp	r1, #31
 8004132:	b538      	push	{r3, r4, r5, lr}
 8004134:	4604      	mov	r4, r0
 8004136:	460d      	mov	r5, r1
 8004138:	d904      	bls.n	8004144 <_raise_r+0x14>
 800413a:	2316      	movs	r3, #22
 800413c:	6003      	str	r3, [r0, #0]
 800413e:	f04f 30ff 	mov.w	r0, #4294967295
 8004142:	bd38      	pop	{r3, r4, r5, pc}
 8004144:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 8004146:	b112      	cbz	r2, 800414e <_raise_r+0x1e>
 8004148:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800414c:	b94b      	cbnz	r3, 8004162 <_raise_r+0x32>
 800414e:	4620      	mov	r0, r4
 8004150:	f000 f830 	bl	80041b4 <_getpid_r>
 8004154:	462a      	mov	r2, r5
 8004156:	4601      	mov	r1, r0
 8004158:	4620      	mov	r0, r4
 800415a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800415e:	f000 b817 	b.w	8004190 <_kill_r>
 8004162:	2b01      	cmp	r3, #1
 8004164:	d00a      	beq.n	800417c <_raise_r+0x4c>
 8004166:	1c59      	adds	r1, r3, #1
 8004168:	d103      	bne.n	8004172 <_raise_r+0x42>
 800416a:	2316      	movs	r3, #22
 800416c:	6003      	str	r3, [r0, #0]
 800416e:	2001      	movs	r0, #1
 8004170:	e7e7      	b.n	8004142 <_raise_r+0x12>
 8004172:	2400      	movs	r4, #0
 8004174:	4628      	mov	r0, r5
 8004176:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800417a:	4798      	blx	r3
 800417c:	2000      	movs	r0, #0
 800417e:	e7e0      	b.n	8004142 <_raise_r+0x12>

08004180 <raise>:
 8004180:	4b02      	ldr	r3, [pc, #8]	; (800418c <raise+0xc>)
 8004182:	4601      	mov	r1, r0
 8004184:	6818      	ldr	r0, [r3, #0]
 8004186:	f7ff bfd3 	b.w	8004130 <_raise_r>
 800418a:	bf00      	nop
 800418c:	200000e8 	.word	0x200000e8

08004190 <_kill_r>:
 8004190:	b538      	push	{r3, r4, r5, lr}
 8004192:	2300      	movs	r3, #0
 8004194:	4d06      	ldr	r5, [pc, #24]	; (80041b0 <_kill_r+0x20>)
 8004196:	4604      	mov	r4, r0
 8004198:	4608      	mov	r0, r1
 800419a:	4611      	mov	r1, r2
 800419c:	602b      	str	r3, [r5, #0]
 800419e:	f7fc fa8f 	bl	80006c0 <_kill>
 80041a2:	1c43      	adds	r3, r0, #1
 80041a4:	d102      	bne.n	80041ac <_kill_r+0x1c>
 80041a6:	682b      	ldr	r3, [r5, #0]
 80041a8:	b103      	cbz	r3, 80041ac <_kill_r+0x1c>
 80041aa:	6023      	str	r3, [r4, #0]
 80041ac:	bd38      	pop	{r3, r4, r5, pc}
 80041ae:	bf00      	nop
 80041b0:	20000460 	.word	0x20000460

080041b4 <_getpid_r>:
 80041b4:	f7fc ba7d 	b.w	80006b2 <_getpid>

080041b8 <_sbrk_r>:
 80041b8:	b538      	push	{r3, r4, r5, lr}
 80041ba:	2300      	movs	r3, #0
 80041bc:	4d05      	ldr	r5, [pc, #20]	; (80041d4 <_sbrk_r+0x1c>)
 80041be:	4604      	mov	r4, r0
 80041c0:	4608      	mov	r0, r1
 80041c2:	602b      	str	r3, [r5, #0]
 80041c4:	f7fc fb00 	bl	80007c8 <_sbrk>
 80041c8:	1c43      	adds	r3, r0, #1
 80041ca:	d102      	bne.n	80041d2 <_sbrk_r+0x1a>
 80041cc:	682b      	ldr	r3, [r5, #0]
 80041ce:	b103      	cbz	r3, 80041d2 <_sbrk_r+0x1a>
 80041d0:	6023      	str	r3, [r4, #0]
 80041d2:	bd38      	pop	{r3, r4, r5, pc}
 80041d4:	20000460 	.word	0x20000460

080041d8 <memchr>:
 80041d8:	4603      	mov	r3, r0
 80041da:	b510      	push	{r4, lr}
 80041dc:	b2c9      	uxtb	r1, r1
 80041de:	4402      	add	r2, r0
 80041e0:	4293      	cmp	r3, r2
 80041e2:	4618      	mov	r0, r3
 80041e4:	d101      	bne.n	80041ea <memchr+0x12>
 80041e6:	2000      	movs	r0, #0
 80041e8:	e003      	b.n	80041f2 <memchr+0x1a>
 80041ea:	7804      	ldrb	r4, [r0, #0]
 80041ec:	3301      	adds	r3, #1
 80041ee:	428c      	cmp	r4, r1
 80041f0:	d1f6      	bne.n	80041e0 <memchr+0x8>
 80041f2:	bd10      	pop	{r4, pc}

080041f4 <__swhatbuf_r>:
 80041f4:	b570      	push	{r4, r5, r6, lr}
 80041f6:	460c      	mov	r4, r1
 80041f8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80041fc:	4615      	mov	r5, r2
 80041fe:	2900      	cmp	r1, #0
 8004200:	461e      	mov	r6, r3
 8004202:	b096      	sub	sp, #88	; 0x58
 8004204:	da0c      	bge.n	8004220 <__swhatbuf_r+0x2c>
 8004206:	89a3      	ldrh	r3, [r4, #12]
 8004208:	2100      	movs	r1, #0
 800420a:	f013 0f80 	tst.w	r3, #128	; 0x80
 800420e:	bf0c      	ite	eq
 8004210:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8004214:	2340      	movne	r3, #64	; 0x40
 8004216:	2000      	movs	r0, #0
 8004218:	6031      	str	r1, [r6, #0]
 800421a:	602b      	str	r3, [r5, #0]
 800421c:	b016      	add	sp, #88	; 0x58
 800421e:	bd70      	pop	{r4, r5, r6, pc}
 8004220:	466a      	mov	r2, sp
 8004222:	f000 f849 	bl	80042b8 <_fstat_r>
 8004226:	2800      	cmp	r0, #0
 8004228:	dbed      	blt.n	8004206 <__swhatbuf_r+0x12>
 800422a:	9901      	ldr	r1, [sp, #4]
 800422c:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8004230:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8004234:	4259      	negs	r1, r3
 8004236:	4159      	adcs	r1, r3
 8004238:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800423c:	e7eb      	b.n	8004216 <__swhatbuf_r+0x22>

0800423e <__smakebuf_r>:
 800423e:	898b      	ldrh	r3, [r1, #12]
 8004240:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8004242:	079d      	lsls	r5, r3, #30
 8004244:	4606      	mov	r6, r0
 8004246:	460c      	mov	r4, r1
 8004248:	d507      	bpl.n	800425a <__smakebuf_r+0x1c>
 800424a:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800424e:	6023      	str	r3, [r4, #0]
 8004250:	6123      	str	r3, [r4, #16]
 8004252:	2301      	movs	r3, #1
 8004254:	6163      	str	r3, [r4, #20]
 8004256:	b002      	add	sp, #8
 8004258:	bd70      	pop	{r4, r5, r6, pc}
 800425a:	466a      	mov	r2, sp
 800425c:	ab01      	add	r3, sp, #4
 800425e:	f7ff ffc9 	bl	80041f4 <__swhatbuf_r>
 8004262:	9900      	ldr	r1, [sp, #0]
 8004264:	4605      	mov	r5, r0
 8004266:	4630      	mov	r0, r6
 8004268:	f7ff fac0 	bl	80037ec <_malloc_r>
 800426c:	b948      	cbnz	r0, 8004282 <__smakebuf_r+0x44>
 800426e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004272:	059a      	lsls	r2, r3, #22
 8004274:	d4ef      	bmi.n	8004256 <__smakebuf_r+0x18>
 8004276:	f023 0303 	bic.w	r3, r3, #3
 800427a:	f043 0302 	orr.w	r3, r3, #2
 800427e:	81a3      	strh	r3, [r4, #12]
 8004280:	e7e3      	b.n	800424a <__smakebuf_r+0xc>
 8004282:	89a3      	ldrh	r3, [r4, #12]
 8004284:	6020      	str	r0, [r4, #0]
 8004286:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800428a:	81a3      	strh	r3, [r4, #12]
 800428c:	9b00      	ldr	r3, [sp, #0]
 800428e:	6120      	str	r0, [r4, #16]
 8004290:	6163      	str	r3, [r4, #20]
 8004292:	9b01      	ldr	r3, [sp, #4]
 8004294:	b15b      	cbz	r3, 80042ae <__smakebuf_r+0x70>
 8004296:	4630      	mov	r0, r6
 8004298:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800429c:	f000 f81e 	bl	80042dc <_isatty_r>
 80042a0:	b128      	cbz	r0, 80042ae <__smakebuf_r+0x70>
 80042a2:	89a3      	ldrh	r3, [r4, #12]
 80042a4:	f023 0303 	bic.w	r3, r3, #3
 80042a8:	f043 0301 	orr.w	r3, r3, #1
 80042ac:	81a3      	strh	r3, [r4, #12]
 80042ae:	89a3      	ldrh	r3, [r4, #12]
 80042b0:	431d      	orrs	r5, r3
 80042b2:	81a5      	strh	r5, [r4, #12]
 80042b4:	e7cf      	b.n	8004256 <__smakebuf_r+0x18>
	...

080042b8 <_fstat_r>:
 80042b8:	b538      	push	{r3, r4, r5, lr}
 80042ba:	2300      	movs	r3, #0
 80042bc:	4d06      	ldr	r5, [pc, #24]	; (80042d8 <_fstat_r+0x20>)
 80042be:	4604      	mov	r4, r0
 80042c0:	4608      	mov	r0, r1
 80042c2:	4611      	mov	r1, r2
 80042c4:	602b      	str	r3, [r5, #0]
 80042c6:	f7fc fa59 	bl	800077c <_fstat>
 80042ca:	1c43      	adds	r3, r0, #1
 80042cc:	d102      	bne.n	80042d4 <_fstat_r+0x1c>
 80042ce:	682b      	ldr	r3, [r5, #0]
 80042d0:	b103      	cbz	r3, 80042d4 <_fstat_r+0x1c>
 80042d2:	6023      	str	r3, [r4, #0]
 80042d4:	bd38      	pop	{r3, r4, r5, pc}
 80042d6:	bf00      	nop
 80042d8:	20000460 	.word	0x20000460

080042dc <_isatty_r>:
 80042dc:	b538      	push	{r3, r4, r5, lr}
 80042de:	2300      	movs	r3, #0
 80042e0:	4d05      	ldr	r5, [pc, #20]	; (80042f8 <_isatty_r+0x1c>)
 80042e2:	4604      	mov	r4, r0
 80042e4:	4608      	mov	r0, r1
 80042e6:	602b      	str	r3, [r5, #0]
 80042e8:	f7fc fa57 	bl	800079a <_isatty>
 80042ec:	1c43      	adds	r3, r0, #1
 80042ee:	d102      	bne.n	80042f6 <_isatty_r+0x1a>
 80042f0:	682b      	ldr	r3, [r5, #0]
 80042f2:	b103      	cbz	r3, 80042f6 <_isatty_r+0x1a>
 80042f4:	6023      	str	r3, [r4, #0]
 80042f6:	bd38      	pop	{r3, r4, r5, pc}
 80042f8:	20000460 	.word	0x20000460

080042fc <_init>:
 80042fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80042fe:	bf00      	nop
 8004300:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004302:	bc08      	pop	{r3}
 8004304:	469e      	mov	lr, r3
 8004306:	4770      	bx	lr

08004308 <_fini>:
 8004308:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800430a:	bf00      	nop
 800430c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800430e:	bc08      	pop	{r3}
 8004310:	469e      	mov	lr, r3
 8004312:	4770      	bx	lr
